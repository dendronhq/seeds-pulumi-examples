[{"doc":"This page has not yet sprouted","title":"This page has not yet sprouted","hpath":"403","content":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","url":"https://pulumi.dendron.so/notes/403.html","relUrl":"notes/403.html"},{"doc":"Root","title":"Root","hpath":"root","content":"\n# Dendron Pulummi\n\nThis is a published Dendron [vault](https://wiki.dendron.so/notes/c6fd6bc4-7f75-4cbb-8f34-f7b99bfe2d50.html#vaults) for [pulumi examples](https://github.com/pulumi/examples).  It is generated and published using [Dendron](http://dendron.so/), the open source note-taking tool for developers. \n\nYou can reference these docs locally by cloning them using Dendron via our [github repo](https://github.com/dendronhq/seeds-pulumi-examples). You can follow the instructions [here](https://wiki.dendron.so/notes/401c5889-20ae-4b3a-8468-269def4b4865.html#adding-a-remote-vault-to-your-dendron-workspace) to do so. \n\nAll content on this site is from pulumi examples. If you would like to contribute to pulumi examples, simply click on the `Edit this page on GitHub` at the bottom of each page. \n\n","url":"https://pulumi.dendron.so","relUrl":"/"},{"doc":"Twilio Ts Component","title":"Twilio Ts Component","hpath":"twilio-ts-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Twilio SMS Handler\n\nA sample for interacting with Twilio SMS. This sample includes a custom Component Resource that abstracts the tedium of interacting with API Gateway and parsing incoming messages from Twilo. This sample requires you to have a Twilio number which can handle SMS.\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init twilio-test\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Configure Twilio settings \n\n   ```\n   $ pulumi config set twilio:accountSid <your account sid from https://www.twilio.com/console>\n   $ pulumi config set --secret twilio:authToken <your auth token from https://www.twilio.com/console>\n   $ pulumi config set phoneNumberSid <the phone number sid from https://www.twilio.com/console/phone-numbers/>\n   ```\n\n4. Restore NPM modules via `npm install`.\n\n5. Preview and run the deployment via `pulumi up`. \n\n   ```\n   $ pulumi up\n   Previewing update of stack 'url-shortener-dev'\n   ...\n\n   Updating stack 'twilio-dev'\n   Performing changes:\n\n       Type                                 Name                                        Status      Info\n   +   pulumi:pulumi:Stack                  aws-serverless-twilio-component-twilio-dev  created\n   +   ├─ twilio:rest:IncomingPhoneNumber   twilio-example                              created\n   +   │  └─ aws-serverless:apigateway:API  twilio-example-api                          created\n   +   │     ├─ aws:apigateway:RestApi      twilio-example-api                          created\n   +   │     ├─ aws:apigateway:Deployment   twilio-example-api                          created\n   +   │     ├─ aws:lambda:Permission       twilio-example-api-c9e56dfd                 created\n   +   │     └─ aws:apigateway:Stage        twilio-example-api                          created\n   +   └─ aws:serverless:Function           twilio-example-apic9e56dfd                  created\n   +      ├─ aws:iam:Role                   twilio-example-apic9e56dfd                  created\n   +      ├─ aws:iam:RolePolicyAttachment   twilio-example-apic9e56dfd-32be53a2         created\n   +      └─ aws:lambda:Function            twilio-example-apic9e56dfd                  created\n\n   ---outputs:---\n   smsUrl: \"https://k44yktdqf8.execute-api.us-west-2.amazonaws.com/stage/sms\"\n\n   info: 11 changes performed:\n       + 11 resources created\n   Update duration: 27.155440706s\n   ```\n\n6. Send an SMS message to the phone number you have registered with Twilio, or make a request by hand with cURL (you may wish to pass additional data with your request, see <https://www.twilio.com/docs/sms/twiml#request-parameters> for the complete set of data that Twilio sends).\n\n   ```\n   $ curl -X POST -d \"From=+12065555555\" -d \"Body=Hello!\" $(pulumi stack output smsUrl)\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n## About the code\n\nThis example builds and uses a custom `pulumi.CustomResource` to make it easy to spin up a SMS handler on Twilio. It could be extended to support Voice as well, by adding an additional handler to `twilio.IncomingPhoneNumberArgs`.\n\nThe custom resource itself is in [`twilio.ts`](./twilio.ts) and handles the work to use `@pulumi/aws-serverless` to create a REST endpoint with `serverless.apigateway.API`. The handler registered with API Gateway does some of the teadious work of decoding the incoming event data and the delegates to the actual handler provided to the custom resource. \n\nIn addition, at deployment time, the custom resource uses the Twilio SDK to update the SMS Handler for the provided phone number, instead of forcing you to register it by hand in the Twilio console.\n\nTwilio can handle either responses with `text/plain` or `application/xml` Content-Types (when `application/xml` is used, Twilio treats the response as TwiML). `serverless.apigateway.API` defaults to `application/json`, which will cause Twilio to fail to process the response, so we explicitly set the Content-Type header to `text/plain` in this example.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [twilio.ts](/assets/twilio.ts)\n\n","url":"https://pulumi.dendron.so/notes/twilio-ts-component.html","relUrl":"notes/twilio-ts-component.html"},{"doc":"Testing Unit Ts","title":"Testing Unit Ts","hpath":"testing-unit-ts","content":"# Unit Testing Pulumi programs in TypeScript\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in TypeScript. The example uses the [Mocha](https://mochajs.org/) test framework to define and run the tests.\n\n## Prerequisites\n\n1. [Ensure you have the latest Node.js and NPM](https://nodejs.org/en/download/).\n2. [Install the Mocha test framework](https://mochajs.org/#installation).\n\n## Running the tests\n\n1. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n2. Run the tests:\n\n   ```\n   $ mocha -r ts-node/register ec2tests.ts\n\n   Infrastructure\n     #server\n       ✓ must have a name tag\n       ✓ must not use userData (use an AMI instead)\n     #group\n       ✓ must not open port 22 (SSH) to the Internet\n\n   3 passing (420ms)\n   ```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [ec2tests.ts](/assets/ec2tests.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-ts.html","relUrl":"notes/testing-unit-ts.html"},{"doc":"Testing Unit Py","title":"Testing Unit Py","hpath":"testing-unit-py","content":"# Unit Testing Pulumi programs in Python\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in Python. The example uses the [unittest](https://docs.python.org/3/library/unittest.html) test framework to define and run the tests.\n\n## Running the tests\n\n1. Create a Python virtualenv, activate it, and install dependencies:\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n2. Run the tests:\n\n   ```\n   $ python -m unittest\n\n   ------------------------------------------------------------\n   Ran 2 tests in 0.004s\n\n   OK\n   ```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [infra.py](/assets/infra.py)\n- [requirements.txt](/assets/requirements.txt)\n- [test_ec2.py](/assets/test_ec2.py)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-py.html","relUrl":"notes/testing-unit-py.html"},{"doc":"Testing Unit Go","title":"Testing Unit Go","hpath":"testing-unit-go","content":"# Unit Testing Pulumi programs in Go\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in Go.\n\n## Prerequisites\n\n[Install Go](https://golang.org/doc/install).\n\n## Running the tests\n\n2. Run the tests:\n\n   ```\n   $ go test\n\n   PASS\n   ok  \ttesting-unit-go\t0.400s\n   ```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n- [main_test.go](/assets/main_test.go)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-go.html","relUrl":"notes/testing-unit-go.html"},{"doc":"Testing Unit Fs Mocks","title":"Testing Unit Fs Mocks","hpath":"testing-unit-fs-mocks","content":"# Unit Testing Pulumi programs in F#\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in F#.\nThe example uses the [NUnit](https://nunit.org/) test framework to define and run the tests and [FluentAssertions](https://github.com/fluentassertions/fluentassertions) for assertions.\n\nIt defines a stack that deploys a static website to Azure Storage and a suite of tests to validate the deployment. It also shows several examples of changing mocks for the testing needs.\n\n## Prerequisites\n\n[Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n## Running the tests\n\nRun the tests:\n\n```\n$ dotnet test\n\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 5 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 5\n     Passed: 5\n Total time: 1.2167 Seconds\n```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [Testing.fs](/assets/testing.fs)\n- [UnitTestingFs.fsproj](/assets/unittestingfs.fsproj)\n- [WebsiteStack.fs](/assets/websitestack.fs)\n- [WebsiteStackTests.fs](/assets/websitestacktests.fs)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-fs-mocks.html","relUrl":"notes/testing-unit-fs-mocks.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"testing-unit-fs-mocks.wwwroot","content":"## Imported Assets\n\n- [about.html](/assets/about.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-fs-mocks.wwwroot.html","relUrl":"notes/testing-unit-fs-mocks.wwwroot.html"},{"doc":"Testing Unit Cs","title":"Testing Unit Cs","hpath":"testing-unit-cs","content":"# Unit Testing Pulumi programs in C#\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in C#. The example uses the [NUnit](https://nunit.org/) test framework to define and run the tests, [Moq](https://github.com/moq/moq4) for mocks, and [FluentAssertions](https://github.com/fluentassertions/fluentassertions) for assertions.\n\n## Prerequisites\n\n[Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n## Running the tests\n\nRun the tests:\n\n```\n$ dotnet test\n\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 1 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 1\n     Passed: 1\n Total time: 1.2167 Seconds\n```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [Testing.cs](/assets/testing.cs)\n- [UnitTesting.csproj](/assets/unittesting.csproj)\n- [WebserverStack.cs](/assets/webserverstack.cs)\n- [WebserverStackTests.cs](/assets/webserverstacktests.cs)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-cs.html","relUrl":"notes/testing-unit-cs.html"},{"doc":"Testing Unit Cs Mocks","title":"Testing Unit Cs Mocks","hpath":"testing-unit-cs-mocks","content":"# Unit Testing Pulumi programs in C#\n\nAn example of writing mock-based unit tests with both infrastructure definition and tests written in C#.\nThe example uses the [NUnit](https://nunit.org/) test framework to define and run the tests and [FluentAssertions](https://github.com/fluentassertions/fluentassertions) for assertions.\n\nIt defines a stack that deploys a static website to Azure Storage and a suite of tests to validate the deployment. It also shows several examples of changing mocks for the testing needs.\n\n## Prerequisites\n\n[Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n## Running the tests\n\nRun the tests:\n\n```\n$ dotnet test\n\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 5 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 5\n     Passed: 5\n Total time: 1.2167 Seconds\n```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Unit Testing Guide](https://www.pulumi.com/docs/guides/testing/unit/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [Testing.cs](/assets/testing.cs)\n- [UnitTesting.csproj](/assets/unittesting.csproj)\n- [WebsiteStack.cs](/assets/websitestack.cs)\n- [WebsiteStackTests.cs](/assets/websitestacktests.cs)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-cs-mocks.html","relUrl":"notes/testing-unit-cs-mocks.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"testing-unit-cs-mocks.wwwroot","content":"## Imported Assets\n\n- [about.html](/assets/about.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/testing-unit-cs-mocks.wwwroot.html","relUrl":"notes/testing-unit-cs-mocks.wwwroot.html"},{"doc":"Testing Pac Ts","title":"Testing Pac Ts","hpath":"testing-pac-ts","content":"# Writing Policies for Testing Pulumi Programs\n\nAn example of writing tests based on [Policy as Code (\"CrossGuard\")](https://www.pulumi.com/docs/guides/crossguard/) with both infrastructure definition and tests written in TypeScript.\n\n## Prerequisites\n\n1. [Ensure you have the latest Node.js and NPM](https://nodejs.org/en/download/).\n2. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/).\n3. [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required).\n\n## Running the tests\n\nThe tests will run while Pulumi deploys the code, right before the deployment of each resource.\n\n1. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the AWS region for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n4. Run `pulumi up` with `tests` folder as policy:\n\n   ```\n   $ pulumi up --policy-pack tests\n   ```\n\n   The preview displays that Policy Pack will run:\n\n   ```\n   Policy Packs run:\n   Name                Version\n   tests-pack (tests)  (local)\n   ```\n\n   Confirm the preview with `yes` and watch the deployment happen with tests running in parallel. If a test fails, the deployment will stop.\n\n5. Tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Property Testing Guide](https://www.pulumi.com/docs/guides/testing/property-testing/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/testing-pac-ts.html","relUrl":"notes/testing-pac-ts.html"},{"doc":"Tests","title":"Tests","hpath":"testing-pac-ts.tests","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/testing-pac-ts.tests.html","relUrl":"notes/testing-pac-ts.tests.html"},{"doc":"Testing Integration","title":"Testing Integration","hpath":"testing-integration","content":"# Integration Testing of Pulumi programs in Go\n\nThis integration test treats infrastucture deployed by a Pulumi program as a \"black box\". If deploys the infrastructure, retrieves an endpoint from stack outputs, sends an HTTP request to the endpoint, validates the response, and tears down the infrastructure again.\n\nThis test deploys a static website as an AWS S3 bucket and checks that the site is reachable.\n\n## Prerequisites\n\n1. [Install Go](https://golang.org/doc/install).\n2. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/).\n3. [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required).\n\n## Running the tests\n\nRun the tests:\n\n```\n$ go test\n\n...\n\nPASS\nok  \tgithub.com/pulumi/examples/testing-integration\t65.749s\n```\n\n## Further steps\n\nLearn more about testing Pulumi programs:\n\n- [Testing Guide](https://www.pulumi.com/docs/guides/testing/)\n- [Integration Testing Guide](https://www.pulumi.com/docs/guides/testing/integration/)\n\n* * *\n\n## Imported Assets\n\n- [examples_test.go](/assets/examples_test.go)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n\n","url":"https://pulumi.dendron.so/notes/testing-integration.html","relUrl":"notes/testing-integration.html"},{"doc":"Program","title":"Program","hpath":"testing-integration.program","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/testing-integration.program.html","relUrl":"notes/testing-integration.program.html"},{"doc":"Www","title":"Www","hpath":"testing-integration.program.www","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/testing-integration.program.www.html","relUrl":"notes/testing-integration.program.www.html"},{"doc":"Testing Integration Py","title":"Testing Integration Py","hpath":"testing-integration-py","content":"# Integration Testing of Pulumi programs in Python\n\nThis integration test is using Pulumi [Automation API](https://www.pulumi.com/blog/automation-api/) and [Python Unittest](https://docs.python.org/3/library/unittest.html)  to simulate integration test in Pulumi without native python integration library. \n\n| UnitTest | Integration Test | Target |\n| -------- | ---------------- | ------ |\n| YES      | YES              | Input  |\n| No       | YES              | Output |\n\n## Test Case\n\nTo create a s3 bucket and upload a file\n\n1. Create the stack with a bucket\n2. Verify S3 bucket name and region in Output\n3. Using client to check the S3 name again\n4. Using client to upload a file\n5. Deleting that file\n6. Delete the stack with the bucket\n\n## Precondition\n\nYou need to create the credential file yourself. By default, its location is at ~/.aws/credentials. Your access key needs the correct permissions for S3 bucket and object creation/deletion.\n\n```\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```\n\n## Running the tests\n\n```\npip install -r requirements.txt\npython -m unittest test_s3_it.py\n```\n\n## Test Life Cycle\n\n- Create a stack and export the desired outputs.\n- Validate any output values you defined in advance.\n- In the end, don't forget to destroy the stack. \n\n```\nfrom pulumi.x import automation as auto\n\nclass TestS3(unittest.TestCase):  \n  \n    @classmethod  \n    def setUpClass(cls) -> None:  \n      ....\n        cls.stack = auto.create_or_select_stack(stack_name=cls.STACK_NAME, work_dir=cls.WORK_DIR) \n\t\tcls.stack.up(output=print)\n        cls.outputs = cls.stack.outputs() \n       ...\n          \n    @classmethod  \n    def tearDownClass(cls) -> None:  \n        cls.stack.destroy(on_output=print)\n        cls.stack.workspace.remove_stack(cls.STACK_NAME)  \n  \n    def test_s3_output_case(self):  \n    ...\n        bucket_region = self.outputs.get(OUTPUT_KEY_REGION)  \n        self.assertEqual(self.REGION_NAME, bucket_region.value)  \n        ...\n  \n```\n\n## Further steps\n\nLearn more about testing Pulumi programs and Automation API:\n\n- [Automation API](https://www.pulumi.com/blog/automation-api/) \n- [Pulumi Test](https://www.pulumi.com/docs/guides/testing/)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**init**.py](/assets/__init__.py)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n- [resource_s3.py](/assets/resource_s3.py)\n- [test_s3_it.py](/assets/test_s3_it.py)\n\n","url":"https://pulumi.dendron.so/notes/testing-integration-py.html","relUrl":"notes/testing-integration-py.html"},{"doc":"Secrets Provider","title":"Secrets Provider","hpath":"secrets-provider","content":"\n","url":"https://pulumi.dendron.so/notes/1a1468b3-b365-480e-9da5-d91d33acf0e4.html","relUrl":"notes/1a1468b3-b365-480e-9da5-d91d33acf0e4.html"},{"doc":"Vault","title":"Vault","hpath":"secrets-provider.vault","content":"# Pulumi Vault Encryption\n\nPulumi allows you to encrypt any secrets stored in the backend.\n\nThis example shows how this might be done for Hashicorp Vault. It creates an S3 bucket with a single file that has a \"secret\" value.\n\n# Getting Started\n\nTo use this example, perform the following steps. This examples assumes you have a working vault server with the [transit secret backend](https://www.vaultproject.io/docs/secrets/transit) enabled.\n\nYou should ensure you have an environment variable, `VAULT_SERVER_URL` set to the address of your vault server:\n\n```bash\nexport VAULT_SERVER_URL=\"https://vault.service.consul:8201\n```\n\nYou should also have a [Vault token](https://www.vaultproject.io/docs/concepts/tokens) with a [policy](https://www.vaultproject.io/docs/concepts/policies) that is adequately scoped to allow access to the transit backend.\n\nOnce you do, set the `VAULT_SERVER_TOKEN` environment variable:\n\n```bash\nexport VAULT_SERVER_TOKEN=<token>\n```\n\n## Create a Key\n\nWe first need to create a key in the transit backend. Assuming it's been enabled at `/transit` we can create the key like so:\n\n```bash\n\nvault write -f transit/keys/my-stack\n```\n\n## Initialize your stack\n\nInitialize your stack with Pulumi and ensure you set the `--secrets-provider` flag:\n\n```bash\n# Using your alias\npulumi stack init $PULUMI_ORG_NAME/$PULUMI_STACK_NAME --secrets-provider=\"hashivault://my-stack\"\n\n```\n\n## Verify your stack settings\n\nIf everything has worked as expected, you should be able to verify in your stack settings that the secretsprovider is set:\n\n```bash\ncat Pulumi.$PULUMI_STACK_NAME.yaml\nsecretsprovider: hashivault://my-stack\nencryptedkey: dmF1bHQ6djE6TlhML000T2ZCcWVTSjRmeFhiOVpLeWNmUjErK1k0Wnh6QVhTQm56TXBvZ0dyL2RCQUdEcUFBTHdDUHNIMW8yQkxrVVJNdlNDeDdtbUd2WG0=\n```\n\n## Set your configuration settings\n\n```bash\npulumi config set aws:region us-west-2\n# Set the bucketname & the secret contents\npulumi config set bucketName pulumi-lbriggs\npulumi config set --secret secretValue \"correct-horse-battery-stable\"\n```\n\n## Create the stack\n\n```bash\n# This will create the stack without prompting, be aware!\npulumi up --yes\nPreviewing update (vault-kms):\n     Type                    Name                    Plan\n +   pulumi:pulumi:Stack     pulumi-vault-kms-vault-kms  create\n +   ├─ aws:s3:Bucket        bucket                  create\n +   └─ aws:s3:BucketObject  secret                  create\n\nResources:\n    + 3 to create\n\nUpdating (aws-kms):\n     Type                    Name                    Status\n +   pulumi:pulumi:Stack     pulumi-vault-kms-vault-kms  created\n +   ├─ aws:s3:Bucket        bucket                  created\n +   └─ aws:s3:BucketObject  secret                  created\n\nOutputs:\n    bucketId: \"pulumi-lbriggs\"\n    secretId: \"[secret]\"\n\nResources:\n    + 3 created\n\nDuration: 8s\n\nPermalink: <redacted>\n```\n\nYou'll notice the secret value is also omitted from the output!\n\n## Verify the encryption\n\nA quick way to verify if the encryption is using the Vault key is to remove your `VAULT_SERVER_TOKEN` environment variable setting:\n\n```bash\nunset \npulumi up --yes\nerror: getting secrets manager: secrets (code=Unknown): Error making API request.\n\nURL: PUT http://vault.service.consul:8200/v1/transit/decrypt/my-stack\nCode: 400. Errors:\n\n* missing client token\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/secrets-provider.vault.html","relUrl":"notes/secrets-provider.vault.html"},{"doc":"Gcloud","title":"Gcloud","hpath":"secrets-provider.gcloud","content":"# Pulumi GCloud KMS Encryption\n\nPulumi allows you to use KMS encryption from your cloud provider to encrypt any secrets stored in the backend.\n\nThis example shows how this might be done for GCloud KMS. It creates a storage bucket with a single file that has a \"secret\" value.\n\n# Getting Started\n\nTo use this example, perform the following steps. This examples assumes you have the pulumi-cli installed and the gcloud SDK installed.\n\nYou should also ensure:\n\n- You have the gcloud SDK installed\n- You have enabled the CloudKMS API for your gcloud project\n- You have enabled billing, which allows you to create a key\n- You are logged in with the gcloud sdk and have your application-default credentials available at `$HOME/.config/gcloud/application_default_credentials.json`\n\n## Create an gcloud KMS Key\n\n```bash\n# First, create a keyring\ngcloud kms keyrings create pulumi-example --location global\n\n# Then, create a key\ngcloud kms keys create pulumi-secrets  --purpose=encryption --keyring=pulumi-example --location=global --labels app=\"pulumi\",purpose=\"secrets\"\n\n# Finally, get the key path to use late:\ngcloud kms keys list --format=json --location global --keyring pulumi-example --filter=\"labels.app=pulumi AND labels.purpose=secrets\" | jq -r \".[].name\"\n```\n\n_When creating your key, be sure to specify a permissions that restricts access to only those that need to use the key_\n\n## Initialize your stack\n\nInitialize your stack with Pulumi and ensure you set the `--secrets-provider` flag:\n\n```bash\n# Using your keypath, see the kms keys list command above to retrieve it\npulumi stack init $PULUMI_ORG_NAME/$PULUMI_STACK_NAME --secrets-provider=\"gcpkms://projects/lbriggs/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets\"\n```\n\n## Verify your stack settings\n\nIf everything has worked as expected, you should be able to verify in your stack settings that the secretsprovider is set:\n\n```bash\ncat Pulumi.$PULUMI_STACK_NAME.yaml\nsecretsprovider: gcpkms://projects/lbriggs/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets\nencryptedkey: CiQAUsTOmfT2FzRuzaPV1RU8CKUpiNu7Pt349MCgmi/MV4CxMQkSSQCnQvY9rnfYI2baOZPrVzh2WBsjvTEgkTbCCt9NaDJPDIae9tKMMvpSrTQ2C/GC9fmZWFd46yjPWV1lLwVTPiX5Atf5ZchBb0c=\n```\n\n## Set your configuration settings\n\n```bash\n# Set the project\npulumi config set gcp:project $MY_PROJECT\n# Set the bucketname & the secret contents\npulumi config set bucketName pulumi-lbriggs\npulumi config set --secret secretValue \"correct-horse-battery-stable\"\n```\n\n## Create the stack\n\n```bash\n# This will create the stack without prompting, be aware!\npulumi up --yes                                                                                                  home.lbrlabs/default ⎈\nPreviewing update (gcloud-kms):\n     Type                         Name                          Plan\n     pulumi:pulumi:Stack          pulumi-gcloud-kms-gcloud-kms\n +   ├─ gcp:storage:Bucket        bucket                        create\n +   └─ gcp:storage:BucketObject  secret                        create\n\nOutputs:\n  + bucketUrl: output<string>\n  + secretId : \"[secret]\"\n\nResources:\n    + 2 to create\n    1 unchanged\n\nUpdating (gcloud-kms):\n     Type                         Name                          Status\n     pulumi:pulumi:Stack          pulumi-gcloud-kms-gcloud-kms\n +   ├─ gcp:storage:Bucket        bucket                        created\n +   └─ gcp:storage:BucketObject  secret                        created\n\nOutputs:\n  + bucketUrl: \"gs://pulumi-lbriggs-kms\"\n  + secretId : \"[secret]\"\n\nResources:\n    + 2 created\n    1 unchanged\n\nDuration: 4s\n\nPermalink: https://app.pulumi.com/jaxxstorm/pulumi-gcloud-kms/gcloud-kms/updates/2\n```\n\nYou'll notice the secret value is also omitted from the output!\n\n## Verify the encryption\n\nA quick way to verify if the encryption is using the gcloud KMS key is to remove your application credentials temporarily:\n\n_NOTE: I'm sure there's a better way? PR's welcome_\n\n```bash\ngcloud auth application-default revoke\npulumi up\nerror: getting secrets manager: open keeper gcpkms://projects/lbriggs/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets: google: could not find default credentials. See https://developers.google.com/accounts/docs/application-default-credentials for more information.\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/secrets-provider.gcloud.html","relUrl":"notes/secrets-provider.gcloud.html"},{"doc":"Azure","title":"Azure","hpath":"secrets-provider.azure","content":"# Pulumi Azure KMS Encryption\n\nPulumi allows you to use Azure Keyvault encryption from your cloud provider to encrypt any secrets stored in the backend.\n\nThis example shows how this might be done for Azure Keyvault. It creates a storage bucket with a single file that has a \"secret\" value.\n\n# Getting Started\n\nTo use this example, perform the following steps. This examples assumes you have the pulumi-cli installed and the Azure CLI installed.\n\nYou should also ensure:\n\n- You azure command line tool installed\n- You are logging in via the `az` command line tool.\n- You have created a resource-group\n- You must have the environment variable `AZURE_KEYVAULT_AUTH_VIA_CLI` set to `true` eg: `export AZURE_KEYVAULT_AUTH_VIA_CLI=true`\n\n## Create an Azure Keyvault Key\n\n> `$YOUR_OBJECT_ID` in this case corresponds to the object ID of the Azure ServicePrincipal or account currently logged into the `az` CLI. You will likely need to run a ` az ad sp show --id {app id} | jq -r .objectId` or `az ad user show --id {user id}` query to get this value.\n\n```bash\n# First, create a keyvault\naz keyvault create -l westus -n pulumi --resource-group $RESOURCE_GROUP_NAME\n\n# Then, create a key\naz keyvault key create --name pulumi-secret --vault-name pulumi\n\n# Finally, set the relevant permissions on the keyvault\naz keyvault set-policy --name pulumi --object-id $YOUR_OBJECT_ID --key-permissions decrypt get create delete list update import backup restore recover encrypt\n```\n\n_When creating your key, be sure to specify a permissions that restricts access to only those that need to use the key_\n\n## Initialize your stack\n\nInitialize your stack with Pulumi and ensure you set the `--secrets-provider` flag:\n\n```bash\n# Using your vault and key name\npulumi stack init $PULUMI_ORG_NAME/$PULUMI_STACK_NAME --secrets-provider=\"azurekeyvault://pulumi.vault.azure.net/keys/pulumi-secret\"\n```\n\n## Verify your stack settings\n\nIf everything has worked as expected, you should be able to verify in your stack settings that the secretsprovider is set:\n\n```bash\ncat Pulumi.$PULUMI_STACK_NAME.yaml\nsecretsprovider: azurekeyvault://pulumi.vault.azure.net/keys/pulumi-secret/b636b47f2b474b2a8de3526561eae81b\nencryptedkey: Q2U5a1ZuTWsxLXVWOFdhVEdfaGExdWR1SzhzTlVFMldhWGlxU3RJVVdUWFJBcmM4M1ZlYzZOVVlpU3J2dW1NX2RIelMwV1h4el9hSjFibjcwdjVXcEgxZVlFa2c1LTlGUTBwX2ZnamcyNXh0V2RnYXlKaUNWSzd0VmlhY0ZyT2NCNGJ2SG40NkE4OFR2d0NWVzVEOUZOaUpGNm03TTlLUEl4VC0tbG9fYUJSSUlrZDJuUmNxVTJ2cWxDUjYtdVJYYjJKUjFoTlRYYkNaaEVTUzY4dGtNajZNRXBOQ1k4OGc4d0RTeUVBVGhweEswbUVXc3RaaGUtdnpQdktVY2tFUGFCVkdOaHZHOU1SYU91RWJ6QVZnLUtVdExHYlFHd19vUU15T3I4d3ZvajdJQ0liS0QtUTNLY0h4Q0JsMGNjd1A5ZXNWRUNNQ0tQZGhPY1cySTJwU1BR\n\n```\n\n## Set your configuration settings\n\n```bash\npulumi config set azure:location westus\n# Set the bucketname & the secret contents\npulumi config set bucketName pulumilbriggs\npulumi config set --secret secretValue \"correct-horse-battery-stable\"\n```\n\n## Create the stack\n\n```bash\n# This will create the stack without prompting, be aware!\nPreviewing update (azure-keyvault):\n     Type                         Name                                  Plan\n     pulumi:pulumi:Stack          pulumi-azure-keyvault-azure-keyvault\n +   ├─ azure:core:ResourceGroup  resourceGroup                         create\n +   ├─ azure:storage:Account     storage                               create\n +   ├─ azure:storage:Container   container                             create\n +   └─ azure:storage:Blob        blob                                  create\n\nOutputs:\n  + connectionString: output<string>\n\nResources:\n    + 4 to create\n    1 unchanged\n\nUpdating (azure-keyvault):\n     Type                         Name                                  Status\n     pulumi:pulumi:Stack          pulumi-azure-keyvault-azure-keyvault\n +   ├─ azure:core:ResourceGroup  resourceGroup                         created\n +   ├─ azure:storage:Account     storage                               created\n +   ├─ azure:storage:Container   container                             created\n +   └─ azure:storage:Blob        blob                                  created\n\nOutputs:\n  + connectionString: \"DefaultEndpointsProtocol=https;AccountName=pulumilbriggs;AccountKey=Efa63L/xDstQgyvgsYHZqzl3oIlQA4scS4NeX/O1TeBI3mbwMcKxiHIkAGkwJj21EPzHebiuAUM09i7dVv3f/A==;EndpointSuffix=core.windows.net\"\n\nResources:\n    + 4 created\n    1 unchanged\n\nDuration: 31s\n\nPermalink: https://app.pulumi.com/jaxxstorm/pulumi-azure-keyvault/azure-keyvault/updates/3\n```\n\nYou'll notice the secret value is also omitted from the output!\n\n## Verify the encryption\n\nA quick way to verify if the encryption is using the Azure Keyvault key is to remove your application credentials temporarily:\n\n```\nunset AZURE_KEYVAULT_AUTH_VIA_CLI\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/secrets-provider.azure.html","relUrl":"notes/secrets-provider.azure.html"},{"doc":"Aws","title":"Aws","hpath":"secrets-provider.aws","content":"# Pulumi AWS KMS Encryption\n\nPulumi allows you to use KMS encryption from your cloud provider to encrypt any secrets stored in the backend.\n\nThis example shows how this might be done for AWS KMS. It creates an S3 bucket with a single file that has a \"secret\" value.\n\n# Getting Started\n\nTo use this example, perform the following steps. This examples assumes you have the pulumi-cli installed and the aws-cli installed.\n\nYou should also ensure you have the correct `AWS_PROFILE` set:\n\n```bash\nexport AWS_PROFILE=\"myaccount\"\n```\n\n## Create an AWS KMS Key\n\n```bash\naws kms create-key --tags TagKey=Purpose,TagValue=\"Pulumi Secret Encryption\" --description \"Pulumi secret encryption Key\"\n\n# Optionally create an alias to this key\naws kms create-alias --alias-name alias/pulumi-encryption --target-key-id $MY_KEY_ID\n```\n\n_When creating your key, be sure to specify a sane key policy that restricts access to only those that need to use the key_\n\n## Initialize your stack\n\nInitialize your stack with Pulumi and ensure you set the `--secrets-provider` flag:\n\n```bash\n# Using your alias\npulumi stack init $PULUMI_ORG_NAME/$PULUMI_STACK_NAME --secrets-provider=\"awskms://alias/pulumi-encryption?region=us-west-2\"\n\n# Using your key id\npulumi stack init $PULUMI_ORG_NAME/$PULUMI_STACK_NAME --secrets-provider=\"awskms://1234abcd-12ab-34cd-56ef-1234567890ab?region=us-west-2\"\n```\n\n## Verify your stack settings\n\nIf everything has worked as expected, you should be able to verify in your stack settings that the secretsprovider is set:\n\n```bash\ncat Pulumi.$PULUMI_STACK_NAME.yaml\nsecretsprovider: awskms://alias/pulumi-encryption?region=us-west-2\nencryptedkey: AQICAHiGajWxHHTBJxo1FU9BOztzLzxEXpr02SgLetPNGfdfLAG7c5ylmHRJJRz5jtaj2LtzAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMT+iyFkgT4bmdja9WAgEQgDuVYN+iLr6sdyFNGXJS8GfjKiqMBXVvwmn9byd3ywCfJwMsuDnpqAWSmquV5eoLBdPEEOY1D/TuBQuCLQ==\n```\n\n## Set your configuration settings\n\n```bash\npulumi config set aws:region us-west-2\n# Set the bucketname & the secret contents\npulumi config set bucketName pulumi-lbriggs\npulumi config set --secret secretValue \"correct-horse-battery-stable\"\n```\n\n## Create the stack\n\n```bash\n# This will create the stack without prompting, be aware!\npulumi up --yes\nPreviewing update (aws-kms):\n     Type                    Name                    Plan\n +   pulumi:pulumi:Stack     pulumi-aws-kms-aws-kms  create\n +   ├─ aws:s3:Bucket        bucket                  create\n +   └─ aws:s3:BucketObject  secret                  create\n\nResources:\n    + 3 to create\n\nUpdating (aws-kms):\n     Type                    Name                    Status\n +   pulumi:pulumi:Stack     pulumi-aws-kms-aws-kms  created\n +   ├─ aws:s3:Bucket        bucket                  created\n +   └─ aws:s3:BucketObject  secret                  created\n\nOutputs:\n    bucketId: \"pulumi-lbriggs\"\n    secretId: \"[secret]\"\n\nResources:\n    + 3 created\n\nDuration: 8s\n\nPermalink: <redacted>\n```\n\nYou'll notice the secret value is also omitted from the output!\n\n## Verify the encryption\n\nA quick way to verify if the encryption is using the AWS KMS key is to remove your `AWS_PROFILE` setting:\n\n```bash\nunset AWS_PROFILE\npulumi up --yes\nerror: getting secrets manager: secrets (code=Unknown): InvalidSignatureException: The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.\n\tstatus code: 400, request id: 35ff51c6-ef88-4c06-9146-361231b8fd4a\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/secrets-provider.aws.html","relUrl":"notes/secrets-provider.aws.html"},{"doc":"Readme","title":"Readme","hpath":"readme","content":"# Pulumi Examples\n\nThis repository contains examples of using Pulumi to build and deploy cloud applications and infrastructure.\n\nEach example has a two-part prefix, `<cloud>-<language>`, to indicate which `<cloud>` and `<language>` it pertains to.\nFor example, `<cloud>` could be `aws` for [Amazon Web Services](https://github.com/pulumi/pulumi-aws), `azure` for [Microsoft\nAzure](https://github.com/pulumi/pulumi-azure), `gcp` for [Google Cloud\nPlatform](https://github.com/pulumi/pulumi-gcp), `kubernetes` for\n[Kubernetes](https://github.com/pulumi/pulumi-kubernetes), or `cloud` for\n[Pulumi's cross-cloud programming framework](https://github.com/pulumi/pulumi-cloud).\n\nSee the [Pulumi documentation](https://www.pulumi.com/docs/) for more details on getting started with Pulumi.\n\n## Checking Out a Single Example\n\nYou can checkout only the examples you want by using a [sparse checkout](https://git-scm.com/docs/git-sparse-checkout). The following example shows how checkout only the example you want.\n\n```bash\n$ mkdir examples && cd examples\n$ git init\n$ git remote add origin -f https://github.com/pulumi/examples/\n$ git config core.sparseCheckout true\n$ echo <example> >> .git/info/sparse-checkout\n$ git pull origin master\n```\n\n## Outline\n\n- [AWS](#aws)\n  - [TypeScript](#typescript)\n  - [JavaScript](#javascript)\n  - [Python](#python)\n  - [Go](#go)\n  - [C#](#c)\n  - [F#](#f)\n- [Azure](#azure)\n  - [TypeScript](#typescript-1)\n  - [Python](#python-1)\n  - [Go](#go-1)\n  - [C#](#c-1)\n  - [F#](#f-1)\n- [GCP](#gcp)\n  - [TypeScript](#typescript-2)\n  - [JavaScript](#javascript-1)\n  - [Python](#python-2)\n  - [Go](#go-2)\n  - [C#](#c-2)\n- [Kubernetes](#kubernetes)\n  - [TypeScript](#typescript-3)\n  - [JavaScript](#javascript-2)\n  - [Python](#python-3)\n  - [Go](#go-3)\n  - [C#](#c-3)\n- [Cloud](#cloud)\n- [DigitalOcean](#digitalocean)\n- [Multicloud](#multicloud)\n- [F5](#f5)\n- [Twilio](#twilio)\n- [Linode](#linode)\n- [Packet](#packet)\n- [Testing](#testing)\n\n## AWS\n\n### TypeScript\n\n| Example                                                                     | Description                                                                                                                                                |\n| --------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [API Gateway](aws-ts-apigateway)                                            | Deploy a simple REST API that counts the number of times a route has been hit.                                                                             |\n| [API Gateway HTTP API with routes](aws-ts-apigatewayv2-http-api)            | Deploy a HTTP API that invokes a lambda.                                                                                                                   |\n| [API Gateway HTTP API quickstart](aws-ts-apigatewayv2-http-api-quickcreate) | Deploy a very simple HTTP API that invokes a lambda.                                                                                                       |\n| [Apigateway - Auth0](aws-ts-apigateway-auth0)                               | Deploy a simple REST API protected by Auth0.                                                                                                               |\n| [AppSync](aws-ts-appsync)                                                   | Deploy a basic GraphQL endpoint in AWS AppSync.                                                                                                            |\n| [AssumeRole](aws-ts-assume-role)                                            | Use AssumeRole to create resources.                                                                                                                        |\n| [Containers](aws-ts-containers)                                             | Provision containers on Fargate.                                                                                                                           |\n| [EKS - Dashboard](aws-ts-eks)                                               | Deploy an EKS Kubernetes cluster with an EBS-backed StorageClass, then the Kubernetes Dashboard into the cluster.                                          |\n| [EKS - Hello World](aws-ts-eks-hello-world)                                 | Deploy an EKS Kubernetes cluster with an EBS-backed StorageClass, then a Kubernetes namespace and nginx deployment into the cluster.                       |\n| [EKS - Migrate Node Groups](aws-ts-migrate-nodegroups)                      | Create an EKS cluster and node group to use for workload migration with zero downtime.                                                                     |\n| [Fargate](aws-ts-hello-fargate)                                             | Build, deploy, and run a Dockerized app using ECS, ECR, and Fargate.                                                                                       |\n| [Lambda Thumbnailer](aws-ts-lambda-thumbnailer)                             | Create a video thumbnail extractor using serverless functions.                                                                                             |\n| [Miniflux](aws-ts-pulumi-miniflux)                                          | Stand up an RSS Service using Fargate and RDS.                                                                                                             |\n| [Pulumi Webhooks](aws-ts-pulumi-webhooks)                                   | Create a Pulumi `cloud.HttpEndpoint` that receives webhook events delivered by the Pulumi Service, then echos the event to Slack.                          |\n| [RDS and Airflow](aws-ts-airflow)                                           | Deploy a RDS Postgres instance and containerized Airflow.                                                                                                  |\n| [Resources](aws-ts-resources)                                               | Create various resources, including `cloudwatch.Dashboard`, `cloudwatch.EventRule`, `cloudwatch.LogGroup`, and `sqs.Queue`.                                |\n| [Ruby on Rails](aws-ts-ruby-on-rails)                                       | Create a single EC2 virtual machine instance with a local MySQL database.                                                                                  |\n| [S3 Lambda](aws-ts-s3-lambda-copyzip)                                       | Set up two AWS S3 Buckets and a single Lambda that listens to one and, upon each new object arriving in it, zips it up and copies it to the second bucket. |\n| [Serverless Application](aws-ts-serverless-raw)                             | Deploy a complete serverless C# application using raw resources from `@pulumi/aws`.                                                                        |\n| [Serverless Datawarehouse](aws-ts-serverless-datawarehouse)                 | Deploy a serverless data warehouse.                                                                                                                        |\n| [Slackbot](aws-ts-slackbot)                                                 | Create a simple slackbot that posts a notification to a specific channel any time you're @mentioned anywhere.                                              |\n| [Stack Reference](aws-ts-stackreference)                                    | Create a \"team\" EC2 Instance with tags set from upstream stacks.                                                                                           |\n| [Static Website](aws-ts-static-website)                                     | Serve a static website using S3, CloudFront, Route53, and Certificate Manager.                                                                             |\n| [Step Functions](aws-ts-stepfunctions)                                      | Use Step Functions with a Lambda function.                                                                                                                 |\n| [Thumbnailer](aws-ts-thumbnailer)                                           | Create a video thumbnail extractor using serverless functions and containers.                                                                              |\n| [Twitter](aws-ts-twitter-athena)                                            | Query Twitter every 2 minutes, store the results in S3, and set up an Athena table and query.                                                              |\n| [URL Shortener](aws-ts-url-shortener-cache-http)                            | Create a serverless URL shortener that uses high-level components.                                                                                         |\n| [Voting App](aws-ts-voting-app)                                             | Create a simple voting app using Redis and Python Flask.                                                                                                   |\n| [Web Server with Manual Provisioning](aws-ts-ec2-provisioners)              | Use Pulumi dynamic providers to accomplish post-provisioning configuration steps.                                                                          |\n\n### JavaScript\n\n| Example                                              | Description                                                                      |\n| ---------------------------------------------------- | -------------------------------------------------------------------------------- |\n| [Containers](aws-js-containers)                      | Provision containers on Fargate.                                                 |\n| [S3 Folder Component](aws-js-s3-folder-component)    | Serve a static website on S3 from a component.                                   |\n| [S3 Folder](aws-js-s3-folder)                        | Serve a static website on S3.                                                    |\n| [Servless SQS to Slack](aws-js-sqs-slack)            | Wire up a serverless AWS Lambda to an AWS SQS queue and post a message to Slack. |\n| [Web Server - Component](aws-js-webserver-component) | Deploy an EC2 instance using a common module for creating an instance.           |\n| [Web Server](aws-js-webserver)                       | Deploy an EC2 Virtual machine running a Python web server.                       |\n\n### Python\n\n| Example                                                                     | Description                                                                                                                 |\n| --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |\n| [API Gateway HTTP API quickstart](aws-py-apigatewayv2-http-api-quickcreate) | Deploy a very simple HTTP API that invokes a lambda.                                                                        |\n| [AppSync](aws-py-appsync)                                                   | Deploy a basic GraphQL endpoint in AWS AppSync.                                                                             |\n| [AssumeRole](aws-py-assume-role)                                            | Use AssumeRole to create resources.                                                                                         |\n| [Fargate](aws-py-fargate)                                                   | Provision a full ECS Fargate cluster running a load-balanced nginx web server.                                              |\n| [Resources](aws-py-resources)                                               | Create various resources, including `cloudwatch.Dashboard`, `cloudwatch.EventRule`, `cloudwatch.LogGroup`, and `sqs.Queue`. |\n| [S3 Folder](aws-py-s3-folder)                                               | Serve a static website on S3.                                                                                               |\n| [Stack Reference](aws-py-stackreference)                                    | Create a \"team\" EC2 Instance with tags set from upstream stacks.                                                            |\n| [Step Functions](aws-py-stepfunctions)                                      | Use Step Functions with a Lambda function.                                                                                  |\n| [Web Server](aws-py-webserver)                                              | Deploy an EC2 instance and open port 80.                                                                                    |\n\n### Go\n\n| Example                          | Description                                                                      |\n| -------------------------------- | -------------------------------------------------------------------------------- |\n| [AssumeRole](aws-go-assume-role) | Use AssumeRole to create resources.                                              |\n| [Fargate](aws-go-fargate)        | Provision a full ECS Fargate cluster running a load-balanced nginx web server.   |\n| [Lambda](aws-go-lambda)          | Create a lambda that does a simple `ToUpper` on the string input and returns it. |\n| [S3 Folder](aws-go-s3-folder)    | Serve a static website on S3.                                                    |\n| [Web Server](aws-go-webserver)   | Deploy an EC2 Virtual machine running a Python web server.                       |\n\n### C#\n\n| Example                          | Description                                                                      |\n| -------------------------------- | -------------------------------------------------------------------------------- |\n| [AssumeRole](aws-cs-assume-role) | Use AssumeRole to create resources.                                              |\n| [Fargate](aws-cs-fargate)        | Build, deploy, and run a Dockerized app using ECS, ECR, and Fargate.             |\n| [Lambda](aws-cs-lambda)          | Create a lambda that does a simple `ToUpper` on the string input and returns it. |\n| [S3 Folder](aws-cs-s3-folder)    | Serve a static website on S3.                                                    |\n| [Web Server](aws-cs-webserver)   | Deploy an EC2 instance and open port 80.                                         |\n\n### F#\n\n| Example                                      | Description                                                     |\n| -------------------------------------------- | --------------------------------------------------------------- |\n| [Lambda Web Server](aws-fs-lambda-webserver) | Create a web server in AWS lambda using the Giraffe web server. |\n| [S3 Folder](aws-fs-s3-folder)                | Serve a static website on S3.                                   |\n\n## Azure\n\n### TypeScript\n\n| Example                                                                          | Description                                                                                                    |\n| -------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n| [Azure Container Instance](azure-ts-aci)                                         | Run Azure Container Instances on Linux.                                                                        |\n| [Azure Kubernetes Service](azure-ts-aks)                                         | Create an Azure Kubernetes Service (AKS) Cluster.                                                              |\n| [Azure App Service](azure-ts-appservice)                                         | Build a web application hosted in App Service and provision Azure SQL Database and Azure Application Insights. |\n| [Azure App Service with Docker](azure-ts-appservice-docker)                      | Build a web application hosted in App Service from Docker images.                                              |\n| [App Service in Virtual Network](azure-ts-webapp-privateendpoint-vnet-injection) | Deploy two App Services - Front web app with VNet injection and Back web app with a Private Endpoint.          |\n| [Azure Cosmos DB and LogicApp](azure-ts-cosmosdb-logicapp)                       | Define Cosmos DB, API connections, and link them to a logic app.                                               |\n| [Azure Functions](azure-ts-functions)                                            | Deploy a Node.js serverless function to Azure Functions.                                                       |\n| [Azure Functions - Many](azure-ts-functions-many)                                | Deploy several kinds of Azure Functions created from raw deployment packages.                                  |\n| [Static Website](azure-ts-static-website)                                        | Configure static website hosting in Azure Storage.                                                             |\n| [Azure Synapse](azure-ts-synapse)                                                | Starting point for enterprise analytics solutions based on Azure Synapse.                                      |\n| [Web Server](azure-ts-webserver)                                                 | Provision a Linux web server in an Azure Virtual Machine.                                                      |\n\n### Python\n\n| Example                                                     | Description                                                                                                                                                                  |\n| ----------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Azure Container Instance](azure-py-aci)                    | Run Azure Container Instances on Linux.                                                                                                                                      |\n| [Azure Kubernetes Service](azure-py-aks)                    | Create an Azure Kubernetes Service (AKS) Cluster.                                                                                                                            |\n| [Azure App Service](azure-py-appservice)                    | Build a web application hosted in App Service and provision Azure SQL Database and Azure Application Insights.                                                               |\n| [Azure App Service with Docker](azure-py-appservice-docker) | Build a web application hosted in App Service from Docker images.                                                                                                            |\n| [Azure Cosmos DB and LogicApp](azure-py-cosmosdb-logicapp)  | Define Cosmos DB, API connections, and link them to a logic app.                                                                                                             |\n| [Minecraft Server](azure-py-minecraft-server)               | Deploy an Azure Virtual Machine and provision a Minecraft server.                                                                                                            |\n| [Static Website](azure-py-static-website)                   | Configure static website hosting in Azure Storage.                                                                                                                           |\n| [Azure Synapse](azure-py-synapse)                           | Starting point for enterprise analytics solutions based on Azure Synapse.                                                                                                    |\n| [Virtual Data Center](azure-py-virtual-data-center)         | Deploy Azure Virtual Data Center (VDC) hub-and-spoke network stacks in Azure, complete with ExpressRoute and VPN Gateways, Azure Firewall guarding a DMZ, and Azure Bastion. |\n| [Web Server](azure-py-webserver)                            | Provision a Linux web server in an Azure Virtual Machine.                                                                                                                    |\n\n### Go\n\n| Example                                                     | Description                                                       |\n| ----------------------------------------------------------- | ----------------------------------------------------------------- |\n| [Azure Container Instance](azure-go-aci)                    | Run Azure Container Instances on Linux.                           |\n| [Azure Kubernetes Service](azure-go-aks)                    | Create an Azure Kubernetes Service (AKS) Cluster.                 |\n| [Azure App Service with Docker](azure-go-appservice-docker) | Build a web application hosted in App Service from Docker images. |\n| [Static Website](azure-go-static-website)                   | Configure static website hosting in Azure Storage.                |\n\n### C#\n\n| Example | Description |\n| ------- | ----------- |\n\nCluster.\n[Azure Container Instance](azure-cs-aci) | Run Azure Container Instances on Linux.\n[Azure Kubernetes Service](azure-cs-aks) | Create an Azure Kubernetes Service (AKS) Cluster.\n[AKS web app with .NET 5](azure-cs-net5-aks-webapp) | Create an Azure Kubernetes Service (AKS) cluster and deploy a web app to it using .NET 5 and C# 9.\n[Azure App Service](azure-cs-appservice) | Build a web application hosted in App Service and provision Azure SQL Database and Azure Application Insights.\n[Azure App Service with Docker](azure-cs-appservice-docker) | Build a web application hosted in App Service from Docker images.\n[Azure Cosmos DB and LogicApp](azure-cs-cosmosdb-logicapp) | Define Cosmos DB, API connections, and link them to a logic app.\n[Azure Functions](azure-cs-functions) | Deploy a Node.js serverless function to Azure Functions.\n[Static Website](azure-cs-static-website) | Configure static website hosting in Azure Storage.\n[Azure Synapse](azure-cs-synapse) | Starting point for enterprise analytics solutions based on Azure Synapse.\n\n## GCP\n\n### TypeScript\n\n| Example                                              | Description                                                                                                   |\n| ---------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| [Cloud Run](gcp-ts-cloudrun)                         | Deploy a custom Docker image into Google Cloud Run service.                                                   |\n| [Functions - Raw](gcp-ts-serverless-raw)             | Deploy two Google Cloud Functions implemented in Python and Go.                                               |\n| [Functions](gcp-ts-functions)                        | Deploy an HTTP Google Cloud Function endpoint.                                                                |\n| [GKE - Hello World](gcp-ts-gke-hello-world)          | Deploy a GKE cluster, then a Kubernetes namespace and nginx deployment into the cluster.                      |\n| [GKE](gcp-ts-gke)                                    | Provision a Google Kubernetes Engine (GKE) cluster, then a Kubernetes Deployment.                             |\n| [Ruby on Rails](gcp-ts-k8s-ruby-on-rails-postgresql) | Deliver a containerized Ruby on Rails application.                                                            |\n| [Slackbot](gcp-ts-slackbot)                          | Create a simple slackbot that posts a notification to a specific channel any time you're @mentioned anywhere. |\n\n### JavaScript\n\n| Example                        | Description                         |\n| ------------------------------ | ----------------------------------- |\n| [Web Server](gcp-js-webserver) | Build a web server in Google Cloud. |\n\n### Python\n\n| Example                                       | Description                                                                       |\n| --------------------------------------------- | --------------------------------------------------------------------------------- |\n| [Functions - Raw](gcp-py-serverless-raw)      | Deploy two Google Cloud Functions implemented in Python and Go.                   |\n| [Functions](gcp-py-functions)                 | Deploy a Python-based Google Cloud Function.                                      |\n| [GKE](gcp-py-gke)                             | Provision a Google Kubernetes Engine (GKE) cluster, then a Kubernetes Deployment. |\n| [Network Component](gcp-py-network-component) | Use a reusable component to create a Google Cloud Network and instance.           |\n| [nginx Server](gcp-py-instance-nginx)         | Build a nginx server in Google Cloud.                                             |\n\n### Go\n\n| Example                                  | Description                                           |\n| ---------------------------------------- | ----------------------------------------------------- |\n| [Functions](gcp-go-functions)            | Deploy a Go-based Google Cloud Function.              |\n| [Functions - Raw](gcp-py-serverless-raw) | Deploy a Google Cloud Function implemented in Python. |\n| [Web Server](gcp-go-webserver)           | Build a web server in Google Cloud.                   |\n\n### C#\n\n| Example                                  | Description                                           |\n| ---------------------------------------- | ----------------------------------------------------- |\n| [Functions - Raw](gcp-py-serverless-raw) | Deploy a Google Cloud Function implemented in Python. |\n| [Functions](gcp-go-functions)            | Deploy a Go-based Google Cloud Function.              |\n\n## Kubernetes\n\n### TypeScript\n\n| Example                                                            | Description                                                                                                           |\n| ------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |\n| [App Rollout via ConfigMap](kubernetes-ts-configmap-rollout)       | Enable a change in a ConfigMap to trigger a rollout of an nginx Deployment.                                           |\n| [App Rollout via S3 Data Change](kubernetes-ts-s3-rollout)         | Enable a change in data in S3 to trigger a rollout of an nginx deployment.                                            |\n| [Expose Deployment](kubernetes-ts-exposed-deployment)              | Deploy nginx to a Kubernetes cluster, and publicly explose it using a Kubernetes Service.                             |\n| [Guestbook](kubernetes-ts-guestbook)                               | Build and deploy a simple, multi-tier web application using Kubernetes and Docker.                                    |\n| [Jenkins](kubernetes-ts-jenkins)                                   | Deploy a container running the Jenkins continuous integration system onto a running Kubernetes cluster.               |\n| [Multicloud](kubernetes-ts-multicloud)                             | Create managed Kubernetes clusters using AKS, EKS, and GKE, and deploy the application on each cluster.               |\n| [nginx server](kubernetes-ts-nginx)                                | Deploy a replicated nginx server to a Kubernetes cluster, using TypeScript and no YAML.                               |\n| [Sock Shop](kubernetes-ts-sock-shop)                               | Deploy a version of the standard Sock Shop microservices reference app.                                               |\n| [Staged App Rollout](kubernetes-ts-staged-rollout-with-prometheus) | Create a staged rollout gated by checking that the P90 response time reported by Prometheus is less than some amount. |\n| [Wordpress Helm Chart](kubernetes-ts-helm-wordpress)               | Use the Helm API to deploy v2.1.3 of the Wordpress Helm Chart to a Kubernetes cluster.                                |\n\n### Python\n\n| Example                              | Description                                                                        |\n| ------------------------------------ | ---------------------------------------------------------------------------------- |\n| [Guestbook](kubernetes-py-guestbook) | Build and deploy a simple, multi-tier web application using Kubernetes and Docker. |\n\n### C#\n\n| Example                              | Description                                                                        |\n| ------------------------------------ | ---------------------------------------------------------------------------------- |\n| [Guestbook](kubernetes-cs-guestbook) | Build and deploy a simple, multi-tier web application using Kubernetes and Docker. |\n\n### Go\n\n| Example                              | Description                                                                        |\n| ------------------------------------ | ---------------------------------------------------------------------------------- |\n| [Guestbook](kubernetes-go-guestbook) | Build and deploy a simple, multi-tier web application using Kubernetes and Docker. |\n\n## Cloud\n\n### TypeScript\n\n| Example                                                                   | Description                                                                                                               |\n| ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| [URL Shortener - Cache and HttpServer](cloud-ts-url-shortener-cache-http) | Create a simple URL shortener SPA that uses the high-level `cloud.Table` and `cloud.HttpServer` components.               |\n| [URL Shortener - Cache](cloud-ts-url-shortener-cache)                     | Create a simple URL shortener SPA that uses the high-level `cloud.Table` and `cloud.API` components.                      |\n| [URL Shortener](cloud-ts-url-shortener)                                   | Create a complete URL shortener web application that uses the high-level `cloud.Table` and `cloud.HttpServer` components. |\n| [Voting App](cloud-ts-voting-app)                                         | Create a simple voting app using Redis and Python Flask.                                                                  |\n\n### JavaScript\n\n| Example                                                                 | Description                                                                                     |\n| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |\n| [API on AWS](cloud-js-api)                                              | Create a simple REST API that counts the number of times a route has been hit.                  |\n| [Containers](cloud-js-containers)                                       | Provision containers on Fargate.                                                                |\n| [HttpServer](cloud-js-httpserver)                                       | Create a simple REST API that counts the number of times a route has been hit.                  |\n| [Thumbnailer - Machine Learning](cloud-js-thumbnailer-machine-learning) | Create a video thumbnail extractor using serverless functions, containers, and AWS Rekognition. |\n| [Thumbnailer](cloud-js-thumbnailer)                                     | Create a video thumbnail extractor using serverless functions and containers.                   |\n| [Twitter](cloud-js-twitter-athena)                                      | Query Twitter every 2 minutes, store the results in S3, and set up an Athena table and query.   |\n\n## DigitalOcean\n\n### TypeScript\n\n| Example                                           | Description                                  |\n| ------------------------------------------------- | -------------------------------------------- |\n| [Droplets](digitalocean-ts-loadbalanced-droplets) | Build sample architecture.                   |\n| [Kubernetes](digitalocean-ts-k8s)                 | Provision a DigitalOcean Kubernetes cluster. |\n\n### Python\n\n| Example                                           | Description                                  |\n| ------------------------------------------------- | -------------------------------------------- |\n| [Droplets](digitalocean-py-loadbalanced-droplets) | Build sample architecture.                   |\n| [Kubernetes](digitalocean-py-k8s)                 | Provision a DigitalOcean Kubernetes cluster. |\n\n### C#\n\n| Example                                           | Description                                  |\n| ------------------------------------------------- | -------------------------------------------- |\n| [Droplets](digitalocean-cs-loadbalanced-droplets) | Build sample architecture.                   |\n| [Kubernetes](digitalocean-cs-k8s)                 | Provision a DigitalOcean Kubernetes cluster. |\n\n## Multicloud\n\n### TypeScript\n\n| Example                          | Description                                                             |\n| -------------------------------- | ----------------------------------------------------------------------- |\n| [Buckets](multicloud-ts-buckets) | Use a single Pulumi program to provision resources in both AWS and GCP. |\n\n## F5\n\n### TypeScript\n\n| Example                                            | Description                                                                 |\n| -------------------------------------------------- | --------------------------------------------------------------------------- |\n| [BigIP Local Traffic Manager](f5bigip-ts-ltm-pool) | Provide load balancing via an F5 BigIP appliance to backend HTTP instances. |\n\n## Twilio\n\n### TypeScript\n\n| Example                          | Description                                                                |\n| -------------------------------- | -------------------------------------------------------------------------- |\n| [Component](twilio-ts-component) | Create a custom Component Resource to parse incoming messages from Twilio. |\n\n## Linode\n\n### JavaScript\n\n| Example                           | Description                   |\n| --------------------------------- | ----------------------------- |\n| [Web Server](linode-js-webserver) | Build a web server on Linode. |\n\n## Packet\n\n### TypeScript\n\n| Example                           | Description                       |\n| --------------------------------- | --------------------------------- |\n| [Web Server](packet-ts-webserver) | Build a web server on Packet.net. |\n\n### Python\n\n| Example                           | Description                       |\n| --------------------------------- | --------------------------------- |\n| [Web Server](packet-py-webserver) | Build a web server on Packet.net. |\n\n## Testing\n\n| Example                                          | Description                                  |\n| ------------------------------------------------ | -------------------------------------------- |\n| [Unit Tests in TypeScript](testing-unit-ts)      | Mock-based unit tests in TypeScript.         |\n| [Unit Tests in Python](testing-unit-py)          | Mock-based unit tests in Python.             |\n| [Unit Tests in Go](testing-unit-go)              | Mock-based unit tests in Go.                 |\n| [Unit Tests in C#](testing-unit-cs)              | Mock-based unit tests in C#.                 |\n| [Testing with Policies](testing-pac-ts)          | Tests based on Policy-as-Code in TypeScript. |\n| [Integration Testing in Go](testing-integration) | Deploy-check-destroy tests in Go.            |\n\n","url":"https://pulumi.dendron.so/notes/readme.html","relUrl":"notes/readme.html"},{"doc":"Policy Packs","title":"Policy Packs","hpath":"policy-packs","content":"\n","url":"https://pulumi.dendron.so/notes/53243e2a-5638-416d-a866-ea6d42f9937b.html","relUrl":"notes/53243e2a-5638-416d-a866-ea6d42f9937b.html"},{"doc":"Kubernetes Ts","title":"Kubernetes Ts","hpath":"policy-packs.kubernetes-ts","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.kubernetes-ts.html","relUrl":"notes/policy-packs.kubernetes-ts.html"},{"doc":"Kubernetes Python","title":"Kubernetes Python","hpath":"policy-packs.kubernetes-python","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.kubernetes-python.html","relUrl":"notes/policy-packs.kubernetes-python.html"},{"doc":"Gcp Ts","title":"Gcp Ts","hpath":"policy-packs.gcp-ts","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.gcp-ts.html","relUrl":"notes/policy-packs.gcp-ts.html"},{"doc":"Gcp Python","title":"Gcp Python","hpath":"policy-packs.gcp-python","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.gcp-python.html","relUrl":"notes/policy-packs.gcp-python.html"},{"doc":"Azure Ts","title":"Azure Ts","hpath":"policy-packs.azure-ts","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.azure-ts.html","relUrl":"notes/policy-packs.azure-ts.html"},{"doc":"Azure Python","title":"Azure Python","hpath":"policy-packs.azure-python","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.azure-python.html","relUrl":"notes/policy-packs.azure-python.html"},{"doc":"Aws Ts","title":"Aws Ts","hpath":"policy-packs.aws-ts","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.aws-ts.html","relUrl":"notes/policy-packs.aws-ts.html"},{"doc":"Aws Ts Advanced","title":"Aws Ts Advanced","hpath":"policy-packs.aws-ts-advanced","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [compute.ts](/assets/compute.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.aws-ts-advanced.html","relUrl":"notes/policy-packs.aws-ts-advanced.html"},{"doc":"Aws Python","title":"Aws Python","hpath":"policy-packs.aws-python","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/policy-packs.aws-python.html","relUrl":"notes/policy-packs.aws-python.html"},{"doc":"Packet Ts Webserver","title":"Packet Ts Webserver","hpath":"packet-ts-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Packet Webserver\n\nThis example demonstrates creating a webserver in Packet.net\n\n# Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Install all of the dependencies for the application:\n\n   ```bash\n   $ npm install\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions the webserver:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your webserver will be ready.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + ip  : \"147.75.65.213\"\n     + name: \"new-vervet\"\n   ```\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/packet-ts-webserver.html","relUrl":"notes/packet-ts-webserver.html"},{"doc":"Packet Py Webserver","title":"Packet Py Webserver","hpath":"packet-py-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Packet Webserver\n\nThis example demonstrates creating a webserver in Packet.net with Python\n\n# Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Install all of the dependencies for the application:\n\n3. Deploy everything with the `pulumi up` command. This provisions the webserver:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your webserver will be ready.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + ip  : \"147.75.65.213\"\n     + name: \"new-vervet\"\n   ```\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/packet-py-webserver.html","relUrl":"notes/packet-py-webserver.html"},{"doc":"Multicloud Ts Buckets","title":"Multicloud Ts Buckets","hpath":"multicloud-ts-buckets","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS and GCP Resources\n\nThis example uses a single Pulumi program to provision resources in both AWS and GCP. It was\nprepared by starting with the `aws-typescript` template, and then installing the `@pulumi/gcp`\npackage from NPM.\n\n## Getting Started\n\nInstall prerequisites with:\n\n```shell\n$ npm install\n```\n\nCreate a new stack:\n\n```shell\n$ pulumi stack init multicloud-aws-gcp\n```\n\nConfigure the Pulumi program with the AWS region in which to deploy, and the GCP project ID:\n\n```shell\n$ pulumi config set aws:region us-east-1\n$ pulumi config set gcp:project my-project-id\n```\n\nRun the program with `pulumi up`, with ambient AWS and GCP credentials available. The preview shows\nresources will be created in both clouds. Confirm the update, and resources are created in each\ncloud. The outputs show the name of the AWS and GCP buckets respectively.\n\n```shell\n$ pulumi up\nPreviewing update (multicloud-ts-buckets-dev):\n\n     Type                   Name                                             Plan\n +   pulumi:pulumi:Stack    multicloud-ts-buckets-multicloud-ts-buckets-dev  create\n +   ├─ gcp:storage:Bucket  my-bucket                                        create\n +   └─ aws:s3:Bucket       my-bucket                                        create\n\nResources:\n    3 changes\n    + 3 to create\n\nDo you want to perform this update? yes\nUpdating (multicloud-ts-buckets-dev):\n\n     Type                   Name                                             Status\n +   pulumi:pulumi:Stack    multicloud-ts-buckets-multicloud-ts-buckets-dev  created\n +   ├─ gcp:storage:Bucket  my-bucket                                        created\n +   └─ aws:s3:Bucket       my-bucket                                        created\n\nOutputs:\n    bucketNames: [\n        [0]: \"my-bucket-c819937\"\n        [1]: \"my-bucket-f722eb9\"\n    ]\n\nResources:\n    3 changes\n    + 3 created\n\nDuration: 21.713128552s\n\nPermalink: https://app.pulumi.com/jen20/multicloud-ts-buckets-dev\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/multicloud-ts-buckets.html","relUrl":"notes/multicloud-ts-buckets.html"},{"doc":"Misc","title":"Misc","hpath":"misc","content":"\n","url":"https://pulumi.dendron.so/notes/d29a4155-c6e8-45bb-b6ff-0dd08f74090a.html","relUrl":"notes/d29a4155-c6e8-45bb-b6ff-0dd08f74090a.html"},{"doc":"Test","title":"Test","hpath":"misc.test","content":"## Imported Assets\n\n- [aws_test.go](/assets/aws_test.go)\n- [azure_test.go](/assets/azure_test.go)\n- [cloud_test.go](/assets/cloud_test.go)\n- [digitalocean_test.go](/assets/digitalocean_test.go)\n- [equinix_metal_test.go](/assets/equinix_metal_test.go)\n- [examples_test.go](/assets/examples_test.go)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [google_test.go](/assets/google_test.go)\n- [kubernetes_test.go](/assets/kubernetes_test.go)\n\n","url":"https://pulumi.dendron.so/notes/misc.test.html","relUrl":"notes/misc.test.html"},{"doc":"Scripts","title":"Scripts","hpath":"misc.scripts","content":"## Imported Assets\n\n- [create-ci-cluster.sh](/assets/create-ci-cluster.sh)\n- [destroy-ci-cluster.sh](/assets/destroy-ci-cluster.sh)\n\n","url":"https://pulumi.dendron.so/notes/misc.scripts.html","relUrl":"notes/misc.scripts.html"},{"doc":"Testinfra","title":"Testinfra","hpath":"misc.scripts.testinfra","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [config.ts](/assets/config.ts)\n- [gke.ts](/assets/gke.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/misc.scripts.testinfra.html","relUrl":"notes/misc.scripts.testinfra.html"},{"doc":"Linode JS Webserver","title":"Linode JS Webserver","hpath":"linode-js-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server on Linode\n\nStarting point for building a Pulumi sample webserver on Linode.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init webserver-linode-testing\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set --secret linode:token YOURLINODETOKEN\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (webserver-linode-testing):\n   ...\n\n   Updating (webserver-linode-testing):\n\n       Type                         Name                                        Status\n   +   pulumi:pulumi:Stack          webserver-linode-webserver-linode-testing   created\n   +   ├─ linode:index:StackScript  simple-server                               created\n   +   └─ linode:index:Instance     instance                                    created\n\n   Outputs:\n       instanceIP   : \"69.164.221.90\"\n       instanceLabel: \"linode13879908\"\n\n   Resources:\n       + 3 created\n\n   Duration: 55s\n   ```\n\n5. Curl the HTTP server:\n\n   ```\n   $ curl $(pulumi stack output instanceIP)\n   Hello, World!\n   ```\n\n6. SSH into the server:\n\n   ```\n   $ linode-cli ssh root@$(pulumi stack output instanceLabel)\n   Warning: Permanently added '69.164.221.90' (ECDSA) to the list of known hosts.\n   Linux li136-90 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1 (2019-04-12) x86_64\n\n   The programs included with the Debian GNU/Linux system are free software;\n   the exact distribution terms for each program are described in the\n   individual files in /usr/share/doc/*/copyright.\n\n   Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n   permitted by applicable law.\n   root@li136-90:~#\n   ```\n\n7. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/linode-js-webserver.html","relUrl":"notes/linode-js-webserver.html"},{"doc":"Kubernetes Ts Staged Rollout with Prometheus","title":"Kubernetes Ts Staged Rollout with Prometheus","hpath":"kubernetes-ts-staged-rollout-with-prometheus","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Staged App Rollout Gated by Prometheus Checks\n\nDemonstrates how to create a staged rollout (from 3-replica canary -> 10-replica staging), gated by\nchecking that the P90 response time reported by Prometheus is less than some amount. We first deploy\n[Prometheus][p8s] using a [Helm][helm] Chart, then deploy a Prometheus-instrumented application\nusing two `Deployment` objects, with a gated check between them.\n\nThe relevant gating code in `index.ts` looks like this:\n\n```typescript\n// Canary ring. Replicate instrumented Pod 3 times.\nconst canary = new k8s.apps.v1beta1.Deployment(\n    \"canary-example-app\",\n    { spec: { replicas: 1, template: instrumentedPod } },\n    { dependsOn: p8sDeployment }\n);\n\n// Staging ring. Replicate instrumented Pod 10 times.\nconst staging = new k8s.apps.v1beta1.Deployment(\"staging-example-app\", {\n    metadata: {\n        annotations: {\n            // Check P90 latency is < 100,000 microseconds. Returns a `Promise<string>` with the P90\n            // response time. It must resolve correctly before this deployment rolls out. In\n            // general any `Promise<T>` could go here.\n            \"example.com/p90ResponseTime\": util.checkHttpLatency(canary, containerName, {\n                durationSeconds: 60,\n                quantile: 0.9,\n                thresholdMicroseconds: 100000,\n                prometheusEndpoint: `localhost:${localPort}`,\n                forwarderHandle: forwarderHandle\n            })\n        }\n    },\n    spec: { replicas: 1, template: instrumentedPod }\n});\n```\n\nWhen the program is run, it will look something like the following (although this is sped up by 8x).\nThe majority of the time is taken up by deploying Prometheus. Towards the end, at the bottom, you\ncan see `canary-example-app` and `canary-staging-app` created.\n\n![gatedDeployment](images/gatedDeployment.gif \"Deployment gated by Prometheus check\")\n\n## Running the App\n\n1. If you haven't already, follow the steps in [Pulumi Installation and Setup][install] and\n   [Configuring Pulumi Kubernetes][configuration] to get setup with Pulumi and Kubernetes.\n\n2. Now, install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n3. Create a new stack:\n\n   ```sh\n   $ pulumi stack init\n   Enter a stack name: staged-rollout\n   ```\n\n4. **IMPORTANT NOTE:** The code in `index.ts` is meant to be run out-of-cluster (_e.g._, on your\n   local machine). It will thus call `kubectl port-forward` on your behalf so that the Prometheus\n   service is forwarded to your local machine, which allows this program to poll for metrics. **If\n   you are running Pulumi in-cluster, you can comment out this part of the example.**\n\n5. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n   Updating stack 'staged-rollout'\n   Performing changes:\n\n        Type                           Name                 Status      Info\n    +   pulumi:pulumi:Stack                                            prometheus-staged-rollout\n    +   ├─ kubernetes:helm.sh:Chart                                    p8s                                created\n    +   │  ├─ kubernetes:core:ServiceAccount                           p8s-prometheus-alertmanager        created\n    +   │  ├─ kubernetes:core:ServiceAccount                           p8s-prometheus-pushgateway         created\n    +   │  ├─ kubernetes:core:ServiceAccount                           p8s-prometheus-kube-state-metrics  created\n    +   │  ├─ kubernetes:core:ServiceAccount                           p8s-prometheus-server              created\n    +   │  ├─ kubernetes:core:ServiceAccount                           p8s-prometheus-node-exporter       created\n    +   │  ├─ kubernetes:core:ConfigMap                                p8s-prometheus-alertmanager        created\n    +   │  ├─ kubernetes:rbac.authorization.k8s.io:ClusterRoleBinding  p8s-prometheus-server              created\n    +   │  ├─ kubernetes:core:PersistentVolumeClaim                    p8s-prometheus-server              created\n    +   │  ├─ kubernetes:rbac.authorization.k8s.io:ClusterRoleBinding  p8s-prometheus-kube-state-metrics  created\n    +   │  ├─ kubernetes:core:ConfigMap                                p8s-prometheus-server              created\n    +   │  ├─ kubernetes:core:PersistentVolumeClaim                    p8s-prometheus-alertmanager        created\n    +   │  ├─ kubernetes:core:Service                                  p8s-prometheus-alertmanager        created\n    +   │  ├─ kubernetes:core:Service                                  p8s-prometheus-kube-state-metrics  created\n    +   │  ├─ kubernetes:core:Service                                  p8s-prometheus-pushgateway         created\n    +   │  ├─ kubernetes:core:Service                                  p8s-prometheus-node-exporter       created\n    +   │  ├─ kubernetes:extensions:Deployment                         p8s-prometheus-kube-state-metrics  created\n    +   │  ├─ kubernetes:core:Service                                  p8s-prometheus-server              created\n    +   │  ├─ kubernetes:extensions:Deployment                         p8s-prometheus-pushgateway         created\n    +   │  ├─ kubernetes:rbac.authorization.k8s.io:ClusterRole         p8s-prometheus-kube-state-metrics  created\n    +   │  ├─ kubernetes:extensions:DaemonSet                          p8s-prometheus-node-exporter       created\n    +   │  ├─ kubernetes:extensions:Deployment                         p8s-prometheus-alertmanager        created\n    +   │  ├─ kubernetes:extensions:Deployment                         p8s-prometheus-server              created\n    +   │  └─ kubernetes:rbac.authorization.k8s.io:ClusterRole         p8s-prometheus-server              created\n    +   ├─ kubernetes:apps:Deployment                                  canary-example-app                 created\n    +   └─ kubernetes:apps:Deployment                                  staging-example-app                created\n\n   Diagnostics:\n     pulumi:pulumi:Stack: prometheus-test-p8s\n       info: Checking HTTP metrics\n\n       ---outputs:---\n     + p90ResponseTime: \"8221.236\"\n\n   info: 2 changes performed:\n       + 2 resources created\n         26 resources unchanged\n   Update duration: 7.362744393s\n\n   Permalink: https://app.pulumi.com/hausdorff/test-p8s/updates/1\n   ```\n\n   One useful sidenote, we can see here in the `---outputs:---` section that the `p90ResponseTime`\n   that was computed by the promise is `export`ed, which causes Pulumi to report its value just\n   before it terminates.\n\n[install]: https://www.pulumi.com/docs/get-started/install/\n\n[configuration]: https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/\n\n[p8s]: https://prometheus.io/\n\n[helm]: https://www.helm.sh/\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [util.ts](/assets/util.ts)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-staged-rollout-with-prometheus.html","relUrl":"notes/kubernetes-ts-staged-rollout-with-prometheus.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-staged-rollout-with-prometheus.images","content":"## Imported Assets\n\n- [deploy.cast](/assets/deploy.cast)\n- [gatedDeployment.gif](/assets/gateddeployment.gif)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-staged-rollout-with-prometheus.images.html","relUrl":"notes/kubernetes-ts-staged-rollout-with-prometheus.images.html"},{"doc":"Kubernetes Ts Sock Shop","title":"Kubernetes Ts Sock Shop","hpath":"kubernetes-ts-sock-shop","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Sock Shop Pulumi Demo\n\nA version of the standard [Sock Shop microservices reference app](https://github.com/microservices-demo/microservices-demo) app using\nPulumi and `@pulumi/kubernetes`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get setup with Pulumi and Kubernetes.\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testing\n```\n\nPreview the deployment of the application:\n\n```sh\n$ pulumi preview\nPreviewing update of stack 'testing'\nPreviewing changes:\n\n     Type                        Name               Plan       Info\n +   pulumi:pulumi:Stack         sock-shop-testing  create\n +   kubernetes:core:Service     carts-db           create\n +   kubernetes:core:Service     carts              create\n +   kubernetes:core:Service     catalog-db         create\n +   kubernetes:core:Service     catalog            create\n +   kubernetes:core:Service     orders-db          create\n +   kubernetes:core:Service     orders             create\n +   kubernetes:core:Service     payment            create\n +   kubernetes:core:Service     rabbitmq           create\n +   kubernetes:core:Service     shipping           create\n +   kubernetes:core:Service     user-db            create\n +   kubernetes:core:Service     user               create\n +   kubernetes:core:Service     front-end          create\n +   kubernetes:core:Service     queue-master       create\n +   kubernetes:apps:Deployment  queue-master       create\n +   kubernetes:apps:Deployment  catalog-db         create\n +   kubernetes:apps:Deployment  catalog            create\n +   kubernetes:apps:Deployment  payment            create\n +   kubernetes:apps:Deployment  rabbitmq           create\n +   kubernetes:apps:Deployment  front-end          create\n +   kubernetes:apps:Deployment  carts-db           create\n +   kubernetes:apps:Deployment  orders-db          create\n +   kubernetes:apps:Deployment  user-db            create\n +   kubernetes:apps:Deployment  user               create\n +   kubernetes:apps:Deployment  carts              create\n +   kubernetes:apps:Deployment  orders             create\n +   kubernetes:apps:Deployment  shipping           create\n\ninfo: 27 changes previewed:\n    + 27 resources to create\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'testing'\nPerforming changes:\n\n     Type                        Name          Status      Info\n +   kubernetes:core:Service     carts-db      created\n +   kubernetes:core:Service     carts         created\n +   kubernetes:core:Service     catalog-db    created\n +   kubernetes:core:Service     catalog       created\n +   kubernetes:core:Service     orders-db     created\n +   kubernetes:core:Service     orders        created\n +   kubernetes:core:Service     payment       created\n +   kubernetes:core:Service     rabbitmq      created\n +   kubernetes:core:Service     shipping      created\n +   kubernetes:core:Service     user-db       created\n +   kubernetes:core:Service     user          created\n +   kubernetes:core:Service     front-end     created\n +   kubernetes:core:Service     queue-master  created\n +   kubernetes:apps:Deployment  queue-master  created\n +   kubernetes:apps:Deployment  catalog-db    created\n +   kubernetes:apps:Deployment  catalog       created\n +   kubernetes:apps:Deployment  payment       created\n +   kubernetes:apps:Deployment  rabbitmq      created\n +   kubernetes:apps:Deployment  front-end     created\n +   kubernetes:apps:Deployment  carts-db      created\n +   kubernetes:apps:Deployment  orders-db     created\n +   kubernetes:apps:Deployment  user-db       created\n +   kubernetes:apps:Deployment  user          created\n +   kubernetes:apps:Deployment  carts         created\n +   kubernetes:apps:Deployment  orders        created\n +   kubernetes:apps:Deployment  shipping      created\n\ninfo: 27 changes performed:\n    + 27 resources created\nUpdate duration: 3m2.127835854s\n\nPermalink: https://pulumi.com/examples/testing/updates/1\n```\n\nThe application is now deployed.  Use `kubectl` to see the deployed services.\n\n```sh\n$ k get services -n sock-shop\nNAME           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\ncarts          10.47.242.164   <none>        80/TCP         4m\ncarts-db       10.47.245.60    <none>        27017/TCP      4m\ncatalogue      10.47.255.170   <none>        80/TCP         4m\ncatalogue-db   10.47.252.96    <none>        3306/TCP       4m\nfront-end      10.47.247.63    <nodes>       80:30001/TCP   4m\norders         10.47.255.197   <none>        80/TCP         4m\norders-db      10.47.242.209   <none>        27017/TCP      4m\npayment        10.47.254.192   <none>        80/TCP         4m\nqueue-master   10.47.251.206   <none>        80/TCP         4m\nrabbitmq       10.47.254.26    <none>        5672/TCP       4m\nshipping       10.47.247.218   <none>        80/TCP         4m\nuser-db        10.47.242.91    <none>        27017/TCP      4m\nuser           10.47.242.91    <none>        27017/TCP      4m\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-sock-shop.html","relUrl":"notes/kubernetes-ts-sock-shop.html"},{"doc":"Kubernetes Ts S3 Rollout","title":"Kubernetes Ts S3 Rollout","hpath":"kubernetes-ts-s3-rollout","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# App Rollout via Data Change in Amazon S3\n\nThis example is similar in principle to the [`ConfigMap`-based rollout example][rollout], except a\nrollout is triggered any time the data in S3 changes.\n\nLike the `ConfigMap`-based example, this one uses nginx to reverse-proxy traffic to\n`pulumi.github.io`. The nginx configuration is contained in the file `default.conf` in this\ndirectory; this program reads that file and puts it into an S3 bucket. Hence, changing data in that\nfile will cause register as a change in the S3 bucket's data, which will trigger a rollout of the\nnginx `Deployment`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and\n[Configuring Pulumi Kubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to\nget setup with Pulumi and Kubernetes.\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: s3-kube\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 's3-kube'\nPerforming changes:\n\n     Type                           Name                  Status      Info\n +   pulumi:pulumi:Stack            data-from-s3-s3-kube  created\n +   ├─ aws:s3:Bucket               nginx-configs         created\n +   ├─ aws:s3:BucketPolicy         bucketPolicy          created\n +   ├─ aws:s3:BucketObject         default.conf          created\n +   ├─ kubernetes:apps:Deployment  nginx                 created\n +   └─ kubernetes:core:Service     nginx                 created\n\n    ---outputs:---\n    defaultConfUrl: \"nginx-configs-4b9ea08.s3.amazonaws.com/default.conf\"\n    frontendIp    : \"35.224.120.207\"\n\ninfo: 6 changes performed:\n    + 6 resources created\nUpdate duration: 1m21.870672089s\n\nPermalink: https://app.pulumi.com/hausdorff/s3-kube/updates/1\n```\n\nWe can see here in the `---outputs:---` section that our proxy was allocated a public IP, in this\ncase `35.224.120.207\"`. It is exported with a stack output variable, `frontendIp`. We can use `curl`\nand `grep` to retrieve the `<title>` of the site the proxy points at.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp):80 | grep -C 1 \"<title>\"\n\n    <title>Pulumi. Serverless // Containers // Infrastructure // Cloud // DevOps</title>\n\n```\n\nNow, open `default.conf` and change `.node.server` and `.server.location.proxy_set_header` to point\nat `google.com`. If you're on macOS you can run `sed -i bak \"s/pulumi.github.io/google.com/g\"\ndefault.conf`\n\nThe result should look like this:\n\n```conf\nupstream node {\n  server google.com;\n}\nserver {\n  listen                  80;\n  server_name             _;\n  root                    /usr/share/nginx/html;\n  location / {\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header Host google.com;\n    proxy_pass http://node;\n    proxy_redirect off;\n    port_in_redirect off;\n  }\n}\n```\n\nRunning `preview` now shows that this change will cause us to replace the S3 bucket with a new one\ncontaining the new data, and subsequently trigger a rollout in the `Deployment`.\n\n> NOTE: This rollout is safe! Pulumi executes this plan with the following steps:\n>\n> 1. Create a new S3 bucket with a new name and the new data.\n> 2. Update the `PodTemplate` of the `Deployment` to point at the new S3 bucket. This update\n>    triggers the `Deployment` controller to try to roll out a new set of containers with mounts\n>    that contain this new data.\n> 3. Only once that succeeds, delete the old S3 bucket.\n\n```sh\nPreviewing update of stack 's3-kube'\n     Type                           Name                                     Status        Info\n *   pulumi:pulumi:Stack            configmap-rollout-configmap-rollout-dev  no change\n +-  ├─ kubernetes:core:ConfigMap   nginx                                    replace       changes: ~ data,metadata\n ~   └─ kubernetes:apps:Deployment  nginx                                    update        changes: ~ spec\n\ninfo: 2 changes previewed:\n    ~ 1 resource to update\n    +-1 resource to replace\n      2 resources unchanged\n```\n\nRunning `pulumi up` would actually attempt to achieve these results.\n\nNow, if we `curl` the IP address once more, we see that it points at google.com!\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp) | grep -o \"<title>Google</title>\"\n<title>Google</title>\n```\n\n[rollout]: https://github.com/pulumi/examples/tree/master/kubernetes-ts-configmap-rollout\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [config.ts](/assets/config.ts)\n- [default.conf](/assets/default.conf)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [s3Helpers.ts](/assets/s3helpers.ts)\n- [tsconfig.json](/assets/tsconfig.json)\n- [util.ts](/assets/util.ts)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-s3-rollout.html","relUrl":"notes/kubernetes-ts-s3-rollout.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-s3-rollout.images","content":"## Imported Assets\n\n- [deploy.cast](/assets/deploy.cast)\n- [deploy.gif](/assets/deploy.gif)\n- [diff.cast](/assets/diff.cast)\n- [diff.gif](/assets/diff.gif)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-s3-rollout.images.html","relUrl":"notes/kubernetes-ts-s3-rollout.images.html"},{"doc":"Kubernetes Ts Nginx","title":"Kubernetes Ts Nginx","hpath":"kubernetes-ts-nginx","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Stateless Application Using a Deployment\n\nA version of the [Kubernetes Stateless Application Deployment](https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/) example that uses Pulumi.\nThis example deploys a replicated Nginx server to a Kubernetes cluster, using TypeScript and no YAML.\n\nThere is an [interactive Tutorial available](https://www.pulumi.com/docs/tutorials/kubernetes/stateless-app/) for\nthis example. If this is your first time using Pulumi for Kubernetes, we recommend starting there.\n\n## Pre-Requisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Kubernetes for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/)\n\n## Running the App\n\nAfter cloning this repo, `cd` into this directory and install dependencies:\n\n```sh\nnpm install\n```\n\nAfterwards, create a new stack, a logical deployment target that we'll deploy into:\n\n```sh\n$ pulumi stack init\nEnter a stack name: k8s-nginx-dev\n```\n\nNow to perform the deployment, simply run `pulumi up`. It will first show you a preview of what will take place.\nAfter confirming, the deployment will take place in approximately 20 seconds:\n\n```sh\n$ pulumi up\nUpdating stack 'k8s-nginx-dev'\nPerforming changes:\n\n     Type                           Name                     Status      Info\n +   pulumi:pulumi:Stack            k8s-nginx-k8s-nginx-dev  created\n +   └─ kubernetes:apps:Deployment  nginx                    created\n\ninfo: 2 changes performed:\n    + 2 resources created\nUpdate duration: 18.291517072s\n```\n\nThis deployment is now running, and you can run commands like `kubectl get pods` to see the application's resources.\n\nThe stack's replica count is configurable. By default, it will scale up to three instances, but we can easily change\nthat to five, by running the `pulumi config` command followed by another `pulumi up`:\n\n```sh\n$ pulumi config set replicas 5\n$ pulumi up\nUpdating stack 'k8s-nginx-dev'\nPerforming changes:\n\n     Type                           Name                     Status      Info\n *   pulumi:pulumi:Stack            k8s-nginx-k8s-nginx-dev  done\n ~   └─ kubernetes:apps:Deployment  nginx                    updated     changes: ~ spec\n\ninfo: 1 change performed:\n    ~ 1 resource updated\n      1 resource unchanged\nUpdate duration: 4.324849549s\n```\n\nAfter we're done, we can tear down all resources, including removing our stack, with a couple commands:\n\n```sh\n$ pulumi destroy --yes\n$ pulumi stack rm --yes\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-nginx.html","relUrl":"notes/kubernetes-ts-nginx.html"},{"doc":"Kubernetes Ts Multicloud","title":"Kubernetes Ts Multicloud","hpath":"kubernetes-ts-multicloud","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Application Deployed To Multiple Clusters\n\nThis example creates managed Kubernetes clusters using AKS, EKS, and GKE, and deploys the application\non each cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. (Optional) [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n4. (Optional) [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n5. (Optional) [Configure GCP Credentials](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n6. (Optional) [Configure local access to a Kubernetes cluster](https://kubernetes.io/docs/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2                # Any valid AWS region here.\n   $ pulumi config set azure:location westus2              # Any valid Azure location here.\n   $ pulumi config set gcp:project [your-gcp-project-here]\n   $ pulumi config set gcp:zone us-west1-a                 # Any valid GCP zone here.\n   ```\n\n   Note that you can choose different regions here.\n\n   We recommend using `us-west-2` to host your EKS cluster as other regions (notably `us-east-1`) may have capacity\n   issues that prevent EKS clusters from creating.\n\n4. (Optional) Disable any clusters you do not want to deploy by commenting out the corresponding lines in\n   the `index.ts` file. All clusters are enabled by default.\n\n5. Bring up the stack, which will create the selected managed Kubernetes clusters, and deploy an application to each of\n   them.\n\n   ```bash\n   $ pulumi up\n   ```\n\n   Here's what it should look like once it completes:\n   ![appUrls](images/appUrls.png)\n\n6. You can connect to the example app (kuard) on each cluster using the exported URLs.\n   ![kuard](images/kuard.png)\n\n   Important: This application is exposed publicly over http, and can be used to view sensitive details about the\n   node. Do not run this application on production clusters!\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n   Note: The static IP workaround required for the AKS Service can cause a destroy failure if the IP has not\n   finished detaching from the LoadBalancer. If you encounter this error, simply rerun `pulumi destroy --yes`,\n   and it should succeed.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [aks.ts](/assets/aks.ts)\n- [app.ts](/assets/app.ts)\n- [eks.ts](/assets/eks.ts)\n- [gke.ts](/assets/gke.ts)\n- [index.ts](/assets/index.ts)\n- [local.ts](/assets/local.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-multicloud.html","relUrl":"notes/kubernetes-ts-multicloud.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-multicloud.images","content":"## Imported Assets\n\n- [appUrls.png](/assets/appurls.png)\n- [kuard.png](/assets/kuard.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-multicloud.images.html","relUrl":"notes/kubernetes-ts-multicloud.images.html"},{"doc":"Kubernetes Ts Jenkins","title":"Kubernetes Ts Jenkins","hpath":"kubernetes-ts-jenkins","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Continuous Integration with Jenkins\n\nThis example deploys a container running the Jenkins continuous integration system onto a running\nKubernetes cluster using Pulumi and `@pulumi/kubernetes`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get setup with Pulumi and Kubernetes.\n\n> _Note_: The code in this repo assumes you are deploying to a cluster that supports the\n> [`LoadBalancer`](https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer) service type.\n> This includes most cloud providers as well as [Docker for Mac Edge w/\n> Kubernetes](https://docs.docker.com/docker-for-mac/kubernetes/). If not (for example if you are targeting `minikube`\n> or your own custom Kubernetes cluster), replace `type: \"LoadBalancer\"` with `type: \"ClusterIP\"` in `jenkins.ts`. See\n> the Kubernetes [Services\n> docs](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types) for more\n> details.\n\nInstall dependencies:\n\n```\n$ npm install\n```\n\nCreate a new stack:\n\n```\n$ pulumi stack init dev\n```\n\nCreate configuration keys for the root username and password for the Jenkins instance we are\nabout to create:\n\n```\n$ pulumi config set username <your desired username>\n$ pulumi config set password <your desired password> --secret\n```\n\nPreview the deployment of the application:\n\n```\n$ pulumi preview\nPreviewing update (dev):\n     Type                                         Name                       Plan       \n +   pulumi:pulumi:Stack                          kubernetes-ts-jenkins-dev  create     \n +   └─ jenkins:jenkins:Instance                  dev                        create     \n +      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    create     \n +      ├─ kubernetes:core:Secret                 dev-secret                 create     \n +      ├─ kubernetes:core:Service                dev-service                create     \n +      └─ kubernetes:apps:Deployment             dev-deploy                 create     \n \nResources:\n    + 6 to create\n```\n\nPerform the deployment:\n\n```\n$ pulumi up --skip-preview\nUpdating (dev):\n     Type                                         Name                       Status      \n +   pulumi:pulumi:Stack                          kubernetes-ts-jenkins-dev  created     \n +   └─ jenkins:jenkins:Instance                  dev                        created     \n +      ├─ kubernetes:core:Secret                 dev-secret                 created     \n +      ├─ kubernetes:core:Service                dev-service                created     \n +      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    created     \n +      └─ kubernetes:apps:Deployment             dev-deploy                 created     \n \nOutputs:\n    externalIp: \"35.184.131.21\"\n\nResources:\n    + 6 created\n\nDuration: 1m58s\n```\n\nThe deployment is complete! Use `pulumi stack output externalIp` to see the IP of the Service that we just deployed:\n\n```\n$ pulumi stack output externalIp\n35.184.131.21\n```\n\nThe Jenkins instance we just deployed is reachable through port 80 of the external IP address. You can now\nvisit `http://35.184.131.21/login` in a Web browser to begin the first-install flow for your new Jenkins instance.\nYou can use the username and password that you saved in your Pulumi config to log in to your new Jenkins instance.\n\n> _Note_: If you are deploying to a cluster that does not support `type: \"LoadBalancer\"`, and deployed the example using\n> `type: \"ClusterIP\"` instead, run `kubectl port-forward svc/jenkins 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\nWhen you're ready to be done with Jenkins, you can destroy the instance:\n\n```\n$ pulumi destroy\nDo you want to perform this destroy? yes\nDestroying (dev):\n     Type                                         Name                       Status      \n -   pulumi:pulumi:Stack                          kubernetes-ts-jenkins-dev  deleted     \n -   └─ jenkins:jenkins:Instance                  dev                        deleted     \n -      ├─ kubernetes:core:Secret                 dev-secret                 deleted     \n -      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    deleted     \n -      ├─ kubernetes:core:Service                dev-service                deleted     \n -      └─ kubernetes:apps:Deployment             dev-deploy                 deleted     \n \nOutputs:\n  - externalIp: \"35.184.131.21\"\n\nResources:\n    - 6 deleted\n\nDuration: 36s\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [jenkins.ts](/assets/jenkins.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-jenkins.html","relUrl":"notes/kubernetes-ts-jenkins.html"},{"doc":"Kubernetes Ts Helm WordPress","title":"Kubernetes Ts Helm WordPress","hpath":"kubernetes-ts-helm-wordpress","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Wordpress Helm Chart\n\nUses the Helm API of `@pulumi/kubernetes` to deploy `v9.6.0` of the Wordpress Helm Chart to a\nKubernetes cluster. Pulumi will expand the Helm Chart and submit the expanded YAML to the cluster.\n\n![wordpress](images/deploy.gif \"Wordpress Helm Chart deployment\")\n\n## Running the App\n\nIf you haven't already, follow the steps in [Pulumi Installation and\nSetup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get set up with\nPulumi and Kubernetes.\n\nNow, install dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: wordpress-dev\n```\n\nPreview the deployment of the application and the perform the deployment:\n\n```sh\npulumi up\nPreviewing update (ts-helm-wordpress)\n\nView Live: https://app.pulumi.com/example/wordpress/ts-helm-wordpress/previews/cc683bd2-1e19-49c9-8a88-792c44e3b020\n\n     Type                                         Name                         Plan\n +   pulumi:pulumi:Stack                          wordpress-ts-helm-wordpress  create\n +   └─ kubernetes:helm.sh:Chart                  wpdev                        create\n +      ├─ kubernetes:core:Secret                 default/wpdev-mariadb        create\n +      ├─ kubernetes:core:Secret                 wpdev-wordpress              create\n +      ├─ kubernetes:core:Service                default/wpdev-mariadb        create\n +      ├─ kubernetes:core:Service                wpdev-wordpress              create\n +      ├─ kubernetes:core:ConfigMap              default/wpdev-mariadb        create\n +      ├─ kubernetes:core:PersistentVolumeClaim  wpdev-wordpress              create\n +      ├─ kubernetes:apps:StatefulSet            default/wpdev-mariadb        create\n +      └─ kubernetes:apps:Deployment             wpdev-wordpress              create\n\nResources:\n    + 10 to create\n\nDo you want to perform this update? yes\nUpdating (ts-helm-wordpress)\n\nView Live: https://app.pulumi.com/example/wordpress/ts-helm-wordpress/updates/7\n\n     Type                                         Name                         Status\n +   pulumi:pulumi:Stack                          wordpress-ts-helm-wordpress  created\n +   └─ kubernetes:helm.sh:Chart                  wpdev                        created\n +      ├─ kubernetes:core:Secret                 default/wpdev-mariadb        created\n +      ├─ kubernetes:core:Secret                 wpdev-wordpress              created\n +      ├─ kubernetes:core:PersistentVolumeClaim  wpdev-wordpress              created\n +      ├─ kubernetes:core:Service                wpdev-wordpress              created\n +      ├─ kubernetes:core:ConfigMap              default/wpdev-mariadb        created\n +      ├─ kubernetes:core:Service                default/wpdev-mariadb        created\n +      ├─ kubernetes:apps:StatefulSet            default/wpdev-mariadb        created\n +      └─ kubernetes:apps:Deployment             wpdev-wordpress              created\n\nOutputs:\n    frontendIp: \"35.193.210.254\"\n\nResources:\n    + 10 created\n\nDuration: 53s\n```\n\nWe can see here in the `---outputs:---` section that Wordpress was allocated a public IP, in this\ncase `35.193.210.254`. It is exported with a stack output variable, `frontendIp`. We can use `curl`\nand `grep` to retrieve the `<title>` of the site the proxy points at.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp):80 | grep \"<title>\"\n<title>User&#039;s Blog! &#8211; Just another WordPress site</title>\n```\n\nYou can also navigate to the site in a web browser.\n\nWhen you're done, you can remove these resources with `pulumi destroy`:\n\n```sh\npulumi destroy --skip-preview\nDestroying (ts-helm-wordpress)\n\nView Live: https://app.pulumi.com/example/wordpress/ts-helm-wordpress/updates/8\n\n     Type                                         Name                         Status\n -   pulumi:pulumi:Stack                          wordpress-ts-helm-wordpress  deleted\n -   └─ kubernetes:helm.sh:Chart                  wpdev                        deleted\n -      ├─ kubernetes:core:Secret                 wpdev-wordpress              deleted\n -      ├─ kubernetes:core:Secret                 default/wpdev-mariadb        deleted\n -      ├─ kubernetes:core:ConfigMap              default/wpdev-mariadb        deleted\n -      ├─ kubernetes:core:Service                default/wpdev-mariadb        deleted\n -      ├─ kubernetes:core:PersistentVolumeClaim  wpdev-wordpress              deleted\n -      ├─ kubernetes:core:Service                wpdev-wordpress              deleted\n -      ├─ kubernetes:apps:StatefulSet            default/wpdev-mariadb        deleted\n -      └─ kubernetes:apps:Deployment             wpdev-wordpress              deleted\n\nOutputs:\n  - frontendIp: \"35.193.210.254\"\n\nResources:\n    - 10 deleted\n\nDuration: 7s\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-helm-wordpress.html","relUrl":"notes/kubernetes-ts-helm-wordpress.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-helm-wordpress.images","content":"## Imported Assets\n\n- [deploy.cast](/assets/deploy.cast)\n- [deploy.gif](/assets/deploy.gif)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-helm-wordpress.images.html","relUrl":"notes/kubernetes-ts-helm-wordpress.images.html"},{"doc":"Kubernetes Ts Guestbook","title":"Kubernetes Ts Guestbook","hpath":"kubernetes-ts-guestbook","content":"\n","url":"https://pulumi.dendron.so/notes/3b17a333-3343-4566-bf60-5b39c91d349a.html","relUrl":"notes/3b17a333-3343-4566-bf60-5b39c91d349a.html"},{"doc":"Simple","title":"Simple","hpath":"kubernetes-ts-guestbook.simple","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (Simple Variant)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi.\n\nThis is a straight port of the original YAML, and doesn't highlight advantages of using real languages. For an example\nusing abstraction to cut down on boilerplate, please see the [variant using components](../components),\nalso in this repo. It provisions the same set of resources.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'testbook'\nPerforming changes:\n\n     Type                           Name                Status      Info\n +   pulumi:pulumi:Stack            guestbook-testbook  created\n +   ├─ kubernetes:apps:Deployment  redis-leader        created\n +   ├─ kubernetes:apps:Deployment  frontend            created\n +   ├─ kubernetes:apps:Deployment  redis-replica       created\n +   ├─ kubernetes:core:Service     redis-leader        created     1 info message\n +   ├─ kubernetes:core:Service     redis-replica       created     1 info message\n +   └─ kubernetes:core:Service     frontend            created     2 info messages\n\n---outputs:---\nfrontendIp: \"35.232.147.18\"\n\ninfo: 7 changes performed:\n    + 7 resources created\nUpdate duration: 40.829381902s\n\nPermalink: https://app.pulumi.com/hausdorff/testbook/updates/1\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontendIp)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-guestbook.simple.html","relUrl":"notes/kubernetes-ts-guestbook.simple.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-ts-guestbook.simple.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-guestbook.simple.imgs.html","relUrl":"notes/kubernetes-ts-guestbook.simple.imgs.html"},{"doc":"Components","title":"Components","hpath":"kubernetes-ts-guestbook.components","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (with Components)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi. Unlike [the straight port of the original YAML](../simple), this variant\nleverages real code to eliminate boilerplate. A `ServiceDeployment` class is used that combines the common pattern\nof deploying a container image using a Kubernetes `Deployment`, and then scaling it using a `Service`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: guestbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nPreviewing update (guestbook):\n\n     Type                                Name                      Plan       \n +   pulumi:pulumi:Stack                 guestbook-easy-guestbook  create     \n +   ├─ k8sjs:service:ServiceDeployment  frontend                  create     \n +   │  ├─ kubernetes:apps:Deployment    frontend                  create     \n +   │  └─ kubernetes:core:Service       frontend                  create     \n +   ├─ k8sjs:service:ServiceDeployment  redis-replica             create     \n +   │  ├─ kubernetes:apps:Deployment    redis-replica             create     \n +   │  └─ kubernetes:core:Service       redis-replica             create     \n +   └─ k8sjs:service:ServiceDeployment  redis-leader              create     \n +      ├─ kubernetes:apps:Deployment    redis-leader              create     \n +      └─ kubernetes:core:Service       redis-leader              create     \n \nResources:\n    + 10 to create\n\nDo you want to perform this update? yes\nUpdating (guestbook):\n\n     Type                                Name                      Status      \n +   pulumi:pulumi:Stack                 guestbook-easy-guestbook  created     \n +   ├─ k8sjs:service:ServiceDeployment  redis-leader              created     \n +   │  ├─ kubernetes:apps:Deployment    redis-leader              created     \n +   │  └─ kubernetes:core:Service       redis-leader              created     \n +   ├─ k8sjs:service:ServiceDeployment  frontend                  created     \n +   │  ├─ kubernetes:apps:Deployment    frontend                  created     \n +   │  └─ kubernetes:core:Service       frontend                  created     \n +   └─ k8sjs:service:ServiceDeployment  redis-replica             created     \n +      ├─ kubernetes:apps:Deployment    redis-replica             created     \n +      └─ kubernetes:core:Service       redis-replica             created     \n \nOutputs:\n    frontendIp: \"10.105.48.30\"\n\nResources:\n    + 10 created\n\nDuration: 21s\n\nPermalink: https://app.pulumi.com/acmecorp/k8sjs-guestbook/updates/1\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontendIp)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [k8sjs.ts](/assets/k8sjs.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-guestbook.components.html","relUrl":"notes/kubernetes-ts-guestbook.components.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-ts-guestbook.components.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-guestbook.components.imgs.html","relUrl":"notes/kubernetes-ts-guestbook.components.imgs.html"},{"doc":"Kubernetes Ts Exposed Deployment","title":"Kubernetes Ts Exposed Deployment","hpath":"kubernetes-ts-exposed-deployment","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Exposing a Deployment with a Public IP Address\n\nDeploys `nginx` to a Kubernetes cluster, and publicly exposes it to the Internet with an IP address,\nusing a Kubernetes `Service`.\n\nIn the gif below we see the experience of deploying this example with `pulumi up`. Notice that\nPulumi has an inherent notion of \"done-ness\" -- Pulumi waits for the IP address to be allocated to\nthe `Service`. Because this example uses the Pulumi concept of _stack exports_ to report this IP\naddress, in this example we are also able to use `curl` to reach the `nginx` server.\n\n![Allocating a public IP to a Deployment](images/deploy.gif \"Allocating a public IP to a Deployment\")\n\n## Running the App\n\nIf you haven't already, follow the steps in [Pulumi Installation and\nSetup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get setup with\nPulumi and Kubernetes.\n\nNow, install dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: exposed-deployment-dev\n```\n\nThis example will attempt to expose the `nginx` deployment Internet with a `Service` of type\n`LoadBalancer`. Since minikube does not support `LoadBalancer`, the application already knows to use\ntype `ClusterIP` instead; all you need to do is to tell it whether you're deploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'exposed-deployment-dev'\nPerforming changes:\n\n     Type                           Name                                       Status      Info\n +   pulumi:pulumi:Stack            exposed-deployment-exposed-deployment-dev  created     1 warning\n +   ├─ kubernetes:apps:Deployment  nginx                                      created\n +   └─ kubernetes:core:Service     nginx                                      created     2 info messages\n\nDiagnostics:\n  kubernetes:core:Service: nginx\n    info: ✅ Service 'nginx-rn6uipeg' successfully created endpoint objects\n\n    info: ✅ Service has been allocated an IP\n\n---outputs:---\nfrontendIp: \"35.226.79.225\"\n\ninfo: 3 changes performed:\n    + 3 resources created\nUpdate duration: 46.555593397s\n\nPermalink: https://app.pulumi.com/hausdorff/exposed-deployment-dev/updates/1\n```\n\nWe can see here in the `---outputs:---` section that Wordpress was allocated a public IP, in this\ncase `35.226.79.225`. It is exported with a stack output variable, `frontendIp`. We can use `curl`\nand `grep` to retrieve the `<title>` of the site the proxy points at.\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp) | grep \"<title>\"\n<title>Welcome to nginx!</title>\n```\n\n## Next steps\n\nNow that `nginx` is deployed and exposed to the internet with an IP, try playing around with the\nexample!\n\nIf we change the `nginx` image to `nginx:1.16-alpine`, we can run `pulumi preview --diff` and see\nthis change reported to us:\n\n![Diff](images/diff.gif \"Reporting a diff after we change the app\")\n\nNotice also that if you provide an image that does not exist, Pulumi will report errors as it sees\nthem. You should see something similar in principle to this:\n\n![Diff](images/error.gif \"Error reporting\")\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-exposed-deployment.html","relUrl":"notes/kubernetes-ts-exposed-deployment.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-exposed-deployment.images","content":"## Imported Assets\n\n- [deploy.cast](/assets/deploy.cast)\n- [deploy.gif](/assets/deploy.gif)\n- [diff.cast](/assets/diff.cast)\n- [diff.gif](/assets/diff.gif)\n- [error.cast](/assets/error.cast)\n- [error.gif](/assets/error.gif)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-exposed-deployment.images.html","relUrl":"notes/kubernetes-ts-exposed-deployment.images.html"},{"doc":"Kubernetes Ts Configmap Rollout","title":"Kubernetes Ts Configmap Rollout","hpath":"kubernetes-ts-configmap-rollout","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# App Rollout via ConfigMap Data Change\n\nUses nginx to reverse-proxy traffic to `pulumi.github.io`. The nginx configuration is contained in\nthe file `default.conf` in this directory; this program reads that file and puts it in a\n`ConfigMap`. Hence, changing data in that file will cause register as a change in the `ConfigMap`'s\ndata, which will trigger a rollout of the nginx `Deployment`.\n\n![configmapRollout](images/rollout.gif \"ConfigMap-induced Rollout\")\n\n## Running the App\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and\n[Configuring Pulumi Kubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to\nget setup with Pulumi and Kubernetes.\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: configmap-rollout-dev\n```\n\nThis example will attempt to expose the `nginx` deployment to the Internet with\na `Service` of type `LoadBalancer`. Since minikube does not support\n`LoadBalancer`, the application already knows to use type `ClusterIP` instead;\nall you need to do is to tell it whether you're deploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'configmap-rollout-dev'\nPerforming changes:\n\n     Type                           Name                                     Status      Info\n +   pulumi:pulumi:Stack            configmap-rollout-configmap-rollout-dev  created\n +   ├─ kubernetes:core:ConfigMap   nginx                                    created\n +   ├─ kubernetes:apps:Deployment  nginx                                    created\n +   └─ kubernetes:core:Service     nginx                                    created\n\n---outputs:---\nfrontendIp: \"35.193.210.254\"\n\ninfo: 4 changes performed:\n    + 4 resources created\nUpdate duration: 49.612528861s\n\nPermalink: https://app.pulumi.com/hausdorff/configmap-rollout-dev/updates/1\n```\n\nWe can see here in the `---outputs:---` section that our proxy was allocated a public IP, in this\ncase `35.193.210.254`. It is exported with a stack output variable, `frontendIp`. We can use `curl`\nand `grep` to retrieve the `<title>` of the site the proxy points at.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp):80 | grep -C 1 \"<title>\"\n\n    <title>Pulumi. Serverless // Containers // Infrastructure // Cloud // DevOps</title>\n```\n\nNow, open `default.conf` and change `.node.server` and `.server.location.proxy_set_header` to point\nat `google.com`. If you're on macOS you can run `sed -i bak \"s/pulumi.github.io/google.com/g\" default.conf`\n\nThe result should look like this:\n\n```conf\nupstream node {\n  server google.com;\n}\nserver {\n  listen                  80;\n  server_name             _;\n  root                    /usr/share/nginx/html;\n  location / {\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header Host google.com;\n    proxy_pass http://node;\n    proxy_redirect off;\n    port_in_redirect off;\n  }\n}\n```\n\nRunning `preview` now shows that this change will cause us to replace the `ConfigMap` with a new one\ncontaining the new data, and subsequently trigger a rollout in the `Deployment`.\n\n> NOTE: This rollout is safe! Pulumi executes this plan with the following steps:\n>\n> 1. Create a new `ConfigMap` with a new name and the new data.\n> 2. Update the `PodTemplate` of the `Deployment` to point at the new `ConfigMap`. This update\n>    triggers the `Deployment` controller to try to roll out a new set of containers with mounts\n>    that contain this new data.\n> 3. Only once that succeeds, delete the old `ConfigMap`.\n\n```sh\nPreviewing update of stack 'configmap-rollout-dev'\n     Type                           Name                                     Status        Info\n *   pulumi:pulumi:Stack            configmap-rollout-configmap-rollout-dev  no change\n +-  ├─ kubernetes:core:ConfigMap   nginx                                    replace       changes: ~ data,metadata\n ~   └─ kubernetes:apps:Deployment  nginx                                    update        changes: ~ spec\n\ninfo: 2 changes previewed:\n    ~ 1 resource to update\n    +-1 resource to replace\n      2 resources unchanged\n```\n\nRunning `pulumi up` should similarly look something like this:\n\n```sh\nUpdating stack 'configmap-rollout-dev'\n     Type                           Name                                     Status       Info\n *   pulumi:pulumi:Stack            configmap-rollout-configmap-rollout-dev  done\n +-  ├─ kubernetes:core:ConfigMap   nginx                                    replaced     changes: ~ data,metadata\n ~   └─ kubernetes:apps:Deployment  nginx                                    updated      changes: ~ spec\n\n---outputs:---\nfrontendIp: \"35.193.210.254\"\n\ninfo: 2 changes performed:\n    ~ 1 resource updated\n    +-1 resource replaced\n      2 resources unchanged\nUpdate duration: 5.679919856s\n\nPermalink: https://app.pulumi.com/hausdorff/configmap-rollout-dev/updates/13\n```\n\nNow, if we `curl` the IP address once more, we see that it points at google.com!\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n```sh\n$ curl -sL $(pulumi stack output frontendIp) | grep -o \"<title>Google</title>\"\n<title>Google</title>\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [default.conf](/assets/default.conf)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-configmap-rollout.html","relUrl":"notes/kubernetes-ts-configmap-rollout.html"},{"doc":"Images","title":"Images","hpath":"kubernetes-ts-configmap-rollout.images","content":"## Imported Assets\n\n- [rollout.cast](/assets/rollout.cast)\n- [rollout.gif](/assets/rollout.gif)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-ts-configmap-rollout.images.html","relUrl":"notes/kubernetes-ts-configmap-rollout.images.html"},{"doc":"Kubernetes Py Nginx","title":"Kubernetes Py Nginx","hpath":"kubernetes-py-nginx","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Stateless Application Using a Deployment\n\nA version of the [Kubernetes Stateless Application Deployment](https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/) example that uses Pulumi.\nThis example deploys a replicated Nginx server to a Kubernetes cluster, using Python and no YAML.\n\nThere is an [interactive Tutorial available](https://www.pulumi.com/docs/tutorials/kubernetes/stateless-app/) for\nthis example. If this is your first time using Pulumi for Kubernetes, we recommend starting there.\n\n## Pre-Requisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Kubernetes for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/)\n\n## Running the App\n\nAfter cloning this repo, `cd` into this directory and create a new stack, a logical deployment target that we'll deploy into:\n\n```bash\n    $ pulumi stack init dev\n```\n\nNow to perform the deployment, simply run `pulumi up`. It will first show you a preview of what will take place.\nAfter confirming, the deployment will take place in approximately 20 seconds:\n\n```bash\n    $ pulumi up -y\n    Previewing update (dev):\n        Type                           Name                     Plan       \n    +   pulumi:pulumi:Stack            kubernetes-py-nginx-dev  create     \n    +   └─ kubernetes:apps:Deployment  nginx-deployment         create     \n    \n    Resources:\n        + 2 to create\n\n    Do you want to perform this update? yes\n    Updating (dev):\n        Type                           Name                     Status      \n    +   pulumi:pulumi:Stack            kubernetes-py-nginx-dev  created     \n    +   └─ kubernetes:apps:Deployment  nginx-deployment         created     \n    \n    Outputs:\n        nginx: \"nginx-deployment-ts0qpwi9\"\n\n    Resources:\n        + 2 created\n\n    Duration: 10s\n```\n\nThis deployment is now running, and you can run commands like `kubectl get pods` to see the application's resources.\n\nThe stack's replica count is configurable. By default, it will scale up to three instances, but we can easily change\nthat to five, by running the `pulumi config` command followed by another `pulumi up`:\n\n```bash\n    $ pulumi config set replicas 5\n    $ pulumi up -y\n    Previewing update (dev):\n        Type                           Name                     Plan       Info\n        pulumi:pulumi:Stack            kubernetes-py-nginx-dev             \n    ~   └─ kubernetes:apps:Deployment  nginx-deployment         update     [diff: ~spec]\n    \n    Resources:\n        ~ 1 to update\n        1 unchanged\n\n    Updating (dev):\n        Type                           Name                     Status      Info\n        pulumi:pulumi:Stack            kubernetes-py-nginx-dev              \n    ~   └─ kubernetes:apps:Deployment  nginx-deployment         updated     [diff: ~spec]\n    \n    Outputs:\n        nginx: \"nginx-deployment-ts0qpwi9\"\n\n    Resources:\n        ~ 1 updated\n        1 unchanged\n\n    Duration: 15s\n```\n\nAfter we're done, we can tear down all resources, including removing our stack, with a couple commands:\n\n```bash\n    $ pulumi destroy --yes\n    $ pulumi stack rm --yes\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-nginx.html","relUrl":"notes/kubernetes-py-nginx.html"},{"doc":"Kubernetes Py Jenkins","title":"Kubernetes Py Jenkins","hpath":"kubernetes-py-jenkins","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Continuous Integration with Jenkins\n\nThis example deploys a container running the Jenkins continuous integration system onto a running\nKubernetes cluster using Pulumi and `@pulumi/kubernetes`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get setup with Pulumi and Kubernetes.\n\n> _Note_: The code in this repo assumes you are deploying to a cluster that supports the\n> [`LoadBalancer`](https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer) service type.\n> This includes most cloud providers as well as [Docker for Mac Edge w/\n> Kubernetes](https://docs.docker.com/docker-for-mac/kubernetes/). If not (for example if you are targeting `minikube`\n> or your own custom Kubernetes cluster), replace `type: \"LoadBalancer\"` with `type: \"ClusterIP\"` in `jenkins.ts`. See\n> the Kubernetes [Services\n> docs](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types) for more\n> details.\n\nCreate a new stack:\n\n```bash\n    $ pulumi stack init dev\n```\n\nCreate configuration keys for the root username and password for the Jenkins instance we are\nabout to create:\n\n```bash\n    $ pulumi config set username <your desired username>\n    $ pulumi config set password <your desired password> --secret\n```\n\nConfigure Kubernetes to run without Minikube:\n\n```bash\n    $ pulumi config set isMinikube false\n```\n\nPreview the deployment of the application:\n\n```bash\n    $ pulumi preview\n    Previewing update (dev):\n         Type                                         Name                       Plan       \n     +   pulumi:pulumi:Stack                          kubernetes-py-jenkins-dev  create     \n     +   └─ jenkins:jenkins:Instance                  dev                        create     \n     +      ├─ kubernetes:core:Service                dev-service                create     \n     +      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    create     \n     +      ├─ kubernetes:core:Secret                 dev-secret                 create     \n     +      └─ kubernetes:apps:Deployment             dev-deploy                 create     \n\n    Resources:\n        + 6 to create\n```\n\nPerform the deployment:\n\n```bash\n    $ pulumi up --skip-preview\n    Updating (dev):\n         Type                                         Name                       Status      \n     +   pulumi:pulumi:Stack                          kubernetes-py-jenkins-dev  created     \n     +   └─ jenkins:jenkins:Instance                  dev                        created     \n     +      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    created     \n     +      ├─ kubernetes:core:Service                dev-service                created     \n     +      ├─ kubernetes:core:Secret                 dev-secret                 created     \n     +      └─ kubernetes:apps:Deployment             dev-deploy                 created     \n\n    Outputs:\n        external_ip: \"35.239.72.50\"\n\n    Resources:\n        + 6 created\n\n    Duration: 1m57s\n```\n\nThe deployment is complete! Use `pulumi stack output external_ip` to see the IP of the Service that we just deployed:\n\n```bash\n    $ pulumi stack output external_ip\n    35.239.72.50\n```\n\nThe Jenkins instance we just deployed is reachable through port 80 of the external IP address. You can now\nvisit `http://35.239.72.50/login` in a Web browser to begin the first-install flow for your new Jenkins instance.\nYou can use the username and password that you saved in your Pulumi config to log in to your new Jenkins instance.\n\n> _Note_: If you are deploying to a cluster that does not support `type: \"LoadBalancer\"`, and deployed the example using\n> `type: \"ClusterIP\"` instead, run `kubectl port-forward svc/jenkins 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\nWhen you're ready to be done with Jenkins, you can destroy the instance:\n\n```bash\n    $ pulumi destroy\n        Destroying (dev):\n         Type                                         Name                       Status      \n     -   pulumi:pulumi:Stack                          kubernetes-py-jenkins-dev  deleted     \n     -   └─ jenkins:jenkins:Instance                  dev                        deleted     \n     -      ├─ kubernetes:core:Secret                 dev-secret                 deleted     \n     -      ├─ kubernetes:core:Service                dev-service                deleted     \n     -      ├─ kubernetes:core:PersistentVolumeClaim  dev-pvc                    deleted     \n     -      └─ kubernetes:apps:Deployment             dev-deploy                 deleted     \n     \n    Outputs:\n      - external_ip: \"35.239.72.50\"\n    \n    Resources:\n        - 6 deleted\n    \n    Duration: 33s\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [jenkins.py](/assets/jenkins.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-jenkins.html","relUrl":"notes/kubernetes-py-jenkins.html"},{"doc":"Kubernetes Py Guestbook","title":"Kubernetes Py Guestbook","hpath":"kubernetes-py-guestbook","content":"\n","url":"https://pulumi.dendron.so/notes/c260b3f0-5988-4d46-a238-b99aa181dfbb.html","relUrl":"notes/c260b3f0-5988-4d46-a238-b99aa181dfbb.html"},{"doc":"Simple","title":"Simple","hpath":"kubernetes-py-guestbook.simple","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (Simple Variant)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating (kubernetes-py-guestbook):\n     Type                           Name                                             Status\n +   pulumi:pulumi:Stack            kubernetes-py-guestbook-kubernetes-py-guestbook  created\n +   ├─ kubernetes:core:Service     redis-leader                                     created\n +   ├─ kubernetes:core:Service     redis-replica                                    created\n +   ├─ kubernetes:core:Service     frontend                                         created\n +   ├─ kubernetes:apps:Deployment  redis-leader                                     created\n +   ├─ kubernetes:apps:Deployment  redis-replica                                    created\n +   └─ kubernetes:apps:Deployment  frontend                                         created\n\nOutputs:\n    frontend_ip: \"10.96.243.48\"\n\nResources:\n    + 7 created\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontend_ip)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-guestbook.simple.html","relUrl":"notes/kubernetes-py-guestbook.simple.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-py-guestbook.simple.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-guestbook.simple.imgs.html","relUrl":"notes/kubernetes-py-guestbook.simple.imgs.html"},{"doc":"Components","title":"Components","hpath":"kubernetes-py-guestbook.components","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (with Components)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi. Unlike [the straight port of the original YAML](../simple), this variant\nleverages real code to eliminate boilerplate. A `ServiceDeployment` class is used that combines the common pattern\nof deploying a container image using a Kubernetes `Deployment`, and then scaling it using a `Service`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nPreviewing update (guestbook):\n\n     Type                                 Name                      Plan       \n +   pulumi:pulumi:Stack                  guestbook-easy-guestbook  create     \n +   ├─ k8sx:component:ServiceDeployment  frontend                  create     \n +   │  ├─ kubernetes:apps:Deployment     frontend                  create     \n +   │  └─ kubernetes:core:Service        frontend                  create     \n +   ├─ k8sx:component:ServiceDeployment  redis-replica             create     \n +   │  ├─ kubernetes:apps:Deployment     redis-replica             create     \n +   │  └─ kubernetes:core:Service        redis-replica             create     \n +   └─ k8sx:component:ServiceDeployment  redis-leader              create     \n +      ├─ kubernetes:apps:Deployment     redis-leader              create     \n +      └─ kubernetes:core:Service        redis-leader              create     \n \nResources:\n    + 10 to create\n\nDo you want to perform this update? yes\nUpdating (guestbook):\n\n     Type                                 Name                      Status      \n +   pulumi:pulumi:Stack                  guestbook-easy-guestbook  created     \n +   ├─ k8sx:component:ServiceDeployment  redis-leader              created     \n +   │  ├─ kubernetes:apps:Deployment     redis-leader              created     \n +   │  └─ kubernetes:core:Service        redis-leader              created     \n +   ├─ k8sx:component:ServiceDeployment  frontend                  created     \n +   │  ├─ kubernetes:apps:Deployment     frontend                  created     \n +   │  └─ kubernetes:core:Service        frontend                  created     \n +   └─ k8sx:component:ServiceDeployment  redis-replica             created     \n +      ├─ kubernetes:apps:Deployment     redis-replica             created     \n +      └─ kubernetes:core:Service        redis-replica             created     \n \nOutputs:\n    frontend_ip: \"10.105.48.30\"\n\nResources:\n    + 10 created\n\nDuration: 21s\n\nPermalink: https://app.pulumi.com/acmecorp/k8sjs-guestbook/updates/1\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontend_ip)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n- [service_deployment.py](/assets/service_deployment.py)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-guestbook.components.html","relUrl":"notes/kubernetes-py-guestbook.components.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-py-guestbook.components.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-py-guestbook.components.imgs.html","relUrl":"notes/kubernetes-py-guestbook.components.imgs.html"},{"doc":"Kubernetes Go Guestbook","title":"Kubernetes Go Guestbook","hpath":"kubernetes-go-guestbook","content":"\n","url":"https://pulumi.dendron.so/notes/cc270b3b-c967-4b1b-b8ad-10e04b76836e.html","relUrl":"notes/cc270b3b-c967-4b1b-b8ad-10e04b76836e.html"},{"doc":"Simple","title":"Simple","hpath":"kubernetes-go-guestbook.simple","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (Simple Variant)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating (kubernetes-go-guestbook):\n     Type                           Name                                             Status\n +   pulumi:pulumi:Stack            kubernetes-go-guestbook-testbook                 created\n +   ├─ kubernetes:core:Service     redis-leader                                     created\n +   ├─ kubernetes:core:Service     redis-replica                                    created\n +   ├─ kubernetes:core:Service     frontend                                         created\n +   ├─ kubernetes:apps:Deployment  redis-leader                                     created\n +   ├─ kubernetes:apps:Deployment  redis-replica                                    created\n +   └─ kubernetes:apps:Deployment  frontend                                         created\n\nOutputs:\n    frontend_ip: \"10.96.243.48\"\n\nResources:\n    + 7 created\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontendIP)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-go-guestbook.simple.html","relUrl":"notes/kubernetes-go-guestbook.simple.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-go-guestbook.simple.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-go-guestbook.simple.imgs.html","relUrl":"notes/kubernetes-go-guestbook.simple.imgs.html"},{"doc":"Components","title":"Components","hpath":"kubernetes-go-guestbook.components","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (with Components)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi. Unlike [the direct port of the original YAML](../simple), this variant\nleverages real code to eliminate boilerplate. A `ServiceDeployment` class is used that combines the common pattern\nof deploying a container image using a Kubernetes `Deployment`, and then scaling it using a `Service`.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating (kubernetes-go-guestbook):\n     Type                                                    Name                                             Status\n +   pulumi:pulumi:Stack                                     kubernetes-go-guestbook-kubernetes-go-guestbook  created\n +   ├─ kubernetes-go-guestbook:component:ServiceDeployment  redis-leader                                     created\n +   │  ├─ kubernetes:core:Service                           redis-leader                                     created\n +   │  └─ kubernetes:apps:Deployment                        redis-leader                                     created\n +   ├─ kubernetes-go-guestbook:component:ServiceDeployment  redis-replica                                    created\n +   │  ├─ kubernetes:core:Service                           redis-replica                                    created\n +   │  └─ kubernetes:apps:Deployment                        redis-replica                                    created\n +   └─ kubernetes-go-guestbook:component:ServiceDeployment  frontend                                         created\n +      ├─ kubernetes:core:Service                           frontend                                         created\n +      └─ kubernetes:apps:Deployment                        frontend                                         created\n\nOutputs:\n    frontend_ip: \"10.96.243.48\"\n\nResources:\n    + 10 created\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output frontendIP)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n- [serviceDeployment.go](/assets/servicedeployment.go)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-go-guestbook.components.html","relUrl":"notes/kubernetes-go-guestbook.components.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-go-guestbook.components.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-go-guestbook.components.imgs.html","relUrl":"notes/kubernetes-go-guestbook.components.imgs.html"},{"doc":"Kubernetes Cs Guestbook","title":"Kubernetes Cs Guestbook","hpath":"kubernetes-cs-guestbook","content":"\n","url":"https://pulumi.dendron.so/notes/7edd5081-b74c-4865-a9b8-6545734327b6.html","relUrl":"notes/7edd5081-b74c-4865-a9b8-6545734327b6.html"},{"doc":"Simple","title":"Simple","hpath":"kubernetes-cs-guestbook.simple","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (Simple Variant)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'testbook'\nPerforming changes:\n\n     Type                           Name                       Status      \n +   pulumi:pulumi:Stack            guestbook-csharp-testbook  created     \n +   ├─ kubernetes:apps:Deployment  redis-replica              created     \n +   ├─ kubernetes:apps:Deployment  frontend                   created     \n +   ├─ kubernetes:apps:Deployment  redis-leader               created     \n +   ├─ kubernetes:core:Service     redis-leader               created     \n +   ├─ kubernetes:core:Service     redis-replica              created     \n +   └─ kubernetes:core:Service     frontend                   created     \n\nOutputs:\n  + FrontendIp: \"35.232.147.18\"\n\nResources:\n    + 7 created\n\nDuration: 17s\n\nPermalink: https://app.pulumi.com/lukehoban/guestbook-csharp/testbook/updates/1\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output FrontendIp)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Guestbook.cs](/assets/guestbook.cs)\n- [Kubernetes.Guestbook.csproj](/assets/kubernetes.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-cs-guestbook.simple.html","relUrl":"notes/kubernetes-cs-guestbook.simple.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-cs-guestbook.simple.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-cs-guestbook.simple.imgs.html","relUrl":"notes/kubernetes-cs-guestbook.simple.imgs.html"},{"doc":"Components","title":"Components","hpath":"kubernetes-cs-guestbook.components","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Guestbook (Components Variant)\n\nA version of the [Kubernetes Guestbook](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)\napplication using Pulumi.\n\n## Running the App\n\nFollow the steps in [Pulumi Installation](https://www.pulumi.com/docs/get-started/install/) and [Kubernetes Setup](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get Pulumi working with Kubernetes.\n\nCreate a new stack:\n\n```sh\n$ pulumi stack init\nEnter a stack name: testbook\n```\n\nThis example will attempt to expose the Guestbook application to the Internet with a `Service` of\ntype `LoadBalancer`. Since minikube does not support `LoadBalancer`, the Guestbook application\nalready knows to use type `ClusterIP` instead; all you need to do is to tell it whether you're\ndeploying to minikube:\n\n```sh\npulumi config set isMinikube <value>\n```\n\nPerform the deployment:\n\n```sh\n$ pulumi up\nUpdating stack 'testbook'\nPerforming changes:\n\n     Type                           Name                       Status      \n +   pulumi:pulumi:Stack            guestbook-csharp-testbook  created     \n +   ├─ kubernetes:apps:Deployment  redis-replica              created     \n +   ├─ kubernetes:apps:Deployment  frontend                   created     \n +   ├─ kubernetes:apps:Deployment  redis-leader               created     \n +   ├─ kubernetes:core:Service     redis-leader               created     \n +   ├─ kubernetes:core:Service     redis-replica              created     \n +   └─ kubernetes:core:Service     frontend                   created     \n\nOutputs:\n  + FrontendIp: \"35.232.147.18\"\n\nResources:\n    + 7 created\n\nDuration: 17s\n\nPermalink: https://app.pulumi.com/lukehoban/guestbook-csharp/testbook/updates/1\n```\n\nAnd finally - open the application in your browser to see the running application. If you're running\nmacOS you can simply run:\n\n```sh\nopen $(pulumi stack output FrontendIp)\n```\n\n> _Note_: minikube does not support type `LoadBalancer`; if you are deploying to minikube, make sure\n> to run `kubectl port-forward svc/frontend 8080:80` to forward the cluster port to the local\n> machine and access the service via `localhost:8080`.\n\n![Guestbook in browser](./imgs/guestbook.png)\n\n* * *\n\n## Imported Assets\n\n- [Guestbook.cs](/assets/guestbook.cs)\n- [Kubernetes.Guestbook.Components.csproj](/assets/kubernetes-guestbook.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [ServiceDeployment.cs](/assets/servicedeployment.cs)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-cs-guestbook.components.html","relUrl":"notes/kubernetes-cs-guestbook.components.html"},{"doc":"Imgs","title":"Imgs","hpath":"kubernetes-cs-guestbook.components.imgs","content":"## Imported Assets\n\n- [guestbook.png](/assets/guestbook.png)\n\n","url":"https://pulumi.dendron.so/notes/kubernetes-cs-guestbook.components.imgs.html","relUrl":"notes/kubernetes-cs-guestbook.components.imgs.html"},{"doc":"Gcp Ts Slackbot","title":"Gcp Ts Slackbot","hpath":"gcp-ts-slackbot","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Slackbot for Posting Slack Mention Notifications\n\nA simple Slackbot (called '@mentionbot') that sends a message to specific channel to notifiy you any time you're @mentioned anywhere.  Very helpful if you want a time-ordered list of @mentions to go through at a later point.\n\nSlack users can subscribe/unsubscribe from notifications easily.  Simply add `@mentionbot` to a channel you want to be notified in.  Then send any message to `@mentionbot` to subscribe.  To stop getting messages send a message to `@mentionbot` containing the word `unsubscribe`.\n\nThe example contains a few useful patterns that show how to build a good Slackbot while taking advantage of a lot of conveniences that Pulumi and the `gcp` package provide.\n\n1. we set up an HttpCallbackFunction to receive push notifications from Slack whenever important events happen.\n2. Slack has strict requirements on how quickly the push endpoint must respond with `200` notifications before they consider the message not-received, triggering back-off and resending of those same messages.  Because of this, this example does not process Slack `event` messages as they come in.  Instead, they are immediately added to an [GCP PubSub Topic](https://cloud.google.com/pubsub/) to be processed at a later point in time.  This allows the ApiGateway call to return quickly, satisfying Slack's requirements.\n3. Two [GCP Cloud Functions](https://cloud.google.com/functions/) are created naturally and simply using simple JavaScript functions.  One javascript function is used to create the CloudFunction that is called when Slack pushes notifications.  The other is used to specify the CloudFunction that will process the messages added to the Topic.  These JavaScript functions can easily access the other Pulumi resources created, avoiding the need to figure out ways to pass Resource info to the CloudFunctions to ensure they can talk to the right resources.  If these resources were swapped out in the future (for example, using BigTable instead of Firestore, or CloudTasks instead of PubSub), Pulumi would ensure the CloudFunctions were updated properly.\n4. Pulumi [Secrets](https://www.pulumi.com/docs/intro/concepts/config/) provides a simple way to pass important credentials (like your Slack tokens) without having to directly embed them in your application code.\n\nFirst, we'll setup the Pulumi App.  Then, we'll go create and configure a Slack App and Bot to interact with our Pulumi App.\n\n## Deploying and running the Pulumi App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init mentionbot\n   ```\n\n2. Set the GCP region and project:\n\n   ```\n   $ pulumi config set gcp:region us-central1\n   $ pulumi config set gcp:project <your project>\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (mentionbot):\n   ...\n\n   Do you want to perform this update? yes\n   Updating (mentionbot):\n\n       Type                                        Name                       Status\n   +   pulumi:pulumi:Stack                         gcp-ts-slack-mentionbot    created\n   +   ├─ gcp:cloudfunctions:CallbackFunction      mentionbot                 created\n   +-  │  ├─ gcp:storage:BucketObject              mentionbot                 created\n   +   │  └─ gcp:cloudfunctions:Function           mentionbot                 created\n   +   └─ gcp:pubsub:Topic                         messages                   created\n   +       └─ gcp:cloudfunctions:CallbackFunction  processTopicMessage        created\n   +          ├─ gcp:storage:BucketObject          processTopicMessage        created\n   +          └─ gcp:cloudfunctions:Function       processTopicMessage        created\n\n   Outputs:\n       url: \"https://us-central1-***.cloudfunctions.net/mentionbot-***\"\n\n   Resources:\n       + 8 created\n\n   Duration: 25s\n\n   Permalink: https://app.pulumi.com/***/mentionbot/updates/1\n   ```\n\n## Creating a new Slackbot\n\nTo create a new Slackbot, first go to <https://api.slack.com/apps> and create an account if necessary.  Next, click on 'Create New App' here:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648728-e7127180-5795-11e9-9ddf-849d789ea05b.png>\n</p>\n\nPick your desired name for the app, and the Workspace the app belongs to.  Here we choose `MentionBot`:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648747-f7c2e780-5795-11e9-9f95-e715ba76b7c8.png>\n</p>\n\nOnce created, you will need to 'Add features and functionality' to your app. You'll eventually need all these configured:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648788-15904c80-5796-11e9-9c6c-27f68c900f13.png>\n</p>\n\nFirst, we'll enable 'Incoming Webhooks'.  This allows your Slack bot to post messages into Slack for you:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648806-22ad3b80-5796-11e9-8dfd-ba86b7ba9351.png>\n</p>\n\nNext, create a bot user like so:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648827-32c51b00-5796-11e9-9abc-086a3760f6af.png>\n</p>\n\nNext, we'll enable 'Event Subscriptions'.  This will tell Slack to push events to your ApiGateway endpoint when changes happen.  Note that we put the Stack-Output `url` shown above (along with the `events` suffix).  This corresponds to the specific ApiGateway Route that was defined in the Pulumi app. Note that Slack will test this endpoint to ensure it is accepting Slack notifications and responding to them in a valid manner.  We'll also setup notifications for the events we care about.  Importantly, our bot will have to hear about when people mention it (for subscribing/unsubscribing), as well as hearing about all messages (so it can look for @-mentions):\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648880-58522480-5796-11e9-95fd-edfc9d12c381.png>\n<img src=https://user-images.githubusercontent.com/4564579/55648902-63a55000-5796-11e9-8cf6-8e8f4909d600.png>\n</p>\n\nNext, we'll go to 'Permissions'.  Here, we can find the oauth tokens your Pulumi App will need.  Specifically, we'll need the 'Bot User Oauth Token' listed here:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648951-7fa8f180-5796-11e9-81ba-b45d7ebc4bb7.png>\n</p>\n\nUnderneath this, we'll set the following Scopes defining the permissions of the bot:\n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647362-55edcb80-5792-11e9-8f60-ae5261fa9c9a.png>\n</p>\n\nNow, we're almost done.  The only thing left to do is supply your Pulumi App with the appropriate secrets/tokens.  We'll need the Bot Oauth token (shown above), and the 'Verification Token' (found under 'Basic Information'):\n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647507-af55fa80-5792-11e9-80bf-b07b894d996f.png>\n</p>\n\nSupply these both like so:\n\n````\n```\n$ pulumi config set --secret mentionbot:slackToken xoxb-...\n$ pulumi config set --secret mentionbot:verificationToken d...\n```\n````\n\nNext, install the Slack App into your workspace:\n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647599-eaf0c480-5792-11e9-88c5-83daefb32580.png>\n</p>\n\nAnd we're done!\n\n## Interacting with the Slack Bot\n\nFrom Slack you can now create your own private channel:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55647696-2ab7ac00-5793-11e9-8165-5672146036d3.png>\n</p>\n\nInvite the bot to the channel:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55647722-40c56c80-5793-11e9-8a97-5ce087d2bfe3.png>\n</p>\n\nThen send it a message.  Note, it may take several seconds for the bot to respond due to Slack push notification delays, SNS Topic delays, and Slack incoming message delays.\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648466-3e641200-5795-11e9-9917-e64cdf45b63e.png>\n</p>\n\nAnd you're set!  From now on when someone mentions you, you'll get a little message in your channel like so:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648631-b0d4f200-5795-11e9-886a-8ce0f932e9f1.png>\n</p>\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-slackbot.html","relUrl":"notes/gcp-ts-slackbot.html"},{"doc":"Gcp Ts Serverless Raw","title":"Gcp Ts Serverless Raw","hpath":"gcp-ts-serverless-raw","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python and Go Deployed with TypeScript\n\nThis example deploys two Google Cloud Functions. \"Hello World\" functions are implemented in Python and Go. Pulumi program is implemented in TypeScript.\n\n```bash\n# Create and configure a new stack\n$ pulumi stack init testing\n$ pulumi config set gcp:project <your-gcp-project>\n$ pulumi config set gcp:region <gcp-region>\n\n# Install dependencies\n$ npm install\n\n# Preview and run the deployment\n$ pulumi up\nPreviewing changes:\n...\nPerforming changes:\n...\ninfo: 6 changes performed:\n    + 6 resources created\nUpdate duration: 1m14s\n\n# Test it out\n$ curl $(pulumi stack output pythonEndpoint)\n\"Hello World!\"\n$ curl $(pulumi stack output goEndpoint)\n\"Hello World!\"\n\n# Remove the app\n$ pulumi destroy\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-serverless-raw.html","relUrl":"notes/gcp-ts-serverless-raw.html"},{"doc":"Pythonfunc","title":"Pythonfunc","hpath":"gcp-ts-serverless-raw.pythonfunc","content":"## Imported Assets\n\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-serverless-raw.pythonfunc.html","relUrl":"notes/gcp-ts-serverless-raw.pythonfunc.html"},{"doc":"Gofunc","title":"Gofunc","hpath":"gcp-ts-serverless-raw.gofunc","content":"## Imported Assets\n\n- [function.go](/assets/function.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-serverless-raw.gofunc.html","relUrl":"notes/gcp-ts-serverless-raw.gofunc.html"},{"doc":"Gcp Ts K8s Ruby on Rails Postgresql","title":"Gcp Ts K8s Ruby on Rails Postgresql","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql","content":"\n","url":"https://pulumi.dendron.so/notes/bb059119-fcf2-4569-ad60-d835009fbd58.html","relUrl":"notes/bb059119-fcf2-4569-ad60-d835009fbd58.html"},{"doc":"Scripts","title":"Scripts","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.scripts","content":"## Imported Assets\n\n- [migrate.sh](/assets/migrate.sh)\n- [setup.sh](/assets/setup.sh)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.scripts.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.scripts.html"},{"doc":"Infra","title":"Infra","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.infra","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [config.ts](/assets/config.ts)\n- [db.ts](/assets/db.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.infra.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.infra.html"},{"doc":"App","title":"App","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app","content":"# README\n\nThis README would normally document whatever steps are necessary to get the\napplication up and running.\n\nThings you may want to cover:\n\n- Ruby version\n\n- System dependencies\n\n- Configuration\n\n- Database creation\n\n- Database initialization\n\n- How to run the test suite\n\n- Services (job queues, cache servers, search engines, etc.)\n\n- Deployment instructions\n\n- ...\n\n* * *\n\n## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Gemfile](/assets/gemfile)\n- [Gemfile.lock](/assets/gemfile.lock)\n- [Rakefile](/assets/rakefile)\n- [config.ru](/assets/config.ru)\n- [package.json](/assets/package.json)\n- [start](/assets/start)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.html"},{"doc":"Test","title":"Test","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.test","content":"## Imported Assets\n\n- [application_system_test_case.rb](/assets/application_system_test_case.rb)\n- [test_helper.rb](/assets/test_helper.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.html"},{"doc":"System","title":"System","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.test.system","content":"## Imported Assets\n\n- [todo_lists_test.rb](/assets/todo_lists_test.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.system.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.system.html"},{"doc":"Models","title":"Models","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.test.models","content":"## Imported Assets\n\n- [todo_list_test.rb](/assets/todo_list_test.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.models.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.models.html"},{"doc":"Fixtures","title":"Fixtures","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.test.fixtures","content":"## Imported Assets\n\n- [todo_lists.yml](/assets/todo_lists.yml)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.fixtures.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.fixtures.html"},{"doc":"Controllers","title":"Controllers","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.test.controllers","content":"## Imported Assets\n\n- [todo_lists_controller_test.rb](/assets/todo_lists_controller_test.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.controllers.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.test.controllers.html"},{"doc":"Public","title":"Public","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.public","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [422.html](/assets/422.html)\n- [500.html](/assets/500.html)\n- [apple-touch-icon-precomposed.png](/assets/apple-touch-icon-precomposed.png)\n- [apple-touch-icon.png](/assets/apple-touch-icon.png)\n- [favicon.ico](/assets/favicon.ico)\n- [robots.txt](/assets/robots.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.public.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.public.html"},{"doc":"Db","title":"Db","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.db","content":"## Imported Assets\n\n- [seeds.rb](/assets/seeds.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.db.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.db.html"},{"doc":"Migrate","title":"Migrate","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.db.migrate","content":"## Imported Assets\n\n- [20181010202843_create_todo_lists.rb](/assets/20181010202843_create_todo_lists.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.db.migrate.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.db.migrate.html"},{"doc":"Config","title":"Config","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.config","content":"## Imported Assets\n\n- [application.rb](/assets/application.rb)\n- [boot.rb](/assets/boot.rb)\n- [cable.yml](/assets/cable.yml)\n- [credentials.yml.enc](/assets/credentials.enc)\n- [database.yml](/assets/database.yml)\n- [environment.rb](/assets/environment.rb)\n- [puma.rb](/assets/puma.rb)\n- [routes.rb](/assets/routes.rb)\n- [spring.rb](/assets/spring.rb)\n- [storage.yml](/assets/storage.yml)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.html"},{"doc":"Locales","title":"Locales","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.config.locales","content":"## Imported Assets\n\n- [en.yml](/assets/en.yml)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.locales.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.locales.html"},{"doc":"Initializers","title":"Initializers","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.config.initializers","content":"## Imported Assets\n\n- [application_controller_renderer.rb](/assets/application_controller_renderer.rb)\n- [assets.rb](/assets/assets.rb)\n- [backtrace_silencers.rb](/assets/backtrace_silencers.rb)\n- [content_security_policy.rb](/assets/content_security_policy.rb)\n- [cookies_serializer.rb](/assets/cookies_serializer.rb)\n- [filter_parameter_logging.rb](/assets/filter_parameter_logging.rb)\n- [inflections.rb](/assets/inflections.rb)\n- [mime_types.rb](/assets/mime_types.rb)\n- [wrap_parameters.rb](/assets/wrap_parameters.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.initializers.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.initializers.html"},{"doc":"Environments","title":"Environments","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.config.environments","content":"## Imported Assets\n\n- [development.rb](/assets/development.rb)\n- [production.rb](/assets/production.rb)\n- [test.rb](/assets/test.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.environments.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.config.environments.html"},{"doc":"App","title":"App","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app","content":"\n","url":"https://pulumi.dendron.so/notes/a8a12689-858f-4c2e-ae90-2a06dabe613e.html","relUrl":"notes/a8a12689-858f-4c2e-ae90-2a06dabe613e.html"},{"doc":"Views","title":"Views","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views","content":"\n","url":"https://pulumi.dendron.so/notes/b776e0da-99b2-4edd-8d47-0035555d1159.html","relUrl":"notes/b776e0da-99b2-4edd-8d47-0035555d1159.html"},{"doc":"Todo_lists","title":"Todo_lists","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.todo_lists","content":"## Imported Assets\n\n- [\\_form.html.erb](/assets/_form.erb)\n- [\\_todo_list.json.jbuilder](/assets/_todo_list.jbuilder)\n- [edit.html.erb](/assets/edit.erb)\n- [index.html.erb](/assets/index.erb)\n- [index.json.jbuilder](/assets/index.jbuilder)\n- [new.html.erb](/assets/new.erb)\n- [show.html.erb](/assets/show.erb)\n- [show.json.jbuilder](/assets/show.jbuilder)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.todo_lists.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.todo_lists.html"},{"doc":"Layouts","title":"Layouts","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.layouts","content":"## Imported Assets\n\n- [application.html.erb](/assets/application.erb)\n- [mailer.html.erb](/assets/mailer.erb)\n- [mailer.text.erb](/assets/mailer.erb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.layouts.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.views.layouts.html"},{"doc":"Models","title":"Models","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.models","content":"## Imported Assets\n\n- [application_record.rb](/assets/application_record.rb)\n- [todo_list.rb](/assets/todo_list.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.models.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.models.html"},{"doc":"Mailers","title":"Mailers","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.mailers","content":"## Imported Assets\n\n- [application_mailer.rb](/assets/application_mailer.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.mailers.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.mailers.html"},{"doc":"Jobs","title":"Jobs","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.jobs","content":"## Imported Assets\n\n- [application_job.rb](/assets/application_job.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.jobs.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.jobs.html"},{"doc":"Helpers","title":"Helpers","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.helpers","content":"## Imported Assets\n\n- [application_helper.rb](/assets/application_helper.rb)\n- [todo_lists_helper.rb](/assets/todo_lists_helper.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.helpers.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.helpers.html"},{"doc":"Controllers","title":"Controllers","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.controllers","content":"## Imported Assets\n\n- [application_controller.rb](/assets/application_controller.rb)\n- [todo_lists_controller.rb](/assets/todo_lists_controller.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.controllers.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.controllers.html"},{"doc":"Channels","title":"Channels","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.channels","content":"\n","url":"https://pulumi.dendron.so/notes/b16922a3-2102-4cd0-8136-dd61c8964b08.html","relUrl":"notes/b16922a3-2102-4cd0-8136-dd61c8964b08.html"},{"doc":"Application_cable","title":"Application_cable","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.channels.application_cable","content":"## Imported Assets\n\n- [channel.rb](/assets/channel.rb)\n- [connection.rb](/assets/connection.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.channels.application_cable.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.channels.application_cable.html"},{"doc":"Assets","title":"Assets","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets","content":"\n","url":"https://pulumi.dendron.so/notes/3595d33c-080d-4165-b215-ed5d2bc2dad7.html","relUrl":"notes/3595d33c-080d-4165-b215-ed5d2bc2dad7.html"},{"doc":"Stylesheets","title":"Stylesheets","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.stylesheets","content":"## Imported Assets\n\n- [application.css](/assets/application.css)\n- [scaffolds.scss](/assets/scaffolds.scss)\n- [todo_lists.scss](/assets/todo_lists.scss)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.stylesheets.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.stylesheets.html"},{"doc":"Javascripts","title":"Javascripts","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.javascripts","content":"## Imported Assets\n\n- [application.js](/assets/application.js)\n- [cable.js](/assets/cable.js)\n- [todo_lists.coffee](/assets/todo_lists.coffee)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.javascripts.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.javascripts.html"},{"doc":"Config","title":"Config","hpath":"gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.config","content":"## Imported Assets\n\n- [manifest.js](/assets/manifest.js)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.config.html","relUrl":"notes/gcp-ts-k8s-ruby-on-rails-postgresql.app.app.assets.config.html"},{"doc":"Gcp Ts Gke","title":"Gcp Ts Gke","hpath":"gcp-ts-gke","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) with a Canary Deployment\n\nThis example provisions a [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster, using\ninfrastructure-as-code, and then deploys a Kubernetes Deployment into it, to test that the cluster is working. This\ndemonstrates that you can manage both the Kubernetes objects themselves, in addition to underlying cloud infrastructure,\nusing a single configuration language (in this case, TypeScript), tool, and workflow.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Google Cloud Platform (GCP), so you will need an account. If you don't have an account,\n[sign up for free here](https://cloud.google.com/free/). In either case,\n[follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/) to connect Pulumi to your GCP account.\n\nThis example assumes that you have GCP's `gcloud` CLI on your path. This is installed as part of the\n[GCP SDK](https://cloud.google.com/sdk/).\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands. A GKE Kubernetes cluster will appear!\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init gcp-ts-gke-dev\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set gcp:project [your-gcp-project-here]\n   $ pulumi config set gcp:zone us-west1-a # any valid GCP zone here\n   $ pulumi config set password --secret [your-cluster-password-here]\n   ```\n\n   By default, your cluster will have 3 nodes of type `n1-standard-1`. This is configurable, however; for instance\n   if we'd like to choose 5 nodes of type `n1-standard-2` instead, we can run these commands:\n\n   ```bash\n   $ pulumi config set nodeCount 5\n   $ pulumi config set nodeMachineType n1-standard-2\n   $ pulumi config set masterVersion #any valid MasterVersion\n   ```\n\n   This shows how stacks can be configurable in useful ways. You can even change these after provisioning.\n\n3. Deploy everything with the `pulumi up` command. This provisions all the GCP resources necessary, including\n   your GKE cluster itself, and then deploys a Kubernetes Deployment running nginx, all in a single gesture:\n\n   ```bash\n   $ pulumi up\n   ```\n\n   This will show you a preview, ask for confirmation, and then chug away at provisioning your cluster:\n\n   ```\n   Updating stack 'gcp-ts-gke-dev'\n   Performing changes:\n\n        Type                            Name                       Plan       Info\n    +   pulumi:pulumi:Stack             gcp-ts-gke-gcp-ts-gke-dev  create\n    +   ├─ gcp:container:Cluster        gke-cluster                create\n    +   ├─ pulumi:providers:kubernetes  gkeK8s                     create\n    +   └─ kubernetes:apps:Deployment   canary                     create\n\n       ---outputs:---\n       kubeConfig: \"apiVersion: v1\\n...\"\n\n   info: 4 changes updated:\n       + 4 resources created\n   Update duration: 2m07.424737735s\n   ```\n\n   After about two minutes, your cluster will be ready, and its config will be printed.\n\n4. From here, you may take this config and use it either in your `~/.kube/config` file, or just by saving it\n   locally and plugging it into the `KUBECONFIG` envvar. All of your usual `gcloud` commands will work too, of course.\n\n   For instance:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get po\n   NAME                              READY     STATUS    RESTARTS   AGE\n   canary-n7wfhtrp-fdbfd897b-lrm58   1/1       Running   0          58s\n   ```\n\n5. At this point, you have a running cluster. Feel free to modify your program, and run `pulumi up` to redeploy changes.\n   The Pulumi CLI automatically detects what has changed and makes the minimal edits necessary to accomplish these\n   changes. This could be altering the existing chart, adding new GCP or Kubernetes resources, or anything, really.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-gke.html","relUrl":"notes/gcp-ts-gke.html"},{"doc":"Gcp Ts Gke Serviceaccount","title":"Gcp Ts Gke Serviceaccount","hpath":"gcp-ts-gke-serviceaccount","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) Cluster with Service Account\n\nThis example deploys an Google Cloud Platform (GCP) [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster, and deploys an example application that consumes a PubSub topic. The cluster has a secret which contains [Google Cloud Service Account Credentials](https://cloud.google.com/iam/docs/service-accounts)\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. Install a package manager for Node.js, such as [npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install).\n4. [Install Google Cloud SDK (`gcloud`)](https://cloud.google.com/sdk/docs/downloads-interactive)\n5. Configure GCP Auth\n\n   - Login using `gcloud`\n\n     ````\n     ```bash\n     $ gcloud auth login\n     $ gcloud config set project <YOUR_GCP_PROJECT_HERE>\n     $ gcloud auth application-default login\n     ```\n     ````\n\n     > Note: This auth mechanism is meant for inner loop developer\n     > workflows. If you want to run this example in an unattended service\n     > account setting, such as in CI/CD, please [follow instructions to\n     > configure your service account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/). The\n     > service account must have the role `Kubernetes Engine Admin` / `container.admin`.\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   This will initialize the Pulumi program in TypeScript.\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required GCP configuration variables:\n\n   This sets configuration options and default values for our cluster.\n\n   ```bash\n   $ pulumi config set gcp:project <YOUR_GCP_PROJECT_HERE>\n   $ pulumi config set gcp:zone us-west1-a     // any valid GCP Zone here\n   ```\n\n4. Set some optional configuration variables (note, these values are optional and have defaults set):\n\n   ```bash\n   $ pulumi config set name <NAME>\n   $ pulumi config set machineType n1-standard-1\n   ```\n\n5. Stand up the GKE cluster:\n\n   To preview and deploy changes, run `pulumi update` and select \"yes.\"\n\n   The `update` sub-command shows a preview of the resources that will be created\n   and prompts on whether to proceed with the deployment. Note that the stack\n   itself is counted as a resource, though it does not correspond\n   to a physical cloud resource.\n\n   You can also run `pulumi up --diff` to see and inspect the diffs of the\n   overall changes expected to take place.\n\n   Running `pulumi up` will deploy the GKE cluster. Note, provisioning a\n   new GKE cluster takes between 3-5 minutes.\n\n   ```bash\n\n   ```\n\n6. After 3-5 minutes, your cluster will be ready, and the kubeconfig YAML you'll use to connect to the cluster will\n   be available as an output.\n\n7. Access the Kubernetes Cluster using `kubectl`\n\n   To access your new Kubernetes cluster using `kubectl`, we need to setup the\n   `kubeconfig` file and download `kubectl`. We can leverage the Pulumi\n   stack output in the CLI, as Pulumi facilitates exporting these objects for us.\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ export KUBECONFIG=$PWD/kubeconfig\n   $ kubectl version\n   $ kubectl cluster-info\n   $ kubectl get nodes\n   ```\n\n8. Verify the pubsub example is working\n\n   The pubsub deployment should be running, you can check it by examining the logs:\n\n   ```bash\n   k logs -n pubsub -l appClass=pubsub\n   Pulling messages from Pub/Sub subscription...\n   ```\n\n9. Once you've finished, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-gke-serviceaccount.html","relUrl":"notes/gcp-ts-gke-serviceaccount.html"},{"doc":"Gcp Ts Gke Hello World","title":"Gcp Ts Gke Hello World","hpath":"gcp-ts-gke-hello-world","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) Cluster\n\nThis example deploys an Google Cloud Platform (GCP) [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster, and deploys a Kubernetes Namespace and Deployment of NGINX\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. Install a package manager for Node.js, such as [npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install).\n4. [Install Google Cloud SDK (`gcloud`)](https://cloud.google.com/sdk/docs/downloads-interactive)\n5. Configure GCP Auth\n\n   - Login using `gcloud`\n\n     ````\n     ```bash\n     $ gcloud auth login\n     $ gcloud config set project <YOUR_GCP_PROJECT_HERE>\n     $ gcloud auth application-default login\n     ```\n     ````\n\n     > Note: This auth mechanism is meant for inner loop developer\n     > workflows. If you want to run this example in an unattended service\n     > account setting, such as in CI/CD, please [follow instructions to\n     > configure your service account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/). The\n     > service account must have the role `Kubernetes Engine Admin` / `container.admin`.\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   This will initialize the Pulumi program in TypeScript.\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required GCP configuration variables:\n\n   This sets configuration options and default values for our cluster.\n\n   ```bash\n   $ pulumi config set gcp:project <YOUR_GCP_PROJECT_HERE>\n   $ pulumi config set gcp:zone us-west1-a     // any valid GCP Zone here\n   ```\n\n4. Stand up the GKE cluster:\n\n   To preview and deploy changes, run `pulumi update` and select \"yes.\"\n\n   The `update` sub-command shows a preview of the resources that will be created\n   and prompts on whether to proceed with the deployment. Note that the stack\n   itself is counted as a resource, though it does not correspond\n   to a physical cloud resource.\n\n   You can also run `pulumi up --diff` to see and inspect the diffs of the\n   overall changes expected to take place.\n\n   Running `pulumi up` will deploy the GKE cluster. Note, provisioning a\n   new GKE cluster takes between 3-5 minutes.\n\n   ```bash\n   $ pulumi update\n   Previewing update (gke-demo):\n\n   \tType                            Name                             Plan\n   +   pulumi:pulumi:Stack             gcp-ts-gke-hello-world-gke-demo  create\n   +   ├─ gcp:container:Cluster        helloworld                       create\n   +   ├─ pulumi:providers:kubernetes  helloworld                       create\n   +   ├─ kubernetes:core:Namespace    helloworld                       create\n   +   ├─ kubernetes:apps:Deployment   helloworld                       create\n   +   └─ kubernetes:core:Service      helloworld                       create\n\n   Resources:\n   \t+ 6 to create\n\n   Updating (gke-demo):\n\n   \tType                            Name                             Status\n   +   pulumi:pulumi:Stack             gcp-ts-gke-hello-world-gke-demo  created\n   +   ├─ gcp:container:Cluster        helloworld                       created\n   +   ├─ pulumi:providers:kubernetes  helloworld                       created\n   +   ├─ kubernetes:core:Namespace    helloworld                       created\n   +   ├─ kubernetes:apps:Deployment   helloworld                       created\n   +   └─ kubernetes:core:Service      helloworld                       created\n\n   Outputs:\n   \tclusterName    : \"helloworld-e1557dc\"\n   \tdeploymentName : \"helloworld-tlsr4sg5\"\n   \tkubeconfig     : \"<KUBECONFIG_CONTENTS>\"\n   \tnamespaceName  : \"helloworld-pz4u5kyq\"\n   \tserviceName    : \"helloworld-l61b5dby\"\n   \tservicePublicIP: \"35.236.26.151\"\n\n   Resources:\n   \t+ 6 created\n\n   Duration: 3m51s\n   ```\n\n5. After 3-5 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output.\n\n    As part of the update, you'll see some new objects in the output: a\n    `Namespace` in Kubernetes to deploy into, a `Deployment` resource for\n    the NGINX app, and a LoadBalancer `Service` to publicly access NGINX.\n\n    Pulumi understands which changes to a given cloud resource can be made\n    in-place, and which require replacement, and computes\n    the minimally disruptive change to achieve the desired state.\n\n   > **Note:** Pulumi auto-generates a suffix for all objects.\n   > See the [Pulumi Programming Model](https://www.pulumi.com/docs/intro/concepts/resources/#autonaming) for more info.\n   >\n   > ```\n   > clusterName    : \"helloworld-2a6de9a\"\n   > deploymentName : \"helloworld-tlsr4sg5\"\n   > kubeconfig     : \"<KUBECONFIG_CONTENTS>\"\n   > namespaceName  : \"helloworld-pz4u5kyq\"\n   > serviceName    : \"helloworld-l61b5dby\"\n   > servicePublicIP: \"35.236.26.151\"\n   > ```\n\n    If you visit the FQDN listed in `servicePublicIP` you should land on the\n    NGINX welcome page. Note, that it may take a minute or so for the\n    LoadBalancer to become active on GCP.\n\n6. Access the Kubernetes Cluster using `kubectl`\n\n   To access your new Kubernetes cluster using `kubectl`, we need to setup the\n   `kubeconfig` file and download `kubectl`. We can leverage the Pulumi\n   stack output in the CLI, as Pulumi facilitates exporting these objects for us.\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ export KUBECONFIG=$PWD/kubeconfig\n   $ export KUBERNETES_VERSION=1.11.6 && sudo curl -s -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && sudo chmod +x /usr/local/bin/kubectl\n\n   $ kubectl version\n   $ kubectl cluster-info\n   $ kubectl get nodes\n   ```\n\n   We can also use the stack output to query the cluster for our newly created Deployment:\n\n   ```bash\n   $ kubectl get deployment $(pulumi stack output deploymentName) --namespace=$(pulumi stack output namespaceName)\n   $ kubectl get service $(pulumi stack output serviceName) --namespace=$(pulumi stack output namespaceName)\n   ```\n\n   We can also create another NGINX Deployment into the `default` namespace using\n   `kubectl` natively:\n\n   ```bash\n   $ kubectl create deployment my-nginx --image=nginx\n   $ kubectl get pods\n   $ kubectl delete deployment my-nginx\n   ```\n\n   Of course, by doing so, resources are outside of Pulumi's purview, but this simply\n   demonstrates that all the `kubectl` commands you're used to will work.\n\n7. Experimentation\n\n   From here on, feel free to experiment. Simply making edits and running `pulumi up` afterwords, will incrementally update your stack.\n\n   ### Running Off-the-Shelf Guestbook YAML\n\n   For example, if you wish to pull existing Kubernetes YAML manifests into\n   Pulumi to aid in your transition, append the following code block to the existing\n   `index.ts` file and run `pulumi up`.\n\n   This is an example of how to create the standard Kubernetes Guestbook manifests in\n   Pulumi using the Guestbook YAML manifests. We take the additional steps of transforming\n   its properties to use the same Namespace and metadata labels that\n   the NGINX stack uses, and also make its frontend service use a\n   LoadBalancer typed Service to expose it publicly.\n\n   ```typescript\n   // Create resources for the Kubernetes Guestbook from its YAML manifests\n   const guestbook = new k8s.yaml.ConfigFile(\"guestbook\",\n       {\n           file: \"https://raw.githubusercontent.com/pulumi/pulumi-kubernetes/master/tests/sdk/nodejs/examples/yaml-guestbook/yaml/guestbook.yaml\",\n           transformations: [\n               (obj: any) => {\n                   // Do transformations on the YAML to use the same namespace and\n                   // labels as the NGINX stack above\n                   if (obj.metadata.labels) {\n                       obj.metadata.labels['appClass'] = namespaceName\n                   } else {\n                       obj.metadata.labels = appLabels\n                   }\n\n                   // Make the 'frontend' Service public by setting it to be of type\n                   // LoadBalancer\n                   if (obj.kind == \"Service\" && obj.metadata.name == \"frontend\") {\n                       if (obj.spec) {\n                           obj.spec.type = \"LoadBalancer\"\n                       }\n                   }\n               }\n           ],\n       },\n       {\n           providers: { \"kubernetes\": clusterProvider },\n       },\n   );\n\n   // Export the Guestbook public LoadBalancer endpoint\n   export const guestbookPublicIP =\n       guestbook.getResourceProperty(\"v1/Service\", \"frontend\", \"status\").apply(s => s.loadBalancer.ingress[0].ip);\n   ```\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-gke-hello-world.html","relUrl":"notes/gcp-ts-gke-hello-world.html"},{"doc":"Gcp Ts Functions","title":"Gcp Ts Functions","hpath":"gcp-ts-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions\n\nAn example of deploying an HTTP Google Cloud Function endpoint using TypeScript.\n\n## Prerequisites\n\n0. [Ensure you have the latest Node.js and NPM](https://nodejs.org/en/download/)\n1. [Install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi to access your GCP account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n\n## Running the App\n\n1. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n2. Create a new stack:\n\n   ```\n   $ pulumi stack init gcp-fn\n   ```\n\n3. Configure your GCP project and region:\n\n   ```\n   $ pulumi config set gcp:project <projectname> \n   $ pulumi config set gcp:region <region>\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 6 changes performed:\n       + 6 resources created\n   Update duration: 39.65130324s\n   ```\n\n5. Check the deployed function endpoint:\n\n   ```\n   $ pulumi stack output url\n   https://us-central1-pulumi-development.cloudfunctions.net/greeting-function-7f95447\n   $ curl \"$(pulumi stack output url)\"\n   Greetings from Google Cloud Functions!\n   ```\n\n6. Clean up your GCP and Pulumi resources:\n\n   ```\n   $ pulumi destroy\n   ...\n   $ pulumi stack rm\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-functions.html","relUrl":"notes/gcp-ts-functions.html"},{"doc":"Gcp Ts Docker Gcr Cloudrun","title":"Gcp Ts Docker Gcr Cloudrun","hpath":"gcp-ts-docker-gcr-cloudrun","content":"\n","url":"https://pulumi.dendron.so/notes/fa718c5d-a9b6-4f25-b1c7-25cf6ab6898c.html","relUrl":"notes/fa718c5d-a9b6-4f25-b1c7-25cf6ab6898c.html"},{"doc":"Docker Build Push Gcr","title":"Docker Build Push Gcr","hpath":"gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr.html","relUrl":"notes/gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr.html"},{"doc":"App","title":"App","hpath":"gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Gemfile](/assets/gemfile)\n- [Gemfile.lock](/assets/gemfile.lock)\n- [app.rb](/assets/app.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr.app.html","relUrl":"notes/gcp-ts-docker-gcr-cloudrun.docker-build-push-gcr.app.html"},{"doc":"Cloud Run Deploy","title":"Cloud Run Deploy","hpath":"gcp-ts-docker-gcr-cloudrun.cloud-run-deploy","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-docker-gcr-cloudrun.cloud-run-deploy.html","relUrl":"notes/gcp-ts-docker-gcr-cloudrun.cloud-run-deploy.html"},{"doc":"Gcp Ts Cloudrun","title":"Gcp Ts Cloudrun","hpath":"gcp-ts-cloudrun","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Run\n\nAn example of deploying a custom Docker image into Google Cloud Run service using TypeScript. Our image builds a simple HelloWorld web application in Ruby. You may change it to any language and runtime that can run on Linux and serve HTTP traffic.\n\n## Prerequisites\n\n1. [Ensure you have the latest Node.js and NPM](https://nodejs.org/en/download/)\n2. [Install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n3. [Configure Pulumi to access your GCP account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n4. [Install Docker](https://docs.docker.com/install/)\n5. Enable Docker to deploy to Google Container Registry with `gcloud auth configure-docker`\n\n## Running the App\n\n1. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n2. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n3. Configure your GCP project and region:\n\n   ```\n   $ pulumi config set gcp:project <projectname> \n   $ pulumi config set gcp:region <region>\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n       Type                       Name              Status      \n   +   pulumi:pulumi:Stack        gcp-cloudrun-dev  created     \n   +   ├─ docker:image:Image      ruby-app          created     \n   +   ├─ gcp:projects:Service    EnableCloudRun    created     \n   +   ├─ gcp:cloudrun:Service    hello             created     \n   +   ├─ gcp:cloudrun:Service    ruby              created     \n   +   ├─ gcp:cloudrun:IamMember  hello-everyone    created     \n   +   └─ gcp:cloudrun:IamMember  ruby-everyone     created     \n\n   Outputs:\n       helloUrl: \"https://hello-a28eea2-q1wszdxb2b-ew.a.run.app\"\n       rubyUrl : \"https://ruby-420a973-q1wszdxb2b-ew.a.run.app\"\n\n   Resources:\n       + 7 created\n\n   Duration: 3m37s\n   ```\n\n5. Check the deployed Cloud Run endpoint:\n\n   ```\n   $ curl \"$(pulumi stack output rubyUrl)\"\n   Hello Pulumi!\n   ```\n\n6. Clean up your GCP and Pulumi resources:\n\n   ```\n   $ pulumi destroy\n   ...\n   $ pulumi stack rm dev\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-cloudrun.html","relUrl":"notes/gcp-ts-cloudrun.html"},{"doc":"App","title":"App","hpath":"gcp-ts-cloudrun.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Gemfile](/assets/gemfile)\n- [Gemfile.lock](/assets/gemfile.lock)\n- [app.rb](/assets/app.rb)\n\n","url":"https://pulumi.dendron.so/notes/gcp-ts-cloudrun.app.html","relUrl":"notes/gcp-ts-cloudrun.app.html"},{"doc":"Gcp Py Webserver","title":"Gcp Py Webserver","hpath":"gcp-py-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Compute Engine\n\nStarting point for building the Pulumi web server sample in Google Cloud.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set gcp:project YOURGOOGLECLOUDPROJECT\n   $ pulumi config set gcp:zone us-central1-a\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up -y\n   Previewing update (dev):\n       Type                     Name                  Plan       Info\n   +   pulumi:pulumi:Stack      gcp-py-webserver-dev  create\n   +   ├─ gcp:compute:Address   address               create\n   +   ├─ gcp:compute:Network   network               create\n   +   ├─ gcp:compute:Firewall  firewall              create\n   +   └─ gcp:compute:Instance  instance              create\n\n   Updating (dev):\n       Type                     Name                  Status      Info\n   +   pulumi:pulumi:Stack      gcp-py-webserver-dev  created\n   +   ├─ gcp:compute:Address   address               created\n   +   ├─ gcp:compute:Network   network               created\n   +   ├─ gcp:compute:Firewall  firewall              created\n   +   └─ gcp:compute:Instance  instance              created\n\n   Outputs:\n       instanceIP  : \"35.188.118.61\"\n       instanceName: \"instance-91b70e1\"\n\n   Resources:\n       + 5 created\n\n   Duration: 1m51s\n   ```\n\n4. Curl the HTTP server:\n\n   ```\n   $ curl $(pulumi stack output instanceIP)\n   Hello, World!\n   ```\n\n5. SSH into the server:\n\n   ```\n   $ gcloud compute ssh $(pulumi stack output instanceName)\n   Warning: Permanently added 'compute.967481934451185713' (ECDSA) to the list of known hosts.\n\n   The programs included with the Debian GNU/Linux system are free software;\n   the exact distribution terms for each program are described in the\n   individual files in /usr/share/doc/*/copyright.\n\n   Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n   permitted by applicable law.\n   user@instance-8ad9bd8:~$\n   ```\n\n6. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-webserver.html","relUrl":"notes/gcp-py-webserver.html"},{"doc":"Gcp Py Serverless Raw","title":"Gcp Py Serverless Raw","hpath":"gcp-py-serverless-raw","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python and Go deployed\n\nThis example deploys two Google Cloud Functions. \"Hello World\" functions are implemented in Python and Go. Pulumi program is implemented in Python.\n\n```bash\n# Create and configure a new stack\n$ pulumi stack init testing\n$ pulumi config set gcp:project <your-gcp-project>\n$ pulumi config set gcp:region <gcp-region>\n\n# Preview and run the deployment\n$ pulumi up\nPreviewing changes:\n...\nPerforming changes:\n...\ninfo: 6 changes performed:\n    + 6 resources created\nUpdate duration: 1m14s\n\n# Test it out\n$ curl $(pulumi stack output python_endpoint)\n\"Hello World!\"\n$ curl $(pulumi stack output go_endpoint)\n\"Hello World!\"\n\n# Remove the app\n$ pulumi destroy\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-serverless-raw.html","relUrl":"notes/gcp-py-serverless-raw.html"},{"doc":"Pythonfunc","title":"Pythonfunc","hpath":"gcp-py-serverless-raw.pythonfunc","content":"## Imported Assets\n\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-serverless-raw.pythonfunc.html","relUrl":"notes/gcp-py-serverless-raw.pythonfunc.html"},{"doc":"Gofunc","title":"Gofunc","hpath":"gcp-py-serverless-raw.gofunc","content":"## Imported Assets\n\n- [function.go](/assets/function.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-serverless-raw.gofunc.html","relUrl":"notes/gcp-py-serverless-raw.gofunc.html"},{"doc":"Gcp Py Network Component","title":"Gcp Py Network Component","hpath":"gcp-py-network-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Network and Instance with ComponentResource\n\nThis example uses `pulumi.ComponentResource` as described [here](https://www.pulumi.com/docs/intro/concepts/resources/#components) \nto create a Google Cloud Network and instance.\n\nThe use of `pulumi.ComponentResource` demonstrates how multiple low-level resources \ncan be composed into a higher-level, reusable abstraction.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Google Cloud](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the Google Cloud project and region\n\n   ```bash\n   $ pulumi config set gcp:project proj-123456\n   $ pulumi config set gcp:region us-central1\n   ```\n\n3. Run `pulumi up` to preview and deploy the changes:\n\n   ```bash\n   $ pulumi up -y\n   Previewing update (dev):\n\n       Type                             Name                          Plan\n   +   pulumi:pulumi:Stack              gcp-py-network-component-dev  create\n   +   ├─ my:modules:Vpc                demo                          create\n   +   │  └─ gcp:compute:Network        demo                          create\n   +   │     ├─ gcp:compute:Subnetwork  demo-0                        create\n   +   │     ├─ gcp:compute:Subnetwork  demo-1                        create\n   +   │     ├─ gcp:compute:Router      demo                          create\n   +   │     └─ gcp:compute:RouterNat   demo                          create\n   +   └─ my:modules:Instance           demo                          create\n   +      ├─ gcp:compute:Address        demo-nginx                    create\n   +      ├─ gcp:compute:Firewall       demo-nginx                    create\n   +      └─ gcp:compute:Instance       demo-nginx                    create\n\n   Resources:\n       + 11 to create\n\n   Updating (dev):\n\n       Type                             Name                          Status\n   +   pulumi:pulumi:Stack              gcp-py-network-component-dev  created\n   +   ├─ my:modules:Vpc                demo                          created\n   +   │  └─ gcp:compute:Network        demo                          created\n   +   │     ├─ gcp:compute:Subnetwork  demo-0                        created\n   +   │     ├─ gcp:compute:Subnetwork  demo-1                        created\n   +   │     ├─ gcp:compute:Router      demo                          created\n   +   │     └─ gcp:compute:RouterNat   demo                          created\n   +   └─ my:modules:Instance           demo                          created\n   +      ├─ gcp:compute:Address        demo-nginx                    created\n   +      ├─ gcp:compute:Firewall       demo-nginx                    created\n   +      └─ gcp:compute:Instance       demo-nginx                    created\n\n   Outputs:\n       network  : \"demo-7a734d7\"\n       public_ip: \"34.66.58.210\"\n\n   Resources:\n       + 11 created\n\n   Duration: 46s\n\n   Permalink: https://app.pulumi.com/clstokes/gcp-py-network-component/dev/updates/10\n   ```\n\n4. Get the IP address of the newly-created instance from the stack's outputs: \n\n   ```bash\n   $ pulumi stack output public_ip\n   13.64.196.146\n   ```\n\n5. Check to see that your server is now running:\n\n   ```bash\n   $ curl http://$(pulumi stack output public_ip)\n   Powered by Pulumi!\n   ```\n\n6. Destroy the stack:\n\n   ```bash\n   $ pulumi destroy -y\n   Previewing destroy (dev):\n\n       Type                             Name                          Plan\n   -   pulumi:pulumi:Stack              gcp-py-network-component-dev  delete\n   -   ├─ my:modules:Vpc                demo                          delete\n   -   │  └─ gcp:compute:Network        demo                          delete\n   -   │     ├─ gcp:compute:RouterNat   demo                          delete\n   -   │     ├─ gcp:compute:Router      demo                          delete\n   -   │     ├─ gcp:compute:Subnetwork  demo-1                        delete\n   -   │     └─ gcp:compute:Subnetwork  demo-0                        delete\n   -   └─ my:modules:Instance           demo                          delete\n   -      ├─ gcp:compute:Firewall       demo-nginx                    delete\n   -      ├─ gcp:compute:Instance       demo-nginx                    delete\n   -      └─ gcp:compute:Address        demo-nginx                    delete\n\n   Outputs:\n   - network  : \"demo-7a734d7\"\n   - public_ip: \"34.66.58.210\"\n\n   Resources:\n       - 11 to delete\n\n   Destroying (dev):\n\n       Type                             Name                          Status\n   -   pulumi:pulumi:Stack              gcp-py-network-component-dev  deleted\n   -   ├─ my:modules:Vpc                demo                          deleted\n   -   │  └─ gcp:compute:Network        demo                          deleted\n   -   │     ├─ gcp:compute:RouterNat   demo                          deleted\n   -   │     ├─ gcp:compute:Router      demo                          deleted\n   -   │     ├─ gcp:compute:Subnetwork  demo-1                        deleted\n   -   │     └─ gcp:compute:Subnetwork  demo-0                        deleted\n   -   └─ my:modules:Instance           demo                          deleted\n   -      ├─ gcp:compute:Firewall       demo-nginx                    deleted\n   -      ├─ gcp:compute:Instance       demo-nginx                    deleted\n   -      └─ gcp:compute:Address        demo-nginx                    deleted\n\n   Outputs:\n   - network  : \"demo-7a734d7\"\n   - public_ip: \"34.66.58.210\"\n\n   Resources:\n       - 11 deleted\n\n   Duration: 4m40s\n\n   Permalink: https://app.pulumi.com/clstokes/gcp-py-network-component/dev/updates/11\n   The resources in the stack have been deleted, but the history and configuration associated with the stack are still maintained.\n   If you want to remove the stack completely, run 'pulumi stack rm dev'.\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [config.py](/assets/config.py)\n- [instance.py](/assets/instance.py)\n- [network.py](/assets/network.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-network-component.html","relUrl":"notes/gcp-py-network-component.html"},{"doc":"Gcp Py Instance Nginx","title":"Gcp Py Instance Nginx","hpath":"gcp-py-instance-nginx","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Nginx Server Using Compute Engine\n\nStarting point for building the Pulumi nginx server sample in Google Cloud Platform.\nThis example deploys two GCP virtual machines:\n\n- a virtual machine running nginx via a [startup script](https://cloud.google.com/compute/docs/startupscript)\n- a virtual machine running nginx via a Docker container with Google's \n  [Container-Optimized OS](https://cloud.google.com/container-optimized-os/docs)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init gcp-instance-nginx\n   ```\n\n2. Configure the project:\n\n   ```bash\n   $ export GOOGLE_PROJECT=YOURPROJECTID; export GOOGLE_REGION=asia-east1; export GOOGLE_ZONE=asia-east1-a;\n   $ export GOOGLE_CREDENTIALS=YOURGCPCREDENTIALS\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n       Type                     Name                    Plan       \n   +   pulumi:pulumi:Stack      gcp-instance-nginx-dev  create     \n   +   ├─ gcp:compute:Address   poc                     create     \n   +   ├─ gcp:compute:Network   poc                     create     \n   +   ├─ gcp:compute:Address   poc-container-instance  create     \n   +   ├─ gcp:compute:Firewall  poc                     create     \n   +   ├─ gcp:compute:Instance  poc                     create     \n   +   └─ gcp:compute:Instance  poc-container-instance  create     \n\n   Resources:\n       + 7 to create\n\n   Do you want to perform this update? yes\n   Updating (dev):\n       Type                     Name                    Status      \n   +   pulumi:pulumi:Stack      gcp-instance-nginx-dev  created     \n   +   ├─ gcp:compute:Address   poc                     created     \n   +   ├─ gcp:compute:Network   poc                     created     \n   +   ├─ gcp:compute:Address   poc-container-instance  created     \n   +   ├─ gcp:compute:Firewall  poc                     created     \n   +   ├─ gcp:compute:Instance  poc                     created     \n   +   └─ gcp:compute:Instance  poc-container-instance  created     \n\n   Outputs:\n       container_instance_external_ip: \"34.66.98.237\"\n       container_instance_name       : \"poc-container-instance-11dddc1\"\n       instance_external_ip          : \"35.192.222.243\"\n       instance_name                 : \"poc-4897b20\"\n\n   Resources:\n       + 7 created\n\n   Duration: 59s\n   ```\n\n4. Curl the HTTP server:\n\n   ```bash\n   $ curl $(pulumi stack output instance_external_ip)\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n   <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n       <head>\n           <title>Test Page for the Nginx HTTP Server on Fedora</title>\n           <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n           <style type=\"text/css\">\n               /*<![CDATA[*/\n               body {\n                   background-color: #fff;\n                   color: #000;\n                   font-size: 0.9em;\n                   font-family: sans-serif,helvetica;\n                   margin: 0;\n                   padding: 0;\n               }\n               :link {\n                   color: #c00;\n               }\n               :visited {\n                   color: #c00;\n               }\n               a:hover {\n                   color: #f50;\n               }\n               h1 {\n                   text-align: center;\n                   margin: 0;\n                   padding: 0.6em 2em 0.4em;\n                   background-color: #294172;\n                   color: #fff;\n                   font-weight: normal;\n                   font-size: 1.75em;\n                   border-bottom: 2px solid #000;\n               }\n               h1 strong {\n                   font-weight: bold;\n                   font-size: 1.5em;\n               }\n               h2 {\n                   text-align: center;\n                   background-color: #3C6EB4;\n                   font-size: 1.1em;\n                   font-weight: bold;\n                   color: #fff;\n                   margin: 0;\n                   padding: 0.5em;\n                   border-bottom: 2px solid #294172;\n               }\n               hr {\n                   display: none;\n               }\n               .content {\n                   padding: 1em 5em;\n               }\n               .alert {\n                   border: 2px solid #000;\n               }\n\n               img {\n                   border: 2px solid #fff;\n                   padding: 2px;\n                   margin: 2px;\n               }\n               a:hover img {\n                   border: 2px solid #294172;\n               }\n               .logos {\n                   margin: 1em;\n                   text-align: center;\n               }\n               /*]]>*/\n           </style>\n       </head>\n\n       <body>\n           <h1>Welcome to <strong>nginx</strong> on Fedora!</h1>\n\n           <div class=\"content\">\n               <p>This page is used to test the proper operation of the\n               <strong>nginx</strong> HTTP server after it has been\n               installed. If you can read this page, it means that the\n               web server installed at this site is working\n               properly.</p>\n\n               <div class=\"alert\">\n                   <h2>Website Administrator</h2>\n                   <div class=\"content\">\n                       <p>This is the default <tt>index.html</tt> page that\n                       is distributed with <strong>nginx</strong> on\n                       Fedora.  It is located in\n                       <tt>/usr/share/nginx/html</tt>.</p>\n\n                       <p>You should now put your content in a location of\n                       your choice and edit the <tt>root</tt> configuration\n                       directive in the <strong>nginx</strong>\n                       configuration file\n                       <tt>/etc/nginx/nginx.conf</tt>.</p>\n\n                   </div>\n               </div>\n\n               <div class=\"logos\">\n                   <a href=\"http://nginx.net/\"><img\n                       src=\"nginx-logo.png\"\n                       alt=\"[ Powered by nginx ]\"\n                       width=\"121\" height=\"32\" /></a>\n\n                   <a href=\"http://fedoraproject.org/\"><img\n                       src=\"poweredby.png\"\n                       alt=\"[ Powered by Fedora ]\"\n                       width=\"88\" height=\"31\" /></a>\n               </div>\n           </div>\n       </body>\n   </html>\n   ```\n\n5. Destroy the created resources:\n\n   ```bash\n   $ pulumi destroy\n   Previewing destroy (dev):\n       Type                     Name                    Plan       \n   -   pulumi:pulumi:Stack      gcp-instance-nginx-dev  delete     \n   -   ├─ gcp:compute:Firewall  poc                     delete     \n   -   ├─ gcp:compute:Instance  poc                     delete     \n   -   ├─ gcp:compute:Instance  poc-container-instance  delete     \n   -   ├─ gcp:compute:Address   poc-container-instance  delete     \n   -   ├─ gcp:compute:Network   poc                     delete     \n   -   └─ gcp:compute:Address   poc                     delete     \n\n   Outputs:\n   - container_instance_external_ip: \"34.66.98.237\"\n   - container_instance_name       : \"poc-container-instance-11dddc1\"\n   - instance_external_ip          : \"35.192.222.243\"\n   - instance_name                 : \"poc-4897b20\"\n\n   Resources:\n       - 7 to delete\n\n   Do you want to perform this destroy? yes\n   Destroying (dev):\n       Type                     Name                    Status      \n   -   pulumi:pulumi:Stack      gcp-instance-nginx-dev  deleted     \n   -   ├─ gcp:compute:Firewall  poc                     deleted     \n   -   ├─ gcp:compute:Instance  poc                     deleted     \n   -   ├─ gcp:compute:Instance  poc-container-instance  deleted     \n   -   ├─ gcp:compute:Network   poc                     deleted     \n   -   ├─ gcp:compute:Address   poc-container-instance  deleted     \n   -   └─ gcp:compute:Address   poc                     deleted     \n\n   Outputs:\n   - container_instance_external_ip: \"34.66.98.237\"\n   - container_instance_name       : \"poc-container-instance-11dddc1\"\n   - instance_external_ip          : \"35.192.222.243\"\n   - instance_name                 : \"poc-4897b20\"\n\n   Resources:\n       - 7 deleted\n\n   Duration: 3m9s\n   ```\n\n6. Destroy the stack:\n\n   ```bash\n   $ pulumi stack rm\n   This will permanently remove the 'gcp-instance-nginx' stack!\n   Please confirm that this is what you'd like to do by typing (\"gcp-instance-nginx\"): gcp-instance-nginx\n   Stack 'gcp-instance-nginx' has been removed!\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-instance-nginx.html","relUrl":"notes/gcp-py-instance-nginx.html"},{"doc":"Gcp Py Gke","title":"Gcp Py Gke","hpath":"gcp-py-gke","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) with a Canary Deployment\n\nThis example provisions a [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster, using\ninfrastructure-as-code, and then deploys a Kubernetes Deployment into it, to test that the cluster is working. This\ndemonstrates that you can manage both the Kubernetes objects themselves, in addition to underlying cloud infrastructure,\nusing a single configuration language (in this case, Python), tool, and workflow.\n\n## Prerequisites\n\nEnsure you have [Python 3](https://www.python.org/downloads/) and [the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Google Cloud Platform (GCP), so you will need an account. If you don't have an account,\n[sign up for free here](https://cloud.google.com/free/). In either case,\n[follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/) to connect Pulumi to your GCP account.\n\nThis example assumes that you have GCP's `gcloud` CLI on your path. This is installed as part of the\n[GCP SDK](https://cloud.google.com/sdk/).\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands. A GKE Kubernetes cluster will appear!\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set gcp:project [your-gcp-project-here]\n   $ pulumi config set gcp:zone us-west1-a # any valid GCP zone here\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ pulumi config set master_version #any valid master version\n   ```\n\n   By default, your cluster will have 3 nodes of type `n1-standard-1`. This is configurable, however; for instance\n   if we'd like to choose 5 nodes of type `n1-standard-2` instead, we can run these commands:\n\n   ```bash\n   $ pulumi config set node_count 5\n   $ pulumi config set node_machine_type n1-standard-2\n   ```\n\n   This shows how stacks can be configurable in useful ways. You can even change these after provisioning.\n\n3. Deploy everything with the `pulumi up` command. This provisions all the GCP resources necessary, including\n   your GKE cluster itself, and then deploys a Kubernetes Deployment running nginx, all in a single gesture:\n\n   ```bash\n   $ pulumi up\n   ```\n\n   This will show you a preview, ask for confirmation, and then chug away at provisioning your cluster:\n\n   ```\n   Updating stack 'gcp-ts-gke-dev'\n   Performing changes:\n\n        Type                            Name          Plan\n    +   pulumi:pulumi:Stack             gcp-py-dev    create\n    +   ├─ gcp:container:Cluster        gke-cluster   create\n    +   ├─ pulumi:providers:kubernetes  gkeK8s        create\n    +   └─ kubernetes:apps:Deployment   canary        create\n    +   └─ kubernetes:core:Service      ingress       create\n\n       ---outputs:---\n       kubeConfig: \"apiVersion: v1\\n...\"\n\n   info: 5 changes updated:\n       + 5 resources created\n   Update duration: 2m07.424737735s\n   ```\n\n   After about two minutes, your cluster will be ready, and its config will be printed.\n\n4. From here, you may take this config and use it either in your `~/.kube/config` file, or just by saving it\n   locally and plugging it into the `KUBECONFIG` envvar. All of your usual `gcloud` commands will work too, of course.\n\n   For instance:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get po\n   NAME                              READY     STATUS    RESTARTS   AGE\n   canary-n7wfhtrp-fdbfd897b-lrm58   1/1       Running   0          58s\n   ```\n\n5. At this point, you have a running cluster. Feel free to modify your program, and run `pulumi up` to redeploy changes.\n   The Pulumi CLI automatically detects what has changed and makes the minimal edits necessary to accomplish these\n   changes. This could be altering the existing chart, adding new GCP or Kubernetes resources, or anything, really.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-gke.html","relUrl":"notes/gcp-py-gke.html"},{"doc":"Gcp Py Functions","title":"Gcp Py Functions","hpath":"gcp-py-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python\n\nThis example shows how to deploy a Python-based Google Cloud Function.\n\nThe deployed Cloud Function allows you to notify a friend via SMS about how long it will take to\narrive at a location. This uses the Google Maps API and Twilio, and also benefits from using a\n[Flic button](https://flic.io) and [IFTTT](https://ifttt.com). But none of that is necessary to\nuse Pulumi to provision the Google Cloud Platform functions.\n\n## Creating the Stack\n\n1. Create a new stack:\n\n   ```bash\n   pulumi stack init gcp-py-functions\n   ```\n\n2. Configure GCP project and region:\n\n   ```bash\n   pulumi config set gcp:project <projectname>\n   pulumi config set gcp:region <region>\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 4 created\n   Duration: 1m2s\n   ```\n\nOnce the application is deployed, you can start accessing the Google Cloud Function by making an HTTP request to the function's endpoint. It is exported from the stack's as `fxn_url`.\n\n```bash\n$ pulumi stack output fxn_url\nhttps://us-central1-pulumi-gcp-dev.cloudfunctions.net/eta_demo_function...\n```\n\nYou can specify a starting location via latitude and longitude coordinates via URL query\nparameters. (You can find your current location on <https://www.latlong.net/>.)\n\n```bash\n$ curl \"$(pulumi stack output fxn_url)?lat=<YOUR_LATITUDE>&long=<YOUR_LONGITUDE>\"\nSent text message to...\n```\n\n## Configuration\n\n### Google Maps for Travel Time\n\nThe application uses the [Google Maps API](https://developers.google.com/maps/documentation/) to estimate travel time data. To set this up:\n\n1. Get a [Google Maps](https://cloud.google.com/maps-platform/) API key by clicking 'Get started'.\n\n   - Check the Routes and then click continue.\n   - Select the GCP project you are deploying your Cloud function to.\n\n2. Update the stack's configuration, encrypting the API key value:\n\n   ```bash\n   pulumi config set googleMapsApiKey <INSERT_API_KEY> --secret\n   ```\n\n3. Set the target destination to compute directions to:\n\n   ```bash\n   pulumi config set destination <DESTINATION>\n   ```\n\n4. (Optional) Add a travel time offset, e.g. add 5 minutes to the estimate.\n\n   ```bash\n   pulumi config set travelOffset <TRAVEL_OFFSET>\n   ```\n\n5. Run `pulumi up` to re-deploy your cloud function with the new configuration.\n\n### Twilio for SMS Notifications\n\nTo have the Cloud Function send a text message, you'll need to a Twilio key too:\n\n1. Log into your [Twilio](https://www.twilio.com/) account, and create a new access token\n   and/or phone number to send SMS messages from.\n\n2. Add the Twilio configuration data to your Pulumi stack:\n\n   ```bash\n   pulumi config set twillioAccessToken <TWILIO_ACCESS_TOKEN> --secret\n   pulumi config set twillioAccountSid <TWILIO_ACCOUNT_SID> --secret\n   pulumi config set fromPhoneNumber <FROM_PHONE_NUMBER>\n   ```\n\n3. Enter the phone number the Cloud Function will send messages to:\n\n   ```bash\n   pulumi config set toPhoneNumber <TO_PHONE_NUMBER> --secret\n   ```\n\n4. Run `pulumi up` to re-deploy your cloud function with the new configuration.\n\n### Flic Button to Trigger the Cloud Function\n\nWith Pulumi having setup the cloud infrastructure, the next step is to have a simple way to trigger\nit. With [Flic](https://flic.io) you can trigger the Cloud Function with literally the push\nof a button.\n\nTo make sure to include the button presser's location, you can use [IFTTT](https://ifttt.com).\n\n1. Install the Flic app on your phone and pair your button. Enable location services for the Flic app\n   and add an IFTTT for one of the click gestures.\n\n2. Create a new Applet on IFTTT: \"If You click a Flic, then Make a web request\"\n   - For \"If\" select the \"Flic\" service then \"Flic is clicked\".\n   - Select your Flic button and the appropriate gesture from the menu.\n   - For \"Then\" select the \"Make a web request\" service\n   - Under URL enter following (replace `<FUNCTION_URL>` with the value from `pulumi stack output fxn_url`): `<FUNCTION_URL>?long={{Longitude}}&lat={{Latitude}}`\n\nGet started on [Google Cloud](https://www.pulumi.com/docs/get-started/gcp/) with Pulumi today.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-functions.html","relUrl":"notes/gcp-py-functions.html"},{"doc":"Functions","title":"Functions","hpath":"gcp-py-functions.functions","content":"## Imported Assets\n\n- [main.py](/assets/main.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-functions.functions.html","relUrl":"notes/gcp-py-functions.functions.html"},{"doc":"Gcp Py Cloudrun Cloudsql","title":"Gcp Py Cloudrun Cloudsql","hpath":"gcp-py-cloudrun-cloudsql","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Deploy Cloud Run instance connected to Cloud SQL\n\nExample of starting a Cloud Run deployment with Cloud SQL instance\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set gcp:project YOURGOOGLECLOUDPROJECT\n   $ pulumi config set gcp:region europe-west1\n   $ pulumi config set db-name project-db\n   $ pulumi config set --secret db-password SuuperSecret12345!\n   ```\n\n3. Preview and deploy changes:\n   ```\n   $ pulumi up\n   ```\n\n4. Curl the Cloud Run:\n\n   ```\n   $ curl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $(pulumi stack output cloud_run_url)\n   ```\n\n5. Access the database:\n\n   ```\n   $ gcloud sql connect $(pulumi stack output cloud_sql_instance_name) -u $(pulumi config get db-name) --project $(pulumi config get gcp:project)\n   ```\n\n6. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/gcp-py-cloudrun-cloudsql.html","relUrl":"notes/gcp-py-cloudrun-cloudsql.html"},{"doc":"Gcp JS Webserver","title":"Gcp JS Webserver","hpath":"gcp-js-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Compute Engine\n\nStarting point for building the Pulumi web server sample in Google Cloud.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init webserver-gcp-testing\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set gcp:project YOURGOOGLECLOUDPROJECT\n   $ pulumi config set gcp:zone us-central1-a\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n\n       Type                     Name                                 Status      Info\n   +   pulumi:pulumi:Stack      webserver-gcp-webserver-gcp-testing  created\n   +   ├─ gcp:compute:Network   network                              created\n   +   ├─ gcp:compute:Firewall  firewall                             created\n   +   └─ gcp:compute:Instance  instance                             created\n\n   ---outputs:---\n   instanceIP  : \"35.224.37.178\"\n   instanceName: \"instance-8ad9bd8\"\n\n   info: 4 changes performed:\n       + 4 resources created\n   Update duration: 57.918455655s\n   ```\n\n5. Curl the HTTP server:\n\n   ```\n   $ curl $(pulumi stack output instanceIP)\n   Hello, World!\n   ```\n\n6. SSH into the server:\n\n   ```\n   $ gcloud compute ssh $(pulumi stack output instanceName)\n   Warning: Permanently added 'compute.967481934451185713' (ECDSA) to the list of known hosts.\n\n   The programs included with the Debian GNU/Linux system are free software;\n   the exact distribution terms for each program are described in the\n   individual files in /usr/share/doc/*/copyright.\n\n   Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n   permitted by applicable law.\n   luke@instance-8ad9bd8:~$\n   ```\n\n7. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/gcp-js-webserver.html","relUrl":"notes/gcp-js-webserver.html"},{"doc":"Gcp Go Webserver","title":"Gcp Go Webserver","hpath":"gcp-go-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Compute Engine\n\nStarting point for building the Pulumi web server sample in Google Cloud.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init webserver-gcp-testing\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set gcp:project YOURGOOGLECLOUDPROJECT\n   $ pulumi config set gcp:zone us-central1-a\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n\n       Type                     Name                                 Status      Info\n   +   pulumi:pulumi:Stack      webserver-gcp-webserver-gcp-testing  created\n   +   ├─ gcp:compute:Network   network                              created\n   +   ├─ gcp:compute:Firewall  firewall                             created\n   +   └─ gcp:compute:Instance  instance                             created\n\n   ---outputs:---\n   instanceIP  : \"35.185.200.158\"\n   instanceName: \"instance-af7e53b\"\n\n   info: 4 changes performed:\n       + 4 resources created\n   Update duration: 1m23s\n   ```\n\n5. Curl the HTTP server:\n\n   ```\n   $ curl $(pulumi stack output instanceIP)\n   Hello, World!\n   ```\n\n6. SSH into the server:\n\n   ```\n   $ gcloud compute ssh $(pulumi stack output instanceName)\n   Warning: Permanently added 'compute.4281826686797606751' (ECDSA) to the list of known hosts.\n\n   The programs included with the Debian GNU/Linux system are free software;\n   the exact distribution terms for each program are described in the\n   individual files in /usr/share/doc/*/copyright.\n\n   Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n   permitted by applicable law.\n   albert@instance-af7e53b:~$\n   ```\n\n7. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-webserver.html","relUrl":"notes/gcp-go-webserver.html"},{"doc":"Gcp Go Instance","title":"Gcp Go Instance","hpath":"gcp-go-instance","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# GCP Instance\n\nCreate a GCP instance using Pulumi + Go.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init gcp-instance\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set gcp:project YOURGOOGLECLOUDPROJECT\n   $ pulumi config set gcp:zone us-central1-a\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (gcp-instance):\n   ...\n\n   Updating (gcp-instance):\n       Type                     Name       Status      \n   +   pulumi:pulumi:Stack      gcp-instance  created     \n   +   └─ gcp:compute:Instance  instance   created     \n\n   Outputs:\n       instanceName: \"instance-6beb431\"\n\n   Resources:\n       + 2 created\n\n   Duration: 23s\n   ```\n\n4. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-instance.html","relUrl":"notes/gcp-go-instance.html"},{"doc":"Gcp Go Gke","title":"Gcp Go Gke","hpath":"gcp-go-gke","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) Cluster\n\nThis example deploys a Google Cloud Platform (GCP) [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster and\nan application to it\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Go 1.13 or later](https://golang.org/doc/install)\n3. [Install Google Cloud SDK (`gcloud`)](https://cloud.google.com/sdk/docs/downloads-interactive)\n4. Configure GCP Auth\n\n   - Login using `gcloud`\n\n     ````\n     ```bash\n     $ gcloud auth login\n     $ gcloud config set project <YOUR_GCP_PROJECT_HERE>\n     $ gcloud auth application-default login\n     ```\n     ````\n\n     > Note: This auth mechanism is meant for inner loop developer\n     > workflows. If you want to run this example in an unattended service\n     > account setting, such as in CI/CD, please [follow instructions to\n     > configure your service account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/). The\n     > service account must have the role `Kubernetes Engine Admin` / `container.admin`.\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   This will initialize the Pulumi program in Golang.\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required GCP configuration variables:\n\n   This sets configuration options and default values for our cluster.\n\n   ```bash\n   $ pulumi config set gcp:project <YOUR_GCP_PROJECT_HERE>\n   $ pulumi config set gcp:zone us-west1-a     // any valid GCP Zone here\n   ```\n\n3. Stand up the GKE cluster:\n\n   To preview and deploy changes, run `pulumi update` and select \"yes.\"\n\n   The `update` sub-command shows a preview of the resources that will be created\n   and prompts on whether to proceed with the deployment. Note that the stack\n   itself is counted as a resource, though it does not correspond\n   to a physical cloud resource.\n\n   You can also run `pulumi up --diff` to see and inspect the diffs of the\n   overall changes expected to take place.\n\n   Running `pulumi up` will deploy the GKE cluster. Note, provisioning a\n   new GKE cluster takes between 3-5 minutes.\n\n   ```bash\n   $ pulumi update\n   Previewing update (dev):\n\n       Type                      Name            Plan\n   +   pulumi:pulumi:Stack       gcp-go-gke-dev  create\n   +   └─ gcp:container:Cluster  helloworld      create\n\n   Resources:\n       + 2 to create\n\n   Updating (dev):\n\n       Type                      Name            Plan\n   +   pulumi:pulumi:Stack       gcp-go-gke-dev  created\n   +   └─ gcp:container:Cluster  helloworld      created\n\n   Outputs:\n       ClusterName: \"helloworld-9b9530f\"\n       KubeConfig : \"<KUBECONFIG_CONTENTS>\"\n\n   Resources:\n       + 2 created\n\n   Duration: 3m3s\n   ```\n\n4. After 3-5 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output.\n\n5. Access the Kubernetes Cluster using `kubectl`\n\n   To access your new Kubernetes cluster using `kubectl`, we need to setup the\n   `kubeconfig` file and download `kubectl`. We can leverage the Pulumi\n   stack output in the CLI, as Pulumi facilitates exporting these objects for us.\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ export KUBECONFIG=$PWD/kubeconfig\n\n   $ kubectl version\n   $ kubectl cluster-info\n   $ kubectl get nodes\n   ```\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-gke.html","relUrl":"notes/gcp-go-gke.html"},{"doc":"Gcp Go Functions","title":"Gcp Go Functions","hpath":"gcp-go-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python deployed with Go\n\nThis example deploys a Google Cloud Function implemented in Go. Pulumi program is also implemented in Go.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for GCP](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n   - [Set up a Service Account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/service-account/)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Set the GCP project and region:\n\n   ```bash\n   pulumi config set gcp:project <gcp-project>\n   pulumi config set gcp:region <gcp-region>\n   ```\n\n3. Execute the pulumi program to deploy our function:\n\n   ```bash\n   pulumi up\n   ```\n\n4. Test our function by curl-ing the trigger URL.\n\n   ```bash\n   curl $(pulumi stack output function)\n   # \"Hello World!\"\n   ```\n\n5. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your function.\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-functions.html","relUrl":"notes/gcp-go-functions.html"},{"doc":"Gofunc","title":"Gofunc","hpath":"gcp-go-functions.gofunc","content":"## Imported Assets\n\n- [function.go](/assets/function.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-functions.gofunc.html","relUrl":"notes/gcp-go-functions.gofunc.html"},{"doc":"Gcp Go Functions Raw","title":"Gcp Go Functions Raw","hpath":"gcp-go-functions-raw","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python deployed with Go\n\nThis example deploys a Google Cloud Function implemented in Python. Pulumi program is implemented in Go.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for GCP](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n   - [Set up a Service Account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/service-account/)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Set the GCP project and region:\n\n   ```bash\n   pulumi config set gcp:project <gcp-project>\n   pulumi config set gcp:region <gcp-region>\n   ```\n\n3. Execute the pulumi program to deploy our function:\n\n   ```bash\n   pulumi up\n   ```\n\n4. Test our function by curl-ing the trigger URL.\n\n   ```bash\n   curl $(pulumi stack output function)\n   # \"Hello World!\"\n   ```\n\n5. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your function.\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-functions-raw.html","relUrl":"notes/gcp-go-functions-raw.html"},{"doc":"Pythonfunc","title":"Pythonfunc","hpath":"gcp-go-functions-raw.pythonfunc","content":"## Imported Assets\n\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/gcp-go-functions-raw.pythonfunc.html","relUrl":"notes/gcp-go-functions-raw.pythonfunc.html"},{"doc":"Gcp Cs Gke","title":"Gcp Cs Gke","hpath":"gcp-cs-gke","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Kubernetes Engine (GKE) Cluster\n\nThis example deploys an Google Cloud Platform (GCP) [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/) cluster using CSharp.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n3. [Install Google Cloud SDK (`gcloud`)](https://cloud.google.com/sdk/docs/downloads-interactive)\n4. Configure GCP Auth\n\n   - Login using `gcloud`\n\n     ````\n     ```bash\n     $ gcloud auth login\n     $ gcloud config set project <YOUR_GCP_PROJECT_HERE>\n     $ gcloud auth application-default login\n     ```\n     ````\n\n     > Note: This auth mechanism is meant for inner loop developer\n     > workflows. If you want to run this example in an unattended service\n     > account setting, such as in CI/CD, please [follow instructions to\n     > configure your service account](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/). The\n     > service account must have the role `Kubernetes Engine Admin` / `container.admin`.\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   This will initialize the Pulumi program in TypeScript.\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required GCP configuration variables:\n\n   This sets configuration options and default values for our cluster.\n\n   ```bash\n   $ pulumi config set gcp:project <YOUR_GCP_PROJECT_HERE>\n   $ pulumi config set gcp:zone us-west1-a     // any valid GCP Zone here\n   ```\n\n3. Stand up the GKE cluster:\n\n   To preview and deploy changes, run `pulumi update` and select \"yes.\"\n\n   The `update` sub-command shows a preview of the resources that will be created\n   and prompts on whether to proceed with the deployment. Note that the stack\n   itself is counted as a resource, though it does not correspond\n   to a physical cloud resource.\n\n   You can also run `pulumi up --diff` to see and inspect the diffs of the\n   overall changes expected to take place.\n\n   Running `pulumi up` will deploy the GKE cluster. Note, provisioning a\n   new GKE cluster takes between 3-5 minutes.\n\n   ```bash\n   $ pulumi update\n   Previewing update (dev):\n\n       Type                      Name            Plan\n   +   pulumi:pulumi:Stack       gcp-cs-gke-dev  create\n   +   └─ gcp:container:Cluster  helloworld      create\n\n   Resources:\n       + 2 to create\n\n   Updating (dev):\n\n       Type                      Name            Plan\n   +   pulumi:pulumi:Stack       gcp-cs-gke-dev  created\n   +   └─ gcp:container:Cluster  helloworld      created\n\n   Outputs:\n       ClusterName: \"helloworld-9b9530f\"\n       KubeConfig : \"<KUBECONFIG_CONTENTS>\"\n\n   Resources:\n       + 2 created\n\n   Duration: 3m3s\n   ```\n\n4. After 3-5 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output.\n\n5. Access the Kubernetes Cluster using `kubectl`\n\n   To access your new Kubernetes cluster using `kubectl`, we need to setup the\n   `kubeconfig` file and download `kubectl`. We can leverage the Pulumi\n   stack output in the CLI, as Pulumi facilitates exporting these objects for us.\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ export KUBECONFIG=$PWD/kubeconfig\n\n   $ kubectl version\n   $ kubectl cluster-info\n   $ kubectl get nodes\n   ```\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Gcp.Gke.csproj](/assets/gcp.csproj)\n- [KubernetesStack.cs](/assets/kubernetesstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/gcp-cs-gke.html","relUrl":"notes/gcp-cs-gke.html"},{"doc":"Gcp Cs Functions","title":"Gcp Cs Functions","hpath":"gcp-cs-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Google Cloud Functions in Python deployed with C#\n\nThis example deploys a Google Cloud Function implemented in Python. Pulumi program is implemented in C#.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for GCP](https://www.pulumi.com/docs/intro/cloud-providers/gcp/setup/)\n3. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Set the GCP project and region:\n\n   ```\n   $ pulumi config set gcp:project <your-gcp-project>\n   $ pulumi config set gcp:region <gcp-region>\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 45s\n   ```\n\n4. Check the deployed function endpoints:\n\n   ```\n   $ pulumi stack output PythonEndpoint\n   https://us-central1-test-1234.cloudfunctions.net/python-func-742a512\n   $ curl \"$(pulumi stack output PythonEndpoint)\"\n   Hello World!\n   ```\n\n5. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [FunctionsStack.cs](/assets/functionsstack.cs)\n- [GCP.Functions.csproj](/assets/gcp.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/gcp-cs-functions.html","relUrl":"notes/gcp-cs-functions.html"},{"doc":"Pythonfunc","title":"Pythonfunc","hpath":"gcp-cs-functions.pythonfunc","content":"## Imported Assets\n\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/gcp-cs-functions.pythonfunc.html","relUrl":"notes/gcp-cs-functions.pythonfunc.html"},{"doc":"F5bigip Ts Ltm Pool","title":"F5bigip Ts Ltm Pool","hpath":"f5bigip-ts-ltm-pool","content":"\n","url":"https://pulumi.dendron.so/notes/d9780e52-6417-4476-b435-426ff4e31158.html","relUrl":"notes/d9780e52-6417-4476-b435-426ff4e31158.html"},{"doc":"Nginx Ec2 Instance","title":"Nginx Ec2 Instance","hpath":"f5bigip-ts-ltm-pool.nginx-ec2-instance","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new?template=https://github.com/pulumi/examples/tree/master/f5bigip-ts-ltm-pool/nginx-ec2-instance/)\n\n# Provision Backend NGINX Instances\n\nNote: This application is **_optional_** and only necessary to run if you do not already have existing\nbackend application servers to load balance _to_.\n\nPlease see instructions at [(Optional) Provision Backend NGINX Instances](../README.md#optional-provision-backend-nginx-instances).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/f5bigip-ts-ltm-pool.nginx-ec2-instance.html","relUrl":"notes/f5bigip-ts-ltm-pool.nginx-ec2-instance.html"},{"doc":"F5bigip Pool","title":"F5bigip Pool","hpath":"f5bigip-ts-ltm-pool.f5bigip-pool","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new?template=https://github.com/pulumi/examples/tree/master/f5bigip-ts-ltm-pool/f5bigip-pool)\n\n# Provision F5 BigIP Application Pool Resources\n\nPlease see instructions at [Provision F5 BigIP Application Pool Resources](../README.md#provision-f5-bigip-application-pool-resources).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/f5bigip-ts-ltm-pool.f5bigip-pool.html","relUrl":"notes/f5bigip-ts-ltm-pool.f5bigip-pool.html"},{"doc":"F5bigip Ec2 Instance","title":"F5bigip Ec2 Instance","hpath":"f5bigip-ts-ltm-pool.f5bigip-ec2-instance","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new?template=https://github.com/pulumi/examples/tree/master/f5bigip-ts-ltm-pool/f5bigip-ec2-instance)\n\n# Provision an F5 BigIP appliance on AWS\n\nNote: This application is **_optional_** and only necessary to run if you do not already have an existing \nF5 BigIP appliance to use.\n\nPlease see instructions at [(Optional) Provision an F5 BigIP appliance on AWS](../README.md#optional-provision-an-f5-bigip-appliance-on-aws).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/f5bigip-ts-ltm-pool.f5bigip-ec2-instance.html","relUrl":"notes/f5bigip-ts-ltm-pool.f5bigip-ec2-instance.html"},{"doc":"Equinix Metal Ts Webserver","title":"Equinix Metal Ts Webserver","hpath":"equinix-metal-ts-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Equinix Metal Webserver\n\nThis example demonstrates creating a webserver in Equinix Metal\n\n# Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Install all of the dependencies for the application:\n\n   ```bash\n   $ npm install\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions the webserver:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your webserver will be ready.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + ip  : \"147.75.65.213\"\n     + name: \"new-vervet\"\n   ```\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/equinix-metal-ts-webserver.html","relUrl":"notes/equinix-metal-ts-webserver.html"},{"doc":"Equinix Metal Py Webserver","title":"Equinix Metal Py Webserver","hpath":"equinix-metal-py-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Equinix Metal Webserver\n\nThis example demonstrates creating a webserver in Equinix Metal with Python\n\n# Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Install all of the dependencies for the application:\n\n3. Deploy everything with the `pulumi up` command. This provisions the webserver:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your webserver will be ready.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + ip  : \"147.75.65.213\"\n     + name: \"new-vervet\"\n   ```\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/equinix-metal-py-webserver.html","relUrl":"notes/equinix-metal-py-webserver.html"},{"doc":"Digitalocean Ts Loadbalanced Droplets","title":"Digitalocean Ts Loadbalanced Droplets","hpath":"digitalocean-ts-loadbalanced-droplets","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Pulumi DigitalOcean Droplets\n\nStarting point for building a Pulumi sample architecture on DigitalOcean.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init digitalocean-ts-loadbalanced-droplets\n   ```\n\n2. Configure the project:\n\n   ```\n   $ pulumi config set --secret digitalocean:token YOURDIGITALOCEANTOKEN\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (digitalocean-ts-loadbalanced-droplets):\n   ...\n   ```\n\nUpdating (digitalocean-ts-loadbalanced-droplets):\n\n```\n Type                                Name                                                                         Status\n```\n\n- pulumi:pulumi:Stack                 digitalocean-ts-loadbalanced-droplets-digitalocean-ts-loadbalanced-droplets  created\n- ├─ digitalocean:index:Tag           demo-app                                                                     created\n- ├─ digitalocean:index:Tag           web-2                                                                        created\n- ├─ digitalocean:index:Tag           web-0                                                                        created\n- ├─ digitalocean:index:Tag           web-1                                                                        created\n- ├─ digitalocean:index:LoadBalancer  public                                                                       created\n- ├─ digitalocean:index:Droplet       web-0                                                                        created\n- ├─ digitalocean:index:Droplet       web-2                                                                        created\n- └─ digitalocean:index:Droplet       web-1                                                                        created\n\nOutputs:\n    endpoint: \"138.197.62.183\"\n\nResources:\n\n```\n+ 9 created\n```\n\nDuration: 3m2s\n\n````\n```\n````\n\n1. Curl the HTTP server:\n\n   ```\n   curl \"$(pulumi stack output endpoint)\"\n   ```\n\n2. Cleanup\n\n   ```\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-ts-loadbalanced-droplets.html","relUrl":"notes/digitalocean-ts-loadbalanced-droplets.html"},{"doc":"Digitalocean Ts K8s","title":"Digitalocean Ts K8s","hpath":"digitalocean-ts-k8s","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# DigitalOcean Kubernetes Cluster and Application\n\nThis example provisions a new DigitalOcean Kubernetes cluster, deploys a load-balanced application into it, and then optionally configures DigitalOcean DNS records to give the resulting application a stable domain-based URL.\n\n## Deploying the Example\n\n### Prerequisites\n\nTo follow this example, you will need:\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Register for a DigitalOcean Account](https://cloud.digitalocean.com/registrations/new)\n3. [Generate a DigitalOcean personal access token](https://www.digitalocean.com/docs/api/create-personal-access-token/)\n4. [Install `kubectl` for accessing your cluster](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n\nIf you want to configure the optional DigitalOcean DNS records at the end, you will also need:\n\n1. Obtain a domain name and [configure it to use DigitalOcean nameservers](https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n3. Configure Pulumi to use your DigitalOcean personal access token:\n\n   ```bash\n   $ pulumi config set digitalocean:token <YOUR_TOKEN_HERE> --secret\n   ```\n\n4. (Optional) If you wish to use a custom domain name, configure it now:\n\n   ```bash\n   $ pulumi config set domainName <YOUR_DOMAIN_NAME>\n   ```\n\n5. Deploy your cluster, application, and optional DNS records by running `pulumi up`.\n\n   This command shows a preview of the resources that will be created and asks you\n   whether to proceed with the deployment. Select \"yes\" to perform the deployment.\n\n   ```bash\n   $ pulumi up\n   Updating (dev):\n\n        Type                                     Name        Status\n    +   pulumi:pulumi:Stack                      do-k8s-dev  created\n    +   └─ digitalocean:index:KubernetesCluster  do-cluster  created\n    +   ├─ pulumi:providers:kubernetes           do-k8s      created\n    +   ├─ kubernetes:apps:Deployment            do-app-dep  created\n    +   └─ kubernetes:core:Service               do-app-svc  created\n    +   ├─ digitalocean:index:Domain             do-domain        created\n    +   └─ digitalocean:index:DnsRecord          do-domain-cname  created\n\n   Outputs:\n    + kubeconfig: \"...\"\n    + ingressIp : \"157.230.199.202\"\n\n   Resources:\n       + 7 created\n\n   Duration: 6m5s\n\n   Permalink: https://app.pulumi.com/.../do-k8s/dev/updates/1\n   ```\n\n   Note that the entire deployment will typically take between 4-8 minutes.\n\n   As part of the update, you'll see some new objects in the output, including\n   a `Deployment` resource for the NGINX app, and a LoadBalancer `Service` to\n   publicly access NGINX, for example.\n\n6. After 3-5 minutes, your cluster will be ready, and the kubeconfig JSON you'll\n   use to connect to the cluster will be available as an output.\n\n   To access your cluster, save your `kubeconfig` stack output to a file and then\n   use that when running the `kubectl` command. For instance, this lists your pods:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ KUBECONFIG=./kubeconfig kubectl get pods\n   ```\n\n7. Pulumi understands which changes to a given cloud resource can be made in-place,\n   and which require replacement, and computes the minimally disruptive change to\n   achieve the desired state. Let's make a small change:\n\n   ```bash\n   $ pulumi config set appReplicaCount 7\n   ```\n\n   And then rerun `pulumi up`. Notice that it shows the preview of the changes,\n   including a diff of the values changed. Select \"yes\" to perform the update.\n\n8. From here, feel free to experiment a little bit. Once you've finished experimenting,\n   tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n   This not only removes the underlying DigitalOcean cloud resources, but also\n   deletes the stack and its history from Pulumi also.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-ts-k8s.html","relUrl":"notes/digitalocean-ts-k8s.html"},{"doc":"Digitalocean Py Loadbalanced Droplets","title":"Digitalocean Py Loadbalanced Droplets","hpath":"digitalocean-py-loadbalanced-droplets","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Pulumi DigitalOcean Droplets\n\nStarting point for building a Pulumi sample architecture on DigitalOcean.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init digitalocean-ts-loadbalanced-droplets\n   ```\n\n2. Configure the project:\n\n   ```bash\n   $ pulumi config set --secret digitalocean:token YOURDIGITALOCEANTOKEN\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (digitalocean-ts-loadbalanced-droplets):\n   ...\n   ```\n\nUpdating (digitalocean-ts-loadbalanced-droplets):\n\n```\n Type                              Name                                                                         Status\n```\n\n- pulumi:pulumi:Stack                 digitalocean-ts-loadbalanced-droplets-digitalocean-ts-loadbalanced-droplets  created\n- ├─ digitalocean:index:Tag           demo-app                                                                     created\n- ├─ digitalocean:index:Tag           web-2                                                                        created\n- ├─ digitalocean:index:Tag           web-0                                                                        created\n- ├─ digitalocean:index:Tag           web-1                                                                        created\n- ├─ digitalocean:index:LoadBalancer  public                                                                       created\n- ├─ digitalocean:index:Droplet       web-0                                                                        created\n- ├─ digitalocean:index:Droplet       web-2                                                                        created\n- └─ digitalocean:index:Droplet       web-1                                                                        created\n\nOutputs:\n    endpoint: \"138.197.62.183\"\n\nResources:\n\n```\n+ 9 created\n```\n\nDuration: 3m2s\n\n````\n```\n````\n\n1. Curl the HTTP server:\n\n   ```bash\n   curl \"$(pulumi stack output endpoint)\"\n   ```\n\n2. Cleanup\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-py-loadbalanced-droplets.html","relUrl":"notes/digitalocean-py-loadbalanced-droplets.html"},{"doc":"Digitalocean Py K8s","title":"Digitalocean Py K8s","hpath":"digitalocean-py-k8s","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# DigitalOcean Kubernetes Cluster and Application\n\nThis example provisions a new DigitalOcean Kubernetes cluster, deploys a load-balanced application into it, and then optionally configures DigitalOcean DNS records to give the resulting application a stable domain-based URL. This is demonstrated in Python.\n\n## Deploying the Example\n\n### Prerequisites\n\nTo follow this example, you will need:\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Register for a DigitalOcean Account](https://cloud.digitalocean.com/registrations/new)\n3. [Generate a DigitalOcean personal access token](https://www.digitalocean.com/docs/api/create-personal-access-token/)\n4. [Install `kubectl` for accessing your cluster](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n\nIf you want to configure the optional DigitalOcean DNS records at the end, you will also need:\n\n1. Obtain a domain name and [configure it to use DigitalOcean nameservers](https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\\`\\`\\`\n\n1. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Configure Pulumi to use your DigitalOcean personal access token:\n\n   ```bash\n   $ pulumi config set digitalocean:token <YOUR_TOKEN_HERE> --secret\n   ```\n\n3. (Optional) If you wish to use a custom domain name, configure it now:\n\n   ```bash\n   $ pulumi config set domainName <YOUR_DOMAIN_NAME>\n   ```\n\n4. Deploy your cluster, application, and optional DNS records by running `pulumi up`.\n\n   This command shows a preview of the resources that will be created, and asks you whether to proceed with the deployment. Select \"yes\" to perform the deployment.\n\n   ```bash\n   $ pulumi up\n   Updating (dev):\n\n        Type                                     Name        Status\n    +   pulumi:pulumi:Stack                      do-k8s-dev  created\n    +   └─ digitalocean:index:KubernetesCluster  do-cluster  created\n    +   ├─ pulumi:providers:kubernetes           do-k8s      created\n    +   ├─ kubernetes:apps:Deployment            do-app-dep  created\n    +   └─ kubernetes:core:Service               do-app-svc  created\n    +   ├─ digitalocean:index:Domain             do-domain        created\n    +   └─ digitalocean:index:DnsRecord          do-domain-cname  created\n\n   Outputs:\n    + ingressIp : \"157.230.199.202\"\n\n   Resources:\n       + 7 created\n\n   Duration: 6m5s\n   ```\n\n   Note that the entire deployment will typically take between 4-8 minutes.\n\n   As part of the update, you'll see some new objects in the output, including\n   a `Deployment` resource for the NGINX app, and a LoadBalancer `Service` to\n   publicly access NGINX, for example.\n\n5. After 3-5 minutes, your cluster will be ready, and the kubeconfig JSON you'll\n   use to connect to the cluster will be available as an output.\n\n   To access your cluster, save your `kubeconfig` stack output to a file and then\n   use that when running the `kubectl` command. For instance, this lists your pods:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ KUBECONFIG=./kubeconfig kubectl get pods\n   ```\n\n6. Pulumi understands which changes to a given cloud resource can be made in-place,\n   and which require replacement, and computes the minimally disruptive change to\n   achieve the desired state. Let's make a small change:\n\n   ```bash\n   $ pulumi config set appReplicaCount 7\n   ```\n\n   And then rerun `pulumi up`. Notice that it shows the preview of the changes,\n   including a diff of the values changed. Select \"yes\" to perform the update.\n\n7. From here, feel free to experiment a little bit. Once you've finished experimenting,\n   tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n   This not only removes the underlying DigitalOcean cloud resources, but also\n   deletes the stack and its history from Pulumi also.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-py-k8s.html","relUrl":"notes/digitalocean-py-k8s.html"},{"doc":"Digitalocean Cs Loadbalanced Droplets","title":"Digitalocean Cs Loadbalanced Droplets","hpath":"digitalocean-cs-loadbalanced-droplets","content":"## Imported Assets\n\n- [Digitalocean.LoadbalancedDroplets.csproj](/assets/digitalocean.csproj)\n- [DropletStack.cs](/assets/dropletstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-cs-loadbalanced-droplets.html","relUrl":"notes/digitalocean-cs-loadbalanced-droplets.html"},{"doc":"Digitalocean Cs K8s","title":"Digitalocean Cs K8s","hpath":"digitalocean-cs-k8s","content":"## Imported Assets\n\n- [Digitalocean.K8s.csproj](/assets/digitalocean.csproj)\n- [KubernetesStack.cs](/assets/kubernetesstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/digitalocean-cs-k8s.html","relUrl":"notes/digitalocean-cs-k8s.html"},{"doc":"Crd2pulumi Crontabs","title":"Crd2pulumi Crontabs","hpath":"crd2pulumi-crontabs","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Generating CronTab CustomResources with `crd2pulumi`\n\nThis example generates a strongly-typed CronTab CustomResource from the Kubernetes CRD specified in `crontabs.yaml` in TypeScript and Go. Afterwards, we'll use this generated code with Pulumi to deploy the CRD and create an instance. For more documentation on `crd2pulumi`, check out the [project's GitHub page](https://github.com/pulumi/pulumi-kubernetes/tree/master/provider/cmd/crd2pulumi).\n\n## Setting up crd2pulumi\n\nWe'll set up `crd2pulumi` by downloading the latest binary. If you're interested in building `crd2pulumi` itself, you can find instructions in the project [README](https://github.com/pulumi/pulumi-kubernetes/tree/master/provider/cmd/crd2pulumi).\n\nYou can find the download links for the [latest binaries on GitHub](https://github.com/pulumi/pulumi-kubernetes/releases/tag/crd2pulumi/v1.0.0). For this example we're using `darwin-amd64`, so if you're using a different OS, make sure to use the correct download link.\n\n```bash\n$ wget https://github.com/pulumi/pulumi-kubernetes/releases/download/crd2pulumi%2Fv1.0.0/crd2pulumi-darwin-amd64.tar.gz\n$ tar -xvf crd2pulumi-darwin-amd64.tar.gz\n$ mv ./releases/crd2pulumi-darwin-amd64/crd2pulumi ./crd2pulumi\n```\n\n## Running the App (TypeScript)\n\nFollow the steps in [Pulumi Installation and Setup](https://www.pulumi.com/docs/get-started/install/) and [Configuring Pulumi\nKubernetes](https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/setup/) to get setup with Pulumi and Kubernetes.\n\nInstall dependencies:\n\n```bash\n$ cd kubernetes-ts-crontabs\n$ npm install\n```\n\nCreate a new stack:\n\n```bash\n$ pulumi stack init dev\n```\n\nAt first, the provided `index.ts` program shouldn't run, since we haven't actually generated the `./crontabs` code yet.\n\n> `crontabs.yaml` is a k8s CRD that specifies a CronTab CustomResource. It's also used as an example in the [Kubernetes Documentation](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/).\n\nGenerate the strongly-typed CronTab resource in the current directory:\n\n```bash\n$ ../crd2pulumi nodejs ../crontabs.yaml .\n```\n\nThis should generate a `./crontabs` folder, where we can import the useful classes `v1.CronTab` and `NewCronTabDefinition`.\n\n> This saves us a lot of time, since we can create the CRD in a single line and get typed arguments in the CustomResource. If you're curious, the comments contain the code that we would've written without `crd2pulumi`.\n\nPerform the deployment:\n\n```bash\n$ pulumi up\nPreviewing update (dev):\n \tType                                                     \tName               \tPlan\n \tpulumi:pulumi:Stack                                      \texamples-dev\n +   ├─ kubernetes:stable.example.com:CronTab                 \tmy-new-cron-object \tcreate\n +   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  my-crontab-definition  create\nResources:\n\t+ 2 to create\n\t1 unchanged\nDo you want to perform this update? yes\nUpdating (dev):\n \tType                                                     \tName               \tStatus\n \tpulumi:pulumi:Stack                                      \texamples-dev\n +   ├─ kubernetes:stable.example.com:CronTab                 \tmy-new-cron-object \tcreated\n +   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  my-crontab-definition  created\nOutputs:\n\turn: \"urn:pulumi:dev::examples::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\nResources:\n\t+ 2 created\n\t1 unchanged\nDuration: 17s\n```\n\nIt looks like both the CronTab definition and instance were both created! Finally, let's verify that they were created\nby manually viewing the raw YAML data:\n\n```bash\n$ kubectl get ct -o yaml\n```\n\n```yaml\n- apiVersion: stable.example.com/v1\n  kind: CronTab\n  metadata:\n\tannotations:\n  \tkubectl.kubernetes.io/last-applied-configuration: |\n    \t{\"apiVersion\":\"stable.example.com/v1\",\"kind\":\"CronTab\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"my-new-cron-object\"},\"spec\":{\"cronSpec\":\"* * * * */5\",\"image\":\"my-awesome-cron-image\"}}\n\tcreationTimestamp: \"2020-08-10T09:50:38Z\"\n\tgeneration: 1\n\tlabels:\n  \tapp.kubernetes.io/managed-by: pulumi\n\tname: my-new-cron-object\n\tnamespace: default\n\tresourceVersion: \"1658962\"\n\tselfLink: /apis/stable.example.com/v1/namespaces/default/crontabs/my-new-cron-object\n\tuid: 5e2c56a2-7332-49cf-b0fc-211a0892c3d5\n  spec:\n\tcronSpec: '* * * * */5'\n\timage: my-awesome-cron-image\nkind: List\nmetadata:\n  resourceVersion: \"\"\n  selfLink: \"\"\n```\n\nLet's destroy the CRD and CustomResource object so we can re-create them in Go.\n\n```bash\n$ pulumi destroy\nPreviewing destroy (dev):\n     Type                                                         Name                        Plan       \n -   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  delete     \n -   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          delete     \n -   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  delete     \n \nOutputs:\n  - urn: \"urn:pulumi:dev::kubernetes-go-crontabs::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\n\nResources:\n    - 3 to delete\n\nDo you want to perform this destroy? yes\nDestroying (dev):\n     Type                                                         Name                        Status      \n -   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  deleted     \n -   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          deleted     \n -   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  deleted     \n \nOutputs:\n  - urn: \"urn:pulumi:dev::kubernetes-go-crontabs::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\n\nResources:\n    - 3 deleted\n\nDuration: 5s\n\nThe resources in the stack have been deleted, but the history and configuration associated with the stack are still maintained. \nIf you want to remove the stack completely, run 'pulumi stack rm dev'.\n```\n\n## Running the App (Go)\n\nFirst, if you haven't already, [install Go](https://golang.org/doc/install). Then create a new stack:\n\n```bash\n$ cd kubernetes-go-crontabs\n$ pulumi stack init dev\n```\n\nLike before, `main.go` shouldn't compile since we haven't generated the `crontabs` module yet. Let's do that:\n\n```bash\n$ ../crd2pulumi go ../crontabs.yaml .\n```\n\nThis creates a `crontabs/v1` module in the current directory, which contains the useful constructor `NewCronTab()`. \n\n> If you're curious, the commented code is what we would've had to write without `crd2pulumi`. Previously we would have had to input the `Spec` arguments into a generic `map[string]interface{}` with zero type-checking.\n\nPerform the deployment:\n\n```bash\n$ pulumi up --yes\nPreviewing update (dev):\n     Type                                                         Name                        Plan       \n +   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  create     \n +   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          create     \n +   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  create     \n \nResources:\n    + 3 to create\n\nUpdating (dev):\n     Type                                                         Name                        Status      \n +   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  created     \n +   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          created     \n +   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  created     \n \nOutputs:\n    urn: \"urn:pulumi:dev::kubernetes-go-crontabs::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\n\nResources:\n    + 3 created\n\nDuration: 10s\n```\n\nLike before, you can run `kubectl get ct -o yaml` to verify that the CronTab object was actually created. Before we leave, let's remove everything we have created:\n\n```bash\n$ pulumi destroy --yes\nPreviewing destroy (dev):\n     Type                                                         Name                        Plan       \n -   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  delete     \n -   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          delete     \n -   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  delete     \n \nOutputs:\n  - urn: \"urn:pulumi:dev::kubernetes-go-crontabs::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\n\nResources:\n    - 3 to delete\n\nDestroying (dev):\n     Type                                                         Name                        Status      \n -   pulumi:pulumi:Stack                                          kubernetes-go-crontabs-dev  deleted     \n -   ├─ kubernetes:stable.example.com:CronTab                     my-new-cron-object          deleted     \n -   └─ kubernetes:apiextensions.k8s.io:CustomResourceDefinition  cronTabDef                  deleted     \n \nOutputs:\n  - urn: \"urn:pulumi:dev::kubernetes-go-crontabs::kubernetes:stable.example.com/v1:CronTab::my-new-cron-object\"\n\nResources:\n    - 3 deleted\n\nDuration: 3s\n```\n\n* * *\n\n## Imported Assets\n\n- [crontab.yaml](/assets/crontab.yaml)\n\n","url":"https://pulumi.dendron.so/notes/crd2pulumi-crontabs.html","relUrl":"notes/crd2pulumi-crontabs.html"},{"doc":"Kubernetes Ts Crontabs","title":"Kubernetes Ts Crontabs","hpath":"crd2pulumi-crontabs.kubernetes-ts-crontabs","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/crd2pulumi-crontabs.kubernetes-ts-crontabs.html","relUrl":"notes/crd2pulumi-crontabs.kubernetes-ts-crontabs.html"},{"doc":"Kubernetes Go Crontabs","title":"Kubernetes Go Crontabs","hpath":"crd2pulumi-crontabs.kubernetes-go-crontabs","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/crd2pulumi-crontabs.kubernetes-go-crontabs.html","relUrl":"notes/crd2pulumi-crontabs.kubernetes-go-crontabs.html"},{"doc":"Contributing","title":"Contributing","hpath":"contributing","content":"# Contributing to Pulumi Examples\n\nPulumi welcomes contributions from the community and is excited to continue building out its collection of examples and tutorials that showcase the power of modern infrastructure as code. This guide is intended to\nhelp your contribution get published quickly.\n\n## Pulumi terminology\n\nFor a list of Pulumi terms used throughout our documentation site, see the [Glossary page](https://www.pulumi.com/docs/reference/glossary/).\n\n## Example folder structure\n\nThe folder structure for each example includes a two-part prefix, `<cloud>-<language>` (to indicate which `<cloud>` and `<language>` it pertains to), and a brief descriptive name with hyphens in between the words.\n\nThe cloud prefix can be one of:\n\n- `aws` for [Amazon Web Services](https://github.com/pulumi/pulumi-aws)\n- `azure` for [Microsoft Azure](https://github.com/pulumi/pulumi-azure)\n- `gcp` for [Google Cloud Platform](https://github.com/pulumi/pulumi-gcp)\n- `kubernetes` for [Kubernetes](https://github.com/pulumi/pulumi-kubernetes),\n- `digitalocean` for [DigitalOcean](https://github.com/pulumi/pulumi-digitalocean/)\n- `f5bigip` for [F5's BIG-IP](https://github.com/pulumi/pulumi-f5bigip/)\n- `cloud` for [Pulumi's cross-cloud programming framework](https://github.com/pulumi/pulumi-cloud), which is currently in preview\n- Any [cloud provider](https://www.pulumi.com/docs/reference/pkg/#cloud-providers) with a dedicated Pulumi package\n\nThe language prefix can be one of:\n\n- `ts` for TypeScript\n- `js` for JavaScript\n- `py` for Python\n- `go` for Golang\n- `cs` for csharp\n\nIf you would like to add an example in a different language, see the FAQ section for [adding support for your favorite language](https://www.pulumi.com/docs/troubleshooting/faq/#how-can-i-add-support-for-my-favorite-language).\n\nEach folder contains files related to your [Pulumi project](https://www.pulumi.com/docs/intro/concepts/project/), a README, an optional directory for your sample application (`www` for example), and an optional `images` directory if you're including images in your example.\n\n```\n|____README.md\n|____www\n|____images\n| |____deploy.gif\n| |____deploy.cast\n|____Pulumi.yaml\n|____package.json\n|____tsconfig.json\n|____index.ts\n```\n\n## Style\n\nWe are big fans of DigitalOcean's [technical writing guidelines](https://www.digitalocean.com/community/tutorials/digitalocean-s-technical-writing-guidelines#style) and highly encourage you to follow their style recommendations.\n\n### README structure\n\nEach example should include a README to give the readers a good walkthrough. It should comprise of the following sections:\n\n- Title\n- [\"Deploy with Pulumi\" button](https://www.pulumi.com/docs/intro/console/extensions/pulumi-button/) (Optional)\n- Overview paragraph\n- Prerequisites\n- Deploy the App\n  - Step 1: Doing the First Thing\n  - Step 2: Doing the Next Thing\n    …\n  - Step n: Doing the Last Thing\n- Clean Up\n- Summary\n- Next Steps (Optional)\n\nSee our [example README template](example-readme-template.md.txt) for detailed explanations on each section.\n\n> The contribution guidelines have been authored in September 2019 and are subject to further refinements and tweaks. Examples prior to September 2019 do not necessarily conform to these guidelines.\n\n","url":"https://pulumi.dendron.so/notes/contributing.html","relUrl":"notes/contributing.html"},{"doc":"Code of Conduct","title":"Code of Conduct","hpath":"code-of-conduct","content":"# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [code-of-conduct@pulumi.com.](mailto:code-of-conduct@pulumi.com.) All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>\n\n[homepage]: https://www.contributor-covenant.org\n\n","url":"https://pulumi.dendron.so/notes/code-of-conduct.html","relUrl":"notes/code-of-conduct.html"},{"doc":"Cloud Ts Voting App","title":"Cloud Ts Voting App","hpath":"cloud-ts-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Voting App Using Redis and Flask\n\nA simple voting app that uses Redis for a data store and a Python Flask app for the frontend. The example has been ported from <https://github.com/Azure-Samples/azure-voting-app-redis>.\n\nThe example shows how easy it is to deploy containers into production and to connect them to one another. Since the example defines a custom container, Pulumi does the following:\n\n- Builds the Docker image\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the image to the ECR instance\n- Creates a new ECS task definition, pointing to the ECR image definition\n\n## Prerequisites\n\nTo use this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Deploying and running the program\n\n### Configure the deployment\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Login via `pulumi login`.\n\n2. Create a new stack:\n\n   ```\n   $ pulumi stack init voting-app-testing\n   ```\n\n3. Set AWS as the provider:\n\n   ```\n   $ pulumi config set cloud:provider aws\n   ```\n\n4. Configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n5. Set a value for the Redis password. The value can be an encrypted secret, specified with the `--secret` flag. If this flag is not provided, the value will be saved as plaintext in `Pulumi.testing.yaml` (since `testing` is the current stack name).\n\n   ```\n   $ pulumi config set --secret redisPassword S3cr37Password\n   ```\n\n### Install dependencies\n\n1. Restore NPM modules via `npm install` or `yarn install`.\n\n### Preview and deploy\n\n1. Ensure the Docker daemon is running on your machine, then preview and deploy the program with `pulumi up`. The program deploys 24 resources and takes about 10 minutes to complete.\n\n2. View the stack output properties via `pulumi stack output`. The stack output property `frontendUrl` is the URL and port of the deployed app:\n\n   ```bash\n   $ pulumi stack output frontendURL\n   ***.elb.us-west-2.amazonaws.com\n   ```\n\n3. In a browser, navigate to the URL for `frontendURL`. You should see the voting app webpage.\n\n   ![Voting app screenshot](./voting-app-webpage.png)\n\n### Delete resources\n\nWhen you're done, run `pulumi destroy` to delete the program's resources:\n\n```\n$ pulumi destroy\nThis will permanently destroy all resources in the 'testing' stack!\nPlease confirm that this is what you'd like to do by typing (\"testing\"): testing\n```\n\n## About the code\n\nAt the start of the program, the following lines retrieve the value for the Redis password by reading a [configuration value](https://www.pulumi.com/docs/intro/concepts/config/). This is the same value that was set above with the command `pulumi config set redisPassword <value>`:\n\n```typescript\nlet config = new pulumi.Config();\nlet redisPassword = config.require(\"redisPassword\");\n```\n\nIn the program, the value can be used like any other variable.\n\n### Resources\n\nThe program provisions two top-level resources with the following commands:\n\n```typescript\nlet redisCache = new cloud.Service(\"voting-app-cache\", ... )\nlet frontend = new cloud.Service(\"voting-app-frontend\", ... )\n```\n\nThe definition of `redisCache` uses the `image` property of `cloud.Service` to point to an existing Docker image. In this case, this is the image `redis` at tag `alpine` on Docker Hub. The `redisPassword` variable is passed to the startup command for this image.\n\nThe definition of `frontend` is more interesting, as it uses `build` property of `cloud.Service` to point to a folder with a Dockerfile, which in this case is a Python Flask app. Pulumi automatically invokes `docker build` for you and pushes the container to ECR.\n\nSo that the `frontend` container can connect to `redisCache`, the environment variables `REDIS`, `REDIS_PORT` are defined. Using the `redisCache.endpoints` property, it's easy to declare the connection between the two containers.\n\nThe Flask app uses these environment variables to connect to the Redis cache container. See the following in [`frontend/app/main.py`](frontend/app/main.py):\n\n```python\nredis_server =   os.environ['REDIS']\nredis_port =     os.environ['REDIS_PORT']\nredis_password = os.environ['REDIS_PWD']\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [voting-app-webpage.png](/assets/voting-app-webpage.png)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-voting-app.html","relUrl":"notes/cloud-ts-voting-app.html"},{"doc":"Frontend","title":"Frontend","hpath":"cloud-ts-voting-app.frontend","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [LICENSE](/assets/license)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-voting-app.frontend.html","relUrl":"notes/cloud-ts-voting-app.frontend.html"},{"doc":"App","title":"App","hpath":"cloud-ts-voting-app.frontend.app","content":"## Imported Assets\n\n- [config_file.cfg](/assets/config_file.cfg)\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-voting-app.frontend.app.html","relUrl":"notes/cloud-ts-voting-app.frontend.app.html"},{"doc":"Templates","title":"Templates","hpath":"cloud-ts-voting-app.frontend.app.templates","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-voting-app.frontend.app.templates.html","relUrl":"notes/cloud-ts-voting-app.frontend.app.templates.html"},{"doc":"Static","title":"Static","hpath":"cloud-ts-voting-app.frontend.app.static","content":"## Imported Assets\n\n- [default.css](/assets/default.css)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-voting-app.frontend.app.static.html","relUrl":"notes/cloud-ts-voting-app.frontend.app.static.html"},{"doc":"Cloud Ts URL Shortener","title":"Cloud Ts URL Shortener","hpath":"cloud-ts-url-shortener","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless URL Shortener\n\nThis example demonstrates a complete URL shortener web application using high-level `cloud.Table` and\n`cloud.HttpEndpoint` components, highlighting the ability to combine deployment time and runtime code, and the simple,\ncloud-agnostic, programming model of `@pulumi/cloud`.  Although we only support AWS today in this framework, our plan\nis to offer an implementation of this on all major clouds, and so any code targeting this can truly run anywhere.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init url-shortener-test\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and run the deployment via `pulumi up`. The operation will take about 2 minutes to\n   complete and will create 34 resources:\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'url-shortener-dev'\n   ...\n\n   Do you want to perform this update? yes\n   Updating stack 'url-shortener-dev'\n   Performing changes:\n\n       Type                                      Name                                    Status      Info\n   +   pulumi:pulumi:Stack                       url-shortener-url-shortener-dev         created\n   +   ├─ cloud:table:Table                      urls                                    created\n   +   │  └─ aws:dynamodb:Table                  urls                                    created\n   +   └─ cloud:http:HttpEndpoint                urlshortener                            created\n   +      ├─ aws:s3:Bucket                       urlshortener                            created\n   +      ├─ aws:iam:Role                        urlshortener4c238266                    created\n   +      ├─ cloud:function:Function             urlshortener0f7d8d8d                    created\n   +      │  └─ aws:serverless:Function          urlshortener0f7d8d8d                    created\n   +      │     ├─ aws:iam:Role                  urlshortener0f7d8d8d                    created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortener0f7d8d8d-32be53a2           created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortener0f7d8d8d-fd1a00e5           created\n   +      │     └─ aws:lambda:Function           urlshortener0f7d8d8d                    created\n   +      ├─ cloud:function:Function             urlshortenerd9505e4a                    created\n   +      │  └─ aws:serverless:Function          urlshortenerd9505e4a                    created\n   +      │     ├─ aws:iam:Role                  urlshortenerd9505e4a                    created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortenerd9505e4a-32be53a2           created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortenerd9505e4a-fd1a00e5           created\n   +      │     └─ aws:lambda:Function           urlshortenerd9505e4a                    created\n   +      ├─ cloud:function:Function             urlshortenereeb67ce9                    created\n   +      │  └─ aws:serverless:Function          urlshortenereeb67ce9                    created\n   +      │     ├─ aws:iam:Role                  urlshortenereeb67ce9                    created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortenereeb67ce9-32be53a2           created\n   +      │     ├─ aws:iam:RolePolicyAttachment  urlshortenereeb67ce9-fd1a00e5           created\n   +      │     └─ aws:lambda:Function           urlshortenereeb67ce9                    created\n   +      ├─ aws:s3:BucketObject                 urlshortener4c238266/bootstrap.min.css  created\n   +      ├─ aws:s3:BucketObject                 urlshortener4c238266/favicon.png        created\n   +      ├─ aws:s3:BucketObject                 urlshortener4c238266/index.html         created\n   +      ├─ aws:iam:RolePolicyAttachment        urlshortener4c238266                    created\n   +      ├─ aws:apigateway:RestApi              urlshortener                            created\n   +      ├─ aws:apigateway:Deployment           urlshortener                            created\n   +      ├─ aws:lambda:Permission               urlshortener-0f7d8d8d                   created\n   +      ├─ aws:lambda:Permission               urlshortener-eeb67ce9                   created\n   +      ├─ aws:lambda:Permission               urlshortener-d9505e4a                   created\n   +      └─ aws:apigateway:Stage                urlshortener                            created\n\n   ---outputs:---\n   endpointUrl: \"https://***.us-west-2.amazonaws.com/stage/\"\n\n   info: 34 changes performed:\n       + 34 resources created\n   Update duration: ***\n\n   Permalink: https://app.pulumi.com/***\n   ```\n\n5. To view the url for the API endpoint, run `pulumi stack output`:\n\n   ```\n   $ pulumi stack output endpointUrl\n   https://***.us-east-1.amazonaws.com/stage/\n   ```\n\n6. Open the URL in a browser and you'll see a single page app for creating and viewing short URLs.\n\n### Logging\n\nTo view aggregated logs of the running application, use the `pulumi logs` command. These are logs across all of the compute for the application---in this case, 3 Lambda functions. To view a log stream, use the `--follow` flag:\n\n```\n$ pulumi logs --follow\nCollecting logs since 2018-03-27T18:20:32.000-07:00.\n\n 2018-03-27T19:20:23.300-07:00[          urlshortener0f7d8d8d] GET /url retrieved 0 items\n 2018-03-27T19:20:29.500-07:00[          urlshortenereeb67ce9] POST /url/a => https://www.lindydonna.com\n 2018-03-27T19:20:29.885-07:00[          urlshortener0f7d8d8d] GET /url retrieved 1 items\n 2018-03-27T19:20:36.879-07:00[          urlshortener0f7d8d8d] GET /url retrieved 1 items\n```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n## About the code\n\nThis example combines deployment time and runtime code in the same application. In [index.ts](./index.ts), there are two resource definitions at the top:\n\n```typescript\n// Create a web server.\nlet endpoint = new cloud.API(\"urlshortener\");\n\n// Create a table `urls`, with `name` as primary key.\nlet urlTable = new cloud.Table(\"urls\", \"name\");\n```\n\nDuring `pulumi up`, the declaration `new cloud.API` provisions an AWS API Gateway resource and `new cloud.Table` provisions a Dynamo DB instance. To learn more about how this works, see [How Pulumi Works](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) in the documentation.\n\nThe `endpoint.get` and `endpoint.post` method calls cause Pulumi to register API routes on the API Gateway, pointing to an AWS Lambda function for each implementation:\n\n```typescript\nendpoint.get(\"/url\", async (req, res) => { // this function is the body of the Lambda\n    try {\n        let items = await urlTable.scan();  // reference outer urlTable definition\n        res.status(200).json(items);\n        console.log(`GET /url retrieved ${items.length} items`);\n    } catch (err) {\n        res.status(500).json(err.stack);\n        console.log(`GET /url error: ${err.stack}`);\n    }\n});\n```\n\nPulumi creates a Lambda function that contains the anonymous function passed to `endpoint.get`. Note that the value of `urlTable` is \"captured.\" This means that `urlTable.scan` is turned into an API call on Dynamo DB, using the physical identifier for `urlTable`. There's no need to store this information in an environment variable; Pulumi wires everything up for you.\n\nTo learn more about runtime and deployment time code, see [Architecture and Concepts](https://www.pulumi.com/docs/intro/concepts/) in the Pulumi documentation.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener.html","relUrl":"notes/cloud-ts-url-shortener.html"},{"doc":"Www","title":"Www","hpath":"cloud-ts-url-shortener.www","content":"## Imported Assets\n\n- [bootstrap.min.css](/assets/bootstrap.css)\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener.www.html","relUrl":"notes/cloud-ts-url-shortener.www.html"},{"doc":"Cloud Ts URL Shortener Cache","title":"Cloud Ts URL Shortener Cache","hpath":"cloud-ts-url-shortener-cache","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless URL Shortener with Redis Cache\n\nA sample URL shortener SPA that uses the high-level `cloud.Table` and `cloud.API` components. The example shows to combine serverless functions along with containers. This shows that you can create your own `cloud.*`-like\nabstractions for your own use, your team's, or to share with the community using your language's package manager.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init url-cache-testing\n   ```\n\n2. Set AWS as the provider:\n\n   ```\n   $ pulumi config set cloud:provider aws\n   ```\n\n3. Configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n4. Set a value for the Redis password. The value can be an encrypted secret, specified with the `--secret` flag. If this flag is not provided, the value will be saved as plaintext in `Pulumi.url-cache-testing.yaml` (since `url-cache-testing` is the current stack name).\n\n   ```\n   $ pulumi config set --secret redisPassword S3cr37Password\n   ```\n\n5. Restore NPM modules via `npm install` or `yarn install`.\n\n6. Preview and run the deployment via `pulumi up`. The operation will take about 5 minutes to complete.\n\n   ```\n   $ pulumi up\n   Previewing stack 'url-cache-testing'\n   ...\n\n   Updating stack 'url-cache-testing'\n   Performing changes:\n\n   #:  Resource Type                            Name\n   1:  pulumi:pulumi:Stack                      url-shortener-cache-url-\n   ...\n   49: aws:apigateway:Stage                     urlshortener\n\n   info: 49 changes performed:\n       + 49 resources created\n   Update duration: ***\n   ```\n\n7. To view the API endpoint, use the `stack output` command:\n\n   ```\n   $ pulumi stack output endpointUrl\n   https://***.us-east-1.amazonaws.com/stage/\n   ```\n\n8. Open this page in a browser and you'll see a single page app for creating and viewing short URLs.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cache.ts](/assets/cache.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener-cache.html","relUrl":"notes/cloud-ts-url-shortener-cache.html"},{"doc":"Www","title":"Www","hpath":"cloud-ts-url-shortener-cache.www","content":"## Imported Assets\n\n- [bootstrap.min.css](/assets/bootstrap.css)\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener-cache.www.html","relUrl":"notes/cloud-ts-url-shortener-cache.www.html"},{"doc":"Cloud Ts URL Shortener Cache HTTP","title":"Cloud Ts URL Shortener Cache HTTP","hpath":"cloud-ts-url-shortener-cache-http","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless URL Shortener with Redis Cache and HttpServer\n\nA sample URL shortener SPA that uses the high-level `cloud.Table` and `cloud.HttpServer` components. The example shows to combine serverless functions along with containers. This shows that you can create your own `cloud.*`-like\nabstractions for your own use, your team's, or to share with the community using your language's package manager.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init url-cache-testing\n   ```\n\n2. Set AWS or Azure as the provider:\n\n   ```\n   $ pulumi config set cloud:provider aws\n   # or\n   $ pulumi config set cloud:provider azure\n   ```\n\n3. If using AWS configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n4. If using Azure set an appropriate location like:\n\n   ```\n   $ pulumi config set cloud-azure:location \"West US 2\"\n   ```\n\n5. Set a value for the Redis password. The value can be an encrypted secret, specified with the `--secret` flag. If this flag is not provided, the value will be saved as plaintext in `Pulumi.url-cache-testing.yaml` (since `url-cache-testing` is the current stack name).\n\n   ```\n   $ pulumi config set --secret redisPassword S3cr37Password\n   ```\n\n6. Add the 'www' directory to the uploaded function code so it can be served from the http server:\n\n   ```\n   $ pulumi config set cloud-aws:functionIncludePaths\n   #or\n   $ pulumi config set cloud-azure:functionIncludePaths\n   ```\n\n7. Restore NPM modules via `npm install` or `yarn install`.\n\n8. Compile the program via `tsc` or `npm run build` or `yarn run build`.\n\n9. Preview and run the deployment via `pulumi update`. The operation will take about 5 minutes to complete.\n\n   ```\n   $ pulumi update\n   Previewing stack 'url-cache-testing'\n   ...\n\n   Updating stack 'url-cache-testing'\n   Performing changes:\n\n   #:  Resource Type                            Name\n   1:  pulumi:pulumi:Stack                      url-shortener-cache-url-\n   ...\n   49: aws:apigateway:Stage                     urlshortener\n\n   info: 49 changes performed:\n       + 49 resources created\n   Update duration: ***\n   ```\n\n10. To view the API endpoint, use the `stack output` command:\n\n    ```\n    $ pulumi stack output endpointUrl\n    https://***.us-east-1.amazonaws.com/stage/\n    ```\n\n11. Open this page in a browser and you'll see a single page app for creating and viewing short URLs.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cache.ts](/assets/cache.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener-cache-http.html","relUrl":"notes/cloud-ts-url-shortener-cache-http.html"},{"doc":"Www","title":"Www","hpath":"cloud-ts-url-shortener-cache-http.www","content":"## Imported Assets\n\n- [bootstrap.min.css](/assets/bootstrap.css)\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/cloud-ts-url-shortener-cache-http.www.html","relUrl":"notes/cloud-ts-url-shortener-cache-http.www.html"},{"doc":"Cloud JS Twitter Athena","title":"Cloud JS Twitter Athena","hpath":"cloud-js-twitter-athena","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Twitter Search in Athena\n\nA sample project that queries Twitter every 2 minutes and stores the results in S3. The project also sets up an Athena table and query. This project demonstrates using `cloud.Timer` to run a Lambda on an interval.\n\n## Setup\n\nRegister a new [Twitter app](https://apps.twitter.com/). \n\n## Deploy and run the program\n\n1. Create a new stack:\n\n   ```\n   pulumi stack init twitter-athena\n   ```\n\n2. In Twitter, get the keys for your application. Set configuration values for your Twitter consumer key/secret and application key/secret. Use the `--secret` flag to securely encrypt secret values.\n\n   ```\n   pulumi config set twitterAccessTokenKey <Value for Consumer Key (API Key)>\n   pulumi config set --secret twitterAccessTokenSecret <Value for Consumer Secret (API Secret)> \n   pulumi config set twitterConsumerKey <Value for Access Token>\n   pulumi config set --secret twitterConsumerSecret <Value for Access Token Secret>\n   ```\n\n3. Set a search term to query for:\n\n   ```\n   pulumi config set twitterQuery \"Amazon Web Services\"\n   ```\n\n4. Set the AWS region:\n\n   ```bash\n   pulumi config set aws:region us-west-2\n   ```\n\n5. Restore NPM modules via `npm install`.\n\n6. Preview and run the deployment via `pulumi up`. A total of 16 resources are created.\n\n7. Run `pulumi stack output` to view output properties (or view the stack on pulumi.com).\n\n   ```\n   $ pulumi stack output\n   Please choose a stack: aws-serverless-js-twitter-dev\n   Current stack outputs (4):\n       OUTPUT                                           VALUE\n       athenaDatabase                                   tweets_database\n       bucketName                                       tweet-bucket-de18828\n       createTableQueryUri                              https://us-west-2.console.aws.amazon.com/athena/home?force#query/saved/e394800e-a35e-44b3-b8ca-8b47b0f74469\n       topUsersQueryUri                                 https://us-west-2.console.aws.amazon.com/athena/home?force#query/saved/51fa5744-bab6-4e5f-8cd6-9447b6619f06\n   ```\n\n8. Navigate to the URL for `createTableQueryUri` and run the query in the Athena console. This will create a table called `tweets`.\n\n9. Navigate to the URL for `topUsersQueryUri` and run the query in Athena. You'll see tweets for your search term, by users with more than 1000 followers.\n\n   ![Athena console](athena-screenshot.png)\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [athena-screenshot.png](/assets/athena-screenshot.png)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-twitter-athena.html","relUrl":"notes/cloud-js-twitter-athena.html"},{"doc":"Cloud JS Thumbnailer","title":"Cloud JS Thumbnailer","hpath":"cloud-js-thumbnailer","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Video Thumbnailer\n\nA video thumbnail extractor using serverless functions and containers.\n\nLoosely derived from the example at <https://serverless.com/blog/serverless-application-for-long-running-process-fargate-lambda/>.\n\n![When a new video is uploaded, extract a thumbnail](thumbnailer-diagram.png)\n\n## Prerequisites\n\nTo run this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init thumbnailer-testing\n   ```\n\n2. Configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and deploy the app via `pulumi up`. The preview will take some time, as it builds a Docker container. A total of 32 resources are created.\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'thumbnailer-testing'\n   Previewing changes:\n\n       Type                                Name                                   Plan          Info\n   *   global                              global                                 no change     1 info message. info: Building container image 'pulum-\n   +   pulumi:pulumi:Stack                       video-thumbnailer-thumbnailer-testing  create...     1 info message. info: Successfully tagged pulum-\n   ...\n\n   Do you want to perform this update? yes\n   Updating stack 'thumbnailer-testing'\n   Performing changes:\n\n       Type                                Name                                   Status        Info\n   *   global                              global                                 unchanged     1 info message. info: Building container image 'pulum-\n   +   pulumi:pulumi:Stack                 video-thumbnailer-thumbnailer-testing  created      1 info message. info: 081c66fa4b0c: Pushed\n   +   ├─ cloud:bucket:Bucket              bucket                                 created\n   +   │  ├─ cloud:function:Function             onNewVideo                             created\n   +   │  │  └─ aws:serverless:Function          onNewVideo                             created\n   +   │  │  └─ aws:serverless:Function          onNewVideo                             created\n   +   │  │  └─ aws:serverless:Function          onNewVideo                             created\n   +   │  │  └─ aws:serverless:Function          onNewVideo                             created\n   +   │  ├─ cloud:function:Function             onNewThumbnail                         created\n   +   │  │  └─ aws:serverless:Function          onNewThumbnail                         created\n   +   │  │  └─ aws:serverless:Function          onNewThumbnail                         created\n   +   │  │     └─ aws:lambda:Function           onNewVideo                             created\n   +   │  │  └─ aws:serverless:Function          onNewThumbnail                         created\n   +   │  │  └─ aws:serverless:Function          onNewThumbnail                         created\n   +   │  │     └─ aws:lambda:Function           onNewThumbnail                         created\n   +   │  ├─ aws:s3:Bucket                       bucket                                 created\n   +   │  ├─ aws:lambda:Permission               onNewThumbnail                         created\n   +   │  ├─ aws:lambda:Permission               onNewVideo                             created\n   +   │  └─ aws:s3:BucketNotification           bucket                                 created\n   +   ├─ awsx:network:Network              default-vpc                            created\n   +   ├─ aws:ecr:Repository                     pulum-dc8d99de-container               created\n   +   ├─ cloud:global:infrastructure            global-infrastructure                  created\n   +   │  ├─ aws:iam:Role                        pulumi-thumbnailer--task               created\n   +   │  ├─ aws:iam:Role                        pulumi-thumbna-execution               created\n   +   │  ├─ aws:iam:RolePolicyAttachment        pulumi-thu-task-32be53a2               created\n   +   │  ├─ aws:iam:RolePolicyAttachment        pulumi-thu-task-fd1a00e5               created\n   +   │  └─ aws:iam:RolePolicyAttachment        pulumi-thumbna-execution               created\n   +   ├─ cloud:task:Task                        ffmpegThumbTask                        created\n   +   │  ├─ aws:cloudwatch:LogGroup             ffmpegThumbTask                        created\n   +   │  └─ aws:ecs:TaskDefinition              ffmpegThumbTask                        created\n   +   └─ awsx:cluster:Cluster              pulumi-thumbnaile-global               created\n   +      ├─ aws:ecs:Cluster                     pulumi-thumbnaile-global               created\n   +      └─ aws:ec2:SecurityGroup               pulumi-thumbnaile-global               created\n   ...\n\n   info: 32 changes performed:\n       + 32 resources created\n   Update duration: ***\n\n   Permalink: https://app.pulumi.com/***\n   ```\n\n5. View the stack outputs:\n\n   ```\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT                                           VALUE\n       bucketName                                       ***\n   ```\n\n6. Upload a video, embedding the timestamp in the filename:\n\n   ```\n   $ aws s3 cp ./sample/cat.mp4 s3://$(pulumi stack output bucketName)/cat_00-01.mp4\n   upload: sample/cat.mp4 to s3://***/cat_00-01.mp4\n   ```\n\n7. View the logs from both the Lambda function and the ECS task:\n\n   ````\n   $ pulumi logs -f\n   Collecting logs for stack thumbnailer-testing since ***\n\n   2018-05-25T12:57:26.326-07:00[                    onNewVideo] *** New video: file cat_00-01.mp4 was uploaded at 2018-05-25T19:57:25.507Z.\n   2018-05-25T12:57:30.705-07:00[                    onNewVideo] Running thumbnailer task.\n   2018-05-25T12:58:34.960-07:00[               ffmpegThumbTask] Starting ffmpeg task...\n   2018-05-25T12:58:34.960-07:00[               ffmpegThumbTask] Copying video from S3 bucket-5ea6b28/cat_00-01.mp4 to cat_00-01.mp4...\n   2018-05-25T12:58:37.267-07:00[               ffmpegThumbTask] Completed 256.0 KiB/666.5 KiB (2.5 MiB/s) with 1 fildownload: s3://bucket-5ea6b28/cat_00-01.mp4 to ./cat_00-01.mp4\n   2018-05-25T12:58:40.306-07:00[               ffmpegThumbTask] Copying cat.jpg to S3 at bucket-5ea6b28/cat.jpg ...\n   2018-05-25T12:58:43.034-07:00[               ffmpegThumbTask] Completed 86.6 KiB/86.6 KiB (619.7 KiB/s) with 1 filupload: ./cat.jpg to s3://bucket-5ea6b28/cat.jpg\n   2018-05-25T12:58:43.758-07:00[                onNewThumbnail] *** New thumbnail: file cat.jpg was saved at 2018-05-25T19:58:43.028Z.\n       ```\n\n   ````\n\n8. Download the key frame:\n\n   ```\n   $ aws s3 cp s3://$(pulumi stack output bucketName)/cat.jpg .\n   download: s3://***/cat.jpg to ./cat.jpg\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [thumbnailer-diagram.key](/assets/thumbnailer-diagram.key)\n- [thumbnailer-diagram.png](/assets/thumbnailer-diagram.png)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer.html","relUrl":"notes/cloud-js-thumbnailer.html"},{"doc":"Sample","title":"Sample","hpath":"cloud-js-thumbnailer.sample","content":"## Imported Assets\n\n- [cat.mp4](/assets/cat.mp4)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer.sample.html","relUrl":"notes/cloud-js-thumbnailer.sample.html"},{"doc":"Docker Ffmpeg Thumb","title":"Docker Ffmpeg Thumb","hpath":"cloud-js-thumbnailer.docker-ffmpeg-thumb","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer.docker-ffmpeg-thumb.html","relUrl":"notes/cloud-js-thumbnailer.docker-ffmpeg-thumb.html"},{"doc":"Cloud JS Thumbnailer Machine Learning","title":"Cloud JS Thumbnailer Machine Learning","hpath":"cloud-js-thumbnailer-machine-learning","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Video Thumbnailer with AWS Rekognition\n\nA video thumbnail extractor using serverless functions, containers, and [AWS Rekognition](https://aws.amazon.com/rekognition/). This is an extension of the sample [cloud-js-thumbnailer](../cloud-js-thumbnailer). When a new video is uploaded to S3, this sample calls AWS Rekognition to find a frame with the highest confidence for the label \"cat\" and extracts a jpg of this frame, by running ffmpeg in an AWS Fargate container.\n\n![When a new video is uploaded, extract a thumbnail using AWS Rekognition](thumbnailer-rekognition-diagram.png)\n\n## Prerequisites\n\nTo use this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init thumbnailer-rekognition\n   ```\n\n2. Configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n3. Configure the Lambda function role so that it can access Rekognition:\n\n   ```\n   $ pulumi config set cloud-aws:computeIAMRolePolicyARNs arn:aws:iam::aws:policy/AWSLambdaExecute,arn:aws:iam::aws:policy/AWSLambda_FullAccess,arn:aws:iam::aws:policy/AmazonECS_FullAccess,arn:aws:iam::aws:policy/AmazonRekognitionFullAccess,arn:aws:iam::aws:policy/IAMFullAccess\n   ```\n\n4. Restore NPM modules via `npm install` or `yarn install`.\n\n5. Preview and deploy the app via `pulumi up`. The preview will take some time, as it builds a Docker container. A total of 54 resources are created.\n\n   ```\n   $ pulumi up\n   Previewing update (thumbnailer-rekognition)\n\n   View Live: https://app.pulumi.com/***\n\n       Type                                  Name                                   Plan       \n   +   pulumi:pulumi:Stack                   video-thumbnailer-rekognition-rek-dev  create...  \n   +   ├─ cloud:topic:Topic                  AmazonRekognitionTopic                 create     \n   +   │  ├─ aws:sns:TopicEventSubscription  AmazonRekognitionTopic_labelResults    create     \n   +   │  ├─ aws:iam:Role                    AmazonRekognitionTopic_labelResults    create     \n   +   │  └─ aws:sns:Topic                   AmazonRekognitionTopic                 create     \n   +   │  └─ aws:iam:RolePolicyAttachment    AmazonRekognitionTopic_labelResults-b5aeb6b6  create..   \n   +   │  └─ aws:iam:RolePolicyAttachment    AmazonRekognitionTopic_labelResults-0cbb1731  create..   \n   +   │  └─ aws:iam:RolePolicyAttachment    AmazonRekognitionTopic_labelResults-4aaabb8e  create..   \n   +   │  └─ aws:iam:RolePolicyAttachment    AmazonRekognitionTopic_labelResults-2d3346de  create..   \n   +   │  └─ aws:iam:RolePolicyAttachment    AmazonRekognitionTopic_labelResults-2d3346de  create     \n   +   │  ├─ aws:iam:Role                    pulumi-rek-dev-execution                      create     \n   +   │  ├─ aws:iam:Role                    pulumi-rek-dev-task                           create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    pulumi-rek-dev-execution                      create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    pulumi-rek-task-0cbb1731                      create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    pulumi-rek-task-2d3346de                      create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    pulumi-rek-task-b5aeb6b6                      create     \n   +   │  └─ aws:iam:RolePolicyAttachment    pulumi-rek-task-4aaabb8e                      create     \n   +   ├─ awsx:cluster:Cluster               pulumi-rek-dev-global                         create     \n   +   │  └─ aws:ecs:Cluster                 pulumi-rek-dev-global                         create     \n   +   ├─ cloud:bucket:Bucket                bucket                                        create     \n   +   │  ├─ aws:s3:BucketEventSubscription  onNewVideo                                    create     \n   +   pulumi:pulumi:Stack                   video-thumbnailer-rekognition-rek-dev         create     \n   +   │  │  └─ aws:lambda:Permission        onNewVideo                                    create     \n   +   │  │  └─ aws:lambda:Permission        onNewVideo                                    create     \n   +   │  │  └─ aws:lambda:Permission        onNewVideo                                    create     \n   +   │  │  └─ aws:lambda:Permission        onNewVideo                                    create     \n   +   │  │  └─ aws:lambda:Permission        AmazonRekognitionTopic_labelResults           create     \n   +   pulumi:pulumi:Stack                   video-thumbnailer-rekognition-rek-dev         create     \n   +   │  ├─ aws:iam:Role                    onNewThumbnail                                create     \n   +   │  ├─ aws:iam:Role                    onNewVideo                                    create     \n   +   │  ├─ aws:s3:Bucket                   bucket                                        create     \n   +   │  │  └─ aws:s3:BucketNotification    onNewVideo                                    create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewThumbnail-0cbb1731                       create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewThumbnail-b5aeb6b6                       create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewThumbnail-2d3346de                       create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewThumbnail-4aaabb8e                       create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewVideo-4aaabb8e                           create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewVideo-b5aeb6b6                           create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewVideo-0cbb1731                           create     \n   +   │  ├─ aws:iam:RolePolicyAttachment    onNewVideo-2d3346de                           create     \n   +   │  ├─ aws:lambda:Function             onNewThumbnail                                create     \n   +   │  └─ aws:lambda:Function             onNewVideo                                    create     \n   +   ├─ cloud:task:Task                    ffmpegThumbTask                               create     \n   +   │  ├─ aws:cloudwatch:LogGroup         ffmpegThumbTask                               create     \n   +   │  └─ aws:ecs:TaskDefinition          ffmpegThumbTask                               create     \n   +   ├─ aws:ecr:Repository                 pulum-dc8d99de-container                      create     \n   +   ├─ aws:iam:Role                       rekognition-role                              create     \n   +   ├─ aws:iam:RolePolicyAttachment       rekognition-access                            create     \n   +   ├─ aws:ecr:LifecyclePolicy            pulum-dc8d99de-container                      create     \n   +   └─ awsx:network:Network               default-vpc                                   create     \n\n   Resources:\n   + 54 to create\n   ```\n\n6. Upload a video:\n\n   ```\n   $ aws s3 cp ./sample/cat.mp4 s3://$(pulumi stack output bucketName)\n   upload: sample/cat.mp4 to s3://***/cat.mp4\n   ```\n\n7. View the logs from both the Lambda function and the ECS task:\n\n   ````\n   $ pulumi logs -f\n   Collecting logs for stack pulumi/donna-thumbnailer-rekognition since 2018-05-21T18:57:11.000-07:00.\n   2018-05-21T19:57:35.968-07:00[                    onNewVideo] *** New video: file cat.mp4 was uploaded at 2018-05-22T02:57:35.431Z.\n   2018-05-21T19:57:36.376-07:00[                    onNewVideo] *** Submitted Rekognition job for cat.mp4\n   2018-05-21T19:57:45.848-07:00[AmazonRekognitionTopic_labelRe] *** Rekognition job complete\n   2018-05-21T19:57:50.690-07:00[AmazonRekognitionTopic_labelRe] Raw label results:\n   ...\n   2018-05-21T19:57:50.746-07:00[AmazonRekognitionTopic_labelRe]     *** Found object Cat at position 1568.  Confidence = 50.56669616699219\n   2018-05-21T19:57:50.746-07:00[AmazonRekognitionTopic_labelRe] *** Rekognition processing complete for bucket-d6c6339/cat.mp4 at timestamp 1.568\n   2018-05-21T19:57:51.762-07:00[AmazonRekognitionTopic_labelRe] *** Launched thumbnailer task.\n   2018-05-21T19:58:55.197-07:00[               ffmpegThumbTask] Starting ffmpeg task...\n   2018-05-21T19:58:55.216-07:00[               ffmpegThumbTask] Copying from S3 bucket-d6c6339/cat.mp4 to cat.mp4 ...\n   download: s3://bucket-d6c6339/cat.mp4 to ./cat.mp4                pleted 256.0 KiB/756.1 KiB (2.4 MiB/s) with 1 file(s) remaining\n   2018-05-21T19:59:02.244-07:00[               ffmpegThumbTask] Copying .jpg to S3 at bucket-d6c6339/.jpg ...\n   upload: ./.jpg to s3://bucket-d6c6339/output/.jpg                 pleted 87.3 KiB/87.3 KiB (428.8 KiB/s) with 1 file(s) remaining\n   2018-05-21T19:59:05.778-07:00[                onNewThumbnail] *** New thumbnail: file cat.jpg was saved at 2018-05-22T02:59:04.858Z.\n       ```\n\n   ````\n\n8. Download the key frame:\n\n   ```\n   $ aws s3 cp s3://$(pulumi stack output bucketName)/cat.jpg .\n   download: s3://***/cat.jpg to ./cat.jpg\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [thumbnailer-rekognition-diagram.key](/assets/thumbnailer-rekognition-diagram.key)\n- [thumbnailer-rekognition-diagram.png](/assets/thumbnailer-rekognition-diagram.png)\n- [video-label-processor.js](/assets/video-label-processor.js)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer-machine-learning.html","relUrl":"notes/cloud-js-thumbnailer-machine-learning.html"},{"doc":"Sample","title":"Sample","hpath":"cloud-js-thumbnailer-machine-learning.sample","content":"## Imported Assets\n\n- [cat.mp4](/assets/cat.mp4)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer-machine-learning.sample.html","relUrl":"notes/cloud-js-thumbnailer-machine-learning.sample.html"},{"doc":"Docker Ffmpeg Thumb","title":"Docker Ffmpeg Thumb","hpath":"cloud-js-thumbnailer-machine-learning.docker-ffmpeg-thumb","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-thumbnailer-machine-learning.docker-ffmpeg-thumb.html","relUrl":"notes/cloud-js-thumbnailer-machine-learning.docker-ffmpeg-thumb.html"},{"doc":"Cloud JS Httpserver","title":"Cloud JS Httpserver","hpath":"cloud-js-httpserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless REST API on AWS\n\nA simple REST API that counts the number of times a route has been hit.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init count-api-testing\n   ```\n\n2. Set the provider and region for AWS:\n\n   ```\n   $ pulumi config set cloud:provider aws\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'count-api-testing'\n   ...\n\n   Updating stack 'count-api-testing'\n   Performing changes:\n\n       Type                                      Name                                 Status      Info\n   +   pulumi:pulumi:Stack                       cloud-js-httpserver-routecount-luke  created\n   +   ├─ cloud:httpserver:HttpServer            routecount                           created\n   +   │  ├─ cloud:function:Function             routecount                           created\n   +   │  │  └─ aws:serverless:Function          routecount                           created\n   +   │  │     ├─ aws:iam:Role                  routecount                           created\n   +   │  │     ├─ aws:iam:RolePolicyAttachment  routecount-fd1a00e5                  created\n   +   │  │     ├─ aws:iam:RolePolicyAttachment  routecount-32be53a2                  created\n   +   │  │     └─ aws:lambda:Function           routecount                           created\n   +   │  ├─ aws:apigateway:RestApi              routecount                           created\n   +   │  ├─ aws:apigateway:Deployment           routecount                           created\n   +   │  ├─ aws:apigateway:Stage                routecount                           created\n   +   │  ├─ aws:lambda:Permission               routecount-b9de55a3                  created\n   +   │  └─ aws:lambda:Permission               routecount-e1615237                  created\n   +   └─ cloud:table:Table                      counterTable                         created\n   +      └─ aws:dynamodb:Table                  counterTable                         created\n\n       ---outputs:---\n       endpoint: \"https://zxvi8hpmak.execute-api.us-west-2.amazonaws.com/stage/\"\n\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 32.322463714s\n   ```\n\n5. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.us-west-2.amazonaws.com/stage/\n\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"/hello\",\"count\":1}\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"/hello\",\"count\":2}\n   $ curl $(pulumi stack output endpoint)/woohoo\n   {\"route\":\"/woohoo\",\"count\":1}\n   ```\n\n6. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-httpserver.html","relUrl":"notes/cloud-js-httpserver.html"},{"doc":"Cloud JS Containers","title":"Cloud JS Containers","hpath":"cloud-js-containers","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Containerized App\n\nCompanion to the tutorial [Provision containers on AWS](https://www.pulumi.com/docs/tutorials/aws/ecs-fargate/).\n\n## Prerequisites\n\nTo run this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init containers-dev\n   ```\n\n2. Configure Pulumi to use AWS Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set cloud-aws:useFargate true\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and deploy the app via `pulumi up`. The preview will take a few minutes, as it builds a Docker container. A total of 19 resources are created.\n\n   ```\n   $ pulumi up\n   ```\n\n5. View the endpoint URL, and run curl:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1)\n       OUTPUT                  VALUE\n       hostname                http://***.elb.us-west-2.amazonaws.com\n\n   $ curl $(pulumi stack output hostname)\n   <html>\n       <head><meta charset=\"UTF-8\">\n       <title>Hello, Pulumi!</title></head>\n   <body>\n       <p>Hello, S3!</p>\n       <p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n   </body></html>\n   ```\n\n6. To view the runtime logs from the container, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n   ```\n   $ pulumi logs --follow\n   Collecting logs for stack container-quickstart-dev since 2018-05-22T14:25:46.000-07:00.\n   2018-05-22T15:33:22.057-07:00[                  pulumi-nginx] 172.31.13.248 - - [22/May/2018:22:33:22 +0000] \"GET / HTTP/1.1\" 200 189 \"-\" \"curl/7.54.0\" \"-\"\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-containers.html","relUrl":"notes/cloud-js-containers.html"},{"doc":"App","title":"App","hpath":"cloud-js-containers.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-containers.app.html","relUrl":"notes/cloud-js-containers.app.html"},{"doc":"Content","title":"Content","hpath":"cloud-js-containers.app.content","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-containers.app.content.html","relUrl":"notes/cloud-js-containers.app.content.html"},{"doc":"Cloud JS API","title":"Cloud JS API","hpath":"cloud-js-api","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless REST API on AWS\n\nA simple REST API that counts the number of times a route has been hit. For a detailed walkthrough of this example, see the article [Create a Serverless REST API](https://www.pulumi.com/docs/tutorials/aws/rest-api/).\n\n> Note: this example uses JavaScript promises, but if you're using Node 8, you can change the code to use `async` and `await`.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init count-api-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'count-api-testing'\n   ...\n\n   Updating stack 'count-api-testing'\n   Performing changes:\n\n       Type                                      Name                                     Status      Info\n   +   pulumi:pulumi:Stack                       cloud-js-httpendpoint-count-api-testing  created\n   +   ├─ cloud:table:Table                      counterTable                             created\n   +   │  └─ aws:dynamodb:Table                  counterTable                             created\n   +   └─ cloud:http:HttpEndpoint                hello-world                              created\n   +      ├─ cloud:function:Function             hello-world4fcc7b60                      created\n   +      │  └─ aws:serverless:Function          hello-world4fcc7b60                      created\n   +      │     ├─ aws:iam:Role                  hello-world4fcc7b60                      created\n   +      │     ├─ aws:lambda:Function           hello-world4fcc7b60                      created\n   +      │     ├─ aws:iam:RolePolicyAttachment  hello-world4fcc7b60-32be53a2             created\n   +      │     └─ aws:iam:RolePolicyAttachment  hello-world4fcc7b60-fd1a00e5             created\n   +      ├─ aws:apigateway:RestApi              hello-world                              created\n   +      ├─ aws:apigateway:Deployment           hello-world                              created\n   +      ├─ aws:lambda:Permission               hello-world-4fcc7b60                     created\n   +      └─ aws:apigateway:Stage                hello-world                              created\n\n   ---outputs:---\n   endpoint: \"https://***.us-west-2.amazonaws.com/stage/\"\n\n   info: 14 changes performed:\n       + 14 resources created\n   Update duration: ***\n   ```\n\n5. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.us-west-2.amazonaws.com/stage/\n\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"hello\",\"count\":1}\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"hello\",\"count\":2}\n   $ curl $(pulumi stack output endpoint)/woohoo\n   {\"route\":\"woohoo\",\"count\":1}\n   ```\n\n6. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/cloud-js-api.html","relUrl":"notes/cloud-js-api.html"},{"doc":"Classic Azure Ts Webserver Component","title":"Classic Azure Ts Webserver Component","hpath":"classic-azure-ts-webserver-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Component Using Azure Virtual Machine\n\nThis example provisions a configurable number of Linux web servers in an Azure Virtual Machine, and returns the\nresulting public IP addresses. This example uses a reusable [Pulumi component](https://www.pulumi.com/docs/intro/concepts/resources/#components) to simplify the creation of new virtual machines. By\ndefining a `WebServer` class, we can hide many details (see [here](./webserver.ts) for its definition).\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your Azure account](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) (if your `az` CLI is configured, no further changes are required)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the deployment. The username and password here will be used to configure the Virtual Machine. The\n   password must adhere to the [Azure restrictions on VM passwords](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm).\n\n   ```\n   $ pulumi config set azure:location westus  # any valid Azure region will do\n   $ pulumi config set username webmaster\n   $ pulumi config set password <your-password> --secret\n   $ pulumi config set count 5                # optional -- will default to 2 if left out\n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n4. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 4m27s\n   ```\n\n6. Check the resulting IP addresses:\n\n   ```\n   $ pulumi stack output ipAddresses\n   [ 40.112.181.239, ..., 40.112.181.240 ]\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [webserver.ts](/assets/webserver.ts)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-webserver-component.html","relUrl":"notes/classic-azure-ts-webserver-component.html"},{"doc":"Classic Azure Ts Vm Scaleset","title":"Classic Azure Ts Vm Scaleset","hpath":"classic-azure-ts-vm-scaleset","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure VM Scale Sets\n\nThis example provisions a Scale Set of Linux web servers with nginx deployed, configured the auto-scaling based on CPU load, puts a Load Balancer in front of them, and gives it a public IP address.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your Azure account](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) (if your `az` CLI is configured, no further changes are required)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the app deployment.\n\n   ```\n   $ pulumi config set azure:location westus    # any valid Azure region will do\n   ```\n\n   Optionally, configure the username and password for the admin user. Otherwise, they will be auto-generated.\n\n   ```\n   $ pulumi config set adminUser webmaster\n   $ pulumi config set adminPassword <your-password> --secret\n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n4. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update:\n   ...\n\n   Updating:\n   ...\n   Resources:\n       13 created\n   Update duration: 2m19s\n   ```\n\n6. Check the domain name of the PIP:\n\n   ```\n   $ pulumi stack output publicAddress\n   dsuv3vqbgi.westeurope.cloudapp.azure.com\n   $ curl http://$(pulumi stack output publicAddress)\n   #nginx welcome screen HTML is returned\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-vm-scaleset.html","relUrl":"notes/classic-azure-ts-vm-scaleset.html"},{"doc":"Classic Azure Ts Vm Provisioners","title":"Classic Azure Ts Vm Provisioners","hpath":"classic-azure-ts-vm-provisioners","content":"# Azure WebServer with Manual Provisioning\n\nThis demonstrates using Pulumi dynamic providers to accomplish post-provisioning configuration steps.\n\nUsing these building blocks, one can accomplish much of the same as Terraform provisioners.\n\n<https://github.com/pulumi/pulumi/issues/1691> tracks designing and developing a complete replacement for provisioners.\n\n## Running the Example\n\nFirst, create a stack, using `pulumi stack init`.\n\nNow, we need to ensure that our dependencies are installed:\n\n```\n$ npm install\n```\n\nYou'll need to log in to the azure cli. You will be prompted to do this during deployment if you forget this step.\n\n```\n$ az login\n```\n\nWe'll need to set some config for login credentials, and location information.\n\n```\npulumi config set azure:location westus\npulumi config set username <your_username>\npulumi config set password --secret <your_desired_password>\n\n```\n\nNext, generate an OpenSSH keypair for use with your server - as per the Azure [Requirements][1]\n\n```\n$ ssh-keygen -t rsa -f rsa -m PEM\n```\n\nThis will output two files, `rsa` and `rsa.pub`, in the current directory. Be sure not to commit these files!\n\nWe then need to configure our stack so that the public key is used by our VM, and the private key used\nfor subsequent SCP and SSH steps to configure our server after it is stood up.\n\n```\n$ cat rsa.pub | pulumi config set publicKey --\n$ cat rsa | pulumi config set privateKey --secret --\n```\n\nIf your key is protected by a passphrase, add that too:\n\n```\n$ pulumi config set privateKeyPassphrase --secret [yourPassphraseHere]\n```\n\nNotice that we've used `--secret` for both `privateKey` and `privateKeyPassphrase`. This ensures their are\nstored in encrypted form in the Pulumi secrets system.\n\nFrom there, you can run `pulumi up` and all resources will be provisioned and configured.\n\n[1]: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ssh-from-windows#create-an-ssh-key-pair\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [myapp.conf](/assets/myapp.conf)\n- [package.json](/assets/package.json)\n- [util.ts](/assets/util.ts)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-vm-provisioners.html","relUrl":"notes/classic-azure-ts-vm-provisioners.html"},{"doc":"Provisioners","title":"Provisioners","hpath":"classic-azure-ts-vm-provisioners.provisioners","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n- [provisioner.ts](/assets/provisioner.ts)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-vm-provisioners.provisioners.html","relUrl":"notes/classic-azure-ts-vm-provisioners.provisioners.html"},{"doc":"Classic Azure Ts Stream Analytics","title":"Classic Azure Ts Stream Analytics","hpath":"classic-azure-ts-stream-analytics","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Stream Analytics\n\nAn example Pulumi program that deploys an Azure Stream Analytics job to transform data in an Event Hub.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Configure the location to deploy the example to:\n\n   ```\n   $ pulumi config set azure:location <location>\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n     + 15 created\n   Update duration: 2m43s\n   ```\n\n6. Use the following sample messages for testing:\n\n   ```\n   // Inputs (1 line - 1 event):\n   {\"Make\":\"Kia\",\"Sales\":2,\"Time\":\"2019-06-26T10:22:36Z\"}\n   {\"Make\":\"Kia\",\"Sales\":1,\"Time\":\"2019-06-26T10:22:37Z\"}\n   {\"Make\":\"Honda\",\"Sales\":1,\"Time\":\"2019-06-26T10:22:38Z\"}\n\n   // Output:\n   [{\"Make\":\"Kia\",\"Sales\":3};{\"Make\":\"Honda\",\"Sales\":1}]\n\n   ```\n\n   You can send a message with a `curl` command:\n\n   ```\n   curl -X POST '$(pulumi stack output inputEndpoint)' -H 'Authorization: $(pulumi stack output sasToken)' -H 'Content-Type: application/atom+xml;type=entry;charset=utf-8' -d '{\"Make\":\"Kia\",\"Sales\":2,\"Time\":\"2019-06-26T10:22:36Z\"}'\n   ```\n\n7. [Start the Stream Analytics job](https://docs.microsoft.com/en-us/azure/stream-analytics/start-job). The job will start emitting messages to the output Event Hub once per minute. The Azure Function `analytics-output` will start printing those events into the console (you'd have to open the function console in the Azure portal to see them).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [token.ts](/assets/token.ts)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-stream-analytics.html","relUrl":"notes/classic-azure-ts-stream-analytics.html"},{"doc":"Classic Azure Ts Serverless URL Shortener Global","title":"Classic Azure Ts Serverless URL Shortener Global","hpath":"classic-azure-ts-serverless-url-shortener-global","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Globally Distributed Serverless URL Shortener Using Azure Functions and Cosmos DB\n\nMulti-region deployment of Azure Functions and Cosmos DB with Traffic Manager\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Specify the Azure regions to deploy the application:\n\n   ```\n   $ pulumi config set locations westus,westeurope\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 23 changes performed:\n       + 23 resources created\n   Update duration: 21m33.3252322s\n   ```\n\n6. Add a short URL:\n\n   ```\n   $ pulumi stack output addEndpoint\n   https://urlshort-add94ac80f8.azurewebsites.net/api/urlshort-add\n   $ curl -H \"Content-Type: application/json\" \\\n       --request POST \\\n       -d '{\"id\":\"pulumi\",\"url\":\"https://pulumi.com\"}' \\\n       \"$(pulumi stack output addEndpoint)\"    \n   Short URL saved\n   ```\n\n7. Query a short URL:\n\n   ```\n   $ pulumi stack output endpoint\n   http://urlshort-tm.trafficmanager.net/api/\n   $ curl -L $(pulumi stack output endpoint)pulumi\n   <!doctype html>\n   <html lang=\"en-US\" prefix=\"og: http://ogp.me/ns#\">\n       <head>\n       <title>\n           Pulumi\n       </title>\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-serverless-url-shortener-global.html","relUrl":"notes/classic-azure-ts-serverless-url-shortener-global.html"},{"doc":"Classic Azure Ts Msi Keyvault Rbac","title":"Classic Azure Ts Msi Keyvault Rbac","hpath":"classic-azure-ts-msi-keyvault-rbac","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Managing Secrets and Secure Access in Azure Applications\n\n[Managed identities](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/) for Azure resources provides Azure services with an automatically managed identity in Azure Active Directory (Azure AD).\n\nThis example demonstrates using a managed identity with Azure App Service to access Azure KeyVault, Azure Storage, and Azure SQL Database without passwords or secrets.\n\nThe application consists of several parts:\n\n- An ASP.NET Application which reads data from a SQL Database and from a file in Blob Storage\n- App Service which host the application. The application binaries are placed in Blob Storage, with Blob Url placed as a secret in Azure Key Vault\n- App Service has a Managed Identity enabled\n- The identify is granted access to the SQL Server, Blob Storage, and Key Vault\n- No secret information is placed in App Service configuration: all access rights are derived from Active Directory\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Build and publish the ASP.NET Core project:\n\n   ```\n   $ dotnet publish webapp\n   ```\n\n5. Set an appropriate Azure location like:\n\n   ```\n   $ pulumi config set azure:location westus\n   ```\n\n6. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 4m16s\n   ```\n\n7. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://app129968b8.azurewebsites.net/\n   $ curl \"$(pulumi stack output endpoint)\"\n   Hello 311378b3-16b7-4889-a8d7-2eb77478beba@50f73f6a-e8e3-46b6-969c-bf026712a650! Here is your...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-msi-keyvault-rbac.html","relUrl":"notes/classic-azure-ts-msi-keyvault-rbac.html"},{"doc":"Webapp","title":"Webapp","hpath":"classic-azure-ts-msi-keyvault-rbac.webapp","content":"## Imported Assets\n\n- [Program.cs](/assets/program.cs)\n- [Reader.cs](/assets/reader.cs)\n- [Startup.cs](/assets/startup.cs)\n- [webapp.csproj](/assets/webapp.csproj)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-msi-keyvault-rbac.webapp.html","relUrl":"notes/classic-azure-ts-msi-keyvault-rbac.webapp.html"},{"doc":"Classic Azure Ts Hdinsight Spark","title":"Classic Azure Ts Hdinsight Spark","hpath":"classic-azure-ts-hdinsight-spark","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Spark on Azure HDInsight\n\nAn example Pulumi component that deploys a Spark cluster on Azure HDInsight.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 5 changes performed:\n       + 5 resources created\n   Update duration: 15m6s\n   ```\n\n5. Check the deployed Spark endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://myspark1234abcd.azurehdinsight.net/\n\n   # For instance, Jupyter notebooks are available at https://myspark1234abcd.azurehdinsight.net/jupyter/\n   # Follow https://docs.microsoft.com/en-us/azure/hdinsight/spark/apache-spark-load-data-run-query to test it out\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-hdinsight-spark.html","relUrl":"notes/classic-azure-ts-hdinsight-spark.html"},{"doc":"Classic Azure Ts Dynamicresource","title":"Classic Azure Ts Dynamicresource","hpath":"classic-azure-ts-dynamicresource","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure CDN Custom Domain Dynamic Provider\n\n## Prerequisites\n\nPrior to running this example, ensure that the custom domain you will be adding to your CDN endpoint has a CNAME record in your domain registrar's DNS management portal. The dynamic provider will validate that the mapping exists and will fail the deployment if the CDN endpoint is not reachable through your custom domain.\n\n## Usage\n\nIn order to create a custom domain, you must have first created a CDN profile and an endpoint in that profile. Once those are created, you can use the `CDNCustomDomainResource` just like any other resource.\n\nHere's an example:\n\n```ts\nconst cdnCustomDomainResource = new CDNCustomDomainResource(\"cdnCustomDomain\", {\n    // Ensure that there is a CNAME record for mycompany.com\n    // pointing to my-cdn-endpoint.azureedge.net.\n    // You would do that in your domain registrar's portal.\n    customDomainHostName: \"mycompany.com\",\n    customDomainName: \"custom-domain\",\n    profileName: cdnProfileName,\n    endpointName: cdnEndpointName,\n    // This will enable HTTPS through Azure's one-click\n    // automated certificate deployment.\n    // The certificate is fully managed by Azure from provisioning\n    // to automatic renewal at no additional cost to you.\n    httpsEnabled: true,\n    resourceGroupName: resourceGroupName\n}, { parent: cdnEndpoint });\n```\n\nThat's it! The dynamic provider will automatically use the underlying Azure provider's configuration to determine the credentials to your subscription. If it cannot find them through the Azure provider, it will also look at the following environment variables:\n\n- `ARM_CLIENT_ID`\n- `ARM_CLIENT_SECRET` // Make sure to store the value for this var as secret in your CI/CD system.\n- `ARM_TENANT_ID`\n- `ARM_SUBSCRIPTION_ID`\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init azure-cdn-custom-domain\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n   ...or if you prefer using `yarn`, then `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   ...\n   Update duration: ...\n   ```\n\n## Dynamic Providers\n\nLearn more about dynamic providers [here](https://www.pulumi.com/docs/intro/concepts/resources/#dynamicproviders).\n\n## Known Issues\n\nIf you get a 404 error when deleting a custom domain or a deserialization error `SyntaxError: Unexpected token o in JSON at position 1`, these were due to bugs in the older versions of the Azure nodeJS SDK. See <https://github.com/Azure/azure-sdk-for-js/issues/2842> for more info. Ensure that you have the latest versions by running `npm list @azure/ms-rest-js @azure/ms-rest-azure-js`. The versions you should have are:\n\n- `@azure/ms-rest-js` - 1.8.10\n- `@azure/ms-rest-azure-js` - 1.3.7\n\nIf you do not have the latest versions, delete your `node_modules` folder and `package-lock.json` (or `yarn.lock` if you are using yarn) and run `npm install` (or `yarn install`) again.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cdnCustomDomain.ts](/assets/cdncustomdomain.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-dynamicresource.html","relUrl":"notes/classic-azure-ts-dynamicresource.html"},{"doc":"Classic Azure Ts Cosmosapp Component","title":"Classic Azure Ts Cosmosapp Component","hpath":"classic-azure-ts-cosmosapp-component","content":"# Reusable Component to Create Globally-distributed Applications with Azure Cosmos DB\n\nThis example demonstrates the usage of Pulumi to create globally-distributed applications with Azure Cosmos DB as the backend and pluggable infrastrustructure as the web tier.\n\nThe application shows several notable features:\n\n1. Easy global deployments - a config setting provides a list of all the regions to deploy and a single execution deploys across them all.\n2. Abstraction - the `CosmosApp` component - abstracts away all the common logic for a global app with Cosmos DB multi-region data distribution and Traffic Manager for routing the traffic.\n3. Multi-model - examples are provided for serverless functions, containers, and virtual machines, all fitting to the above abstraction.\n\n## `CosmosApp` component\n\nThe [`CosmosApp`](cosmosApp.ts) defines a skeleton for the application. While not limiting the type of compute resources, it creates the multi-regional pieces of the infrastructure:\n\n![Cosmos App](https://github.com/mikhailshilkov/pulumi-cosmos/raw/master/pictures/globalapp.png)\n\nThe application has three example of using this component with the following compute services:\n\n- Azure Functions\n- Azure Container Instances\n- Azure VM Scale Sets + Azure Load Balancer\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Azure credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n## Steps\n\n### Step 1: Create a new stack\n\n```\n$ pulumi stack init dev\n```\n\n### Step 2: Log in to the Azure CLI\n\nYou will be prompted to do this during deployment if you forget this step.\n\n```\n$ az login\n```\n\n### Step 3: Install NPM dependencies\n\n```\n$ npm install\n```\n\n### Step 4: Deploy your changes\n\nRun `pulumi up` to preview and deploy changes:\n\n```\n$ pulumi up\nPreviewing changes:\n+  azure-ts-cosmosapp-component-dev  create\n+  examples:azure:CosmosApp vms create\n+  azure:network:VirtualNetwork vnet-westeurope create\n+  azure:network:PublicIp pip-westeurope create\n+  azure:trafficmanager:Profile tmvms create\n+  azure:trafficmanager:Endpoint tmvmswesteurope create\n+  azure:cosmosdb:Account cosmos-vms\n...\n```\n\n### Step 5: Check the deployed website endpoints\n\nThree endpoints are now available. For example,\n\n```\n$ pulumi stack output functionsEndpoint\nhttp://functionscosmosfunc-rgcc15ea50.trafficmanager.net/api/cosmos\n\n$ curl \"$(pulumi stack output functionsEndpoint)\"\nDocument 'cosmos' not found\n```\n\nGo to the Azure portal and add a document with the ID \"cosmos\" to receive a non-empty response.\n\n## Running Unit Tests\n\nThe `unittests.ts` file contains two sample unit tests that can be run with Mocha:\n\n```\nmocha -r ts-node/register unittests.ts\n```\n\n## Running Policy Pack\n\nThe `policy` folder contains two sample policies that can be applied with the `policy-pack` argument:\n\n```\npulumi up --policy-pack policy\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [aci.ts](/assets/aci.ts)\n- [cosmosApp.ts](/assets/cosmosapp.ts)\n- [functionApp.ts](/assets/functionapp.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [unittests.ts](/assets/unittests.ts)\n- [vms.ts](/assets/vms.ts)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.html"},{"doc":"Vm","title":"Vm","hpath":"classic-azure-ts-cosmosapp-component.vm","content":"## Imported Assets\n\n- [vmCustomData.yaml](/assets/vmcustomdata.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.vm.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.vm.html"},{"doc":"Policy","title":"Policy","hpath":"classic-azure-ts-cosmosapp-component.policy","content":"## Imported Assets\n\n- [PulumiPolicy.yaml](/assets/pulumipolicy.yaml)\n- [azureRegions.json](/assets/azureregions.json)\n- [distance.ts](/assets/distance.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.policy.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.policy.html"},{"doc":"Images","title":"Images","hpath":"classic-azure-ts-cosmosapp-component.images","content":"## Imported Assets\n\n- [globalapp.png](/assets/globalapp.png)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.images.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.images.html"},{"doc":"Container","title":"Container","hpath":"classic-azure-ts-cosmosapp-component.container","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.container.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.container.html"},{"doc":"App","title":"App","hpath":"classic-azure-ts-cosmosapp-component.container.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-cosmosapp-component.container.app.html","relUrl":"notes/classic-azure-ts-cosmosapp-component.container.app.html"},{"doc":"Classic Azure Ts Arm Template","title":"Classic Azure Ts Arm Template","hpath":"classic-azure-ts-arm-template","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Resource Manager (ARM) Template\n\nThis example simply deploys an existing Azure Resource Manager (ARM) template using Pulumi. This accepts\nany existing valid ARM template, enabling easy migration from existing JSON templates and towards infrastructure\nas code using Pulumi. Once deployed, it is easy to incrementally refactor resources at a time out of the template\nand into code.\n\n[Read more about ARM templates here](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview).\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/). [Follow the instructions\nhere](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\nNow, install dependencies:\n\n```sh\nnpm install\n```\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init\n   Enter a stack name: azure-arm-dev\n   ```\n\n2. Set the required configuration variables for this program, and log into Azure:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set azure:location westus2\n   $ az login\n   ```\n\n3. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n   Updating stack 'azure-arm-dev'\n   Performing changes:\n\n        Type                              Name                      Status\n    +   pulumi:pulumi:Stack               azure-arm--azure-arm-dev  created\n    +   ├─ azure:core:ResourceGroup       rg                        created\n    +   └─ azure:core:TemplateDeployment  arm-dep                   created\n\n   Outputs:\n       storageAccountName: \"abevrwebgje2wstorage\"\n\n   Resources:\n       + 3 created\n\n   Duration: 1m8s\n   ```\n\n   Notice here that the `storageAccountName` allocated by the ARM template deployment is exported.\n\n4. Tidy up and delete all resources allocated by your deployment:\n\n   ```bash\n   $ pulumi destroy -y --skip-preview\n   $ pulumi stack rm -y --skip-preview\n   ```\n\n## Next Steps\n\nFor more Azure examples, please [check out the Azure Getting Started Guide](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-arm-template.html","relUrl":"notes/classic-azure-ts-arm-template.html"},{"doc":"Classic Azure Ts Appservice Springboot","title":"Classic Azure Ts Appservice Springboot","hpath":"classic-azure-ts-appservice-springboot","content":"# Spring Boot App on Azure App Service Using Jenkins\n\nThis example shows how you can deploy a Spring Boot app to an Azure App Service instance using Pulumi in a Jenkins Pipeline. The Spring Boot app is packaged into a container image that is conveniently built as part of the Pulumi app. The container image is pushed up to a private Azure Container Registry and then used as the source for an App Service instance.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Azure credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n## Steps\n\n### Step 1: Create a new stack\n\n```\n$ cd infrastructure\n$ pulumi stack init dev\n```\n\n### Step 2: Log in to the Azure CLI\n\nYou will be prompted to do this during deployment if you forget this step.\n\n```\n$ az login\n```\n\n### Step 3: Install NPM dependencies\n\n```\n$ npm install\n```\n\n### Step 4: Deploy your changes\n\nRun `pulumi up` to preview and deploy changes:\n\n```\n$ pulumi up\nPreviewing changes:\n+  pulumi:pulumi:Stack jenkins-tutorial-dev create\n+  docker:image:Image spring-boot-greeting-app create\n+  azure:core:ResourceGroup jenkins-tutorial-group create\n+  azure:containerservice:Registry myacr create\n+  azure:appservice:Plan appservice-plan create\n+  azure:appservice:AppService spring-boot-greeting-app create\n+  pulumi:pulumi:Stack jenkins-tutorial-dev create\n...\n```\n\n### Step 5: Check the deployed website endpoint\n\n```\n$ pulumi stack output appServiceEndpoint\nhttps://azpulumi-as0ef47193.azurewebsites.net\n\n$ curl \"$(pulumi stack output appServiceEndpoint)/greeting\"\n{\"id\":1, \"content\": \"Hello, World\"}\n```\n\n* * *\n\n## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Jenkinsfile](/assets/jenkinsfile)\n- [build.gradle](/assets/build.gradle)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-springboot.html","relUrl":"notes/classic-azure-ts-appservice-springboot.html"},{"doc":"Src","title":"Src","hpath":"classic-azure-ts-appservice-springboot.src","content":"\n","url":"https://pulumi.dendron.so/notes/c34bda13-af5d-441d-a595-58c59ae85ee0.html","relUrl":"notes/c34bda13-af5d-441d-a595-58c59ae85ee0.html"},{"doc":"Main","title":"Main","hpath":"classic-azure-ts-appservice-springboot.src.main","content":"\n","url":"https://pulumi.dendron.so/notes/314635ac-5e81-48bf-9884-8ca6b26329ed.html","relUrl":"notes/314635ac-5e81-48bf-9884-8ca6b26329ed.html"},{"doc":"Resources","title":"Resources","hpath":"classic-azure-ts-appservice-springboot.src.main.resources","content":"## Imported Assets\n\n- [application.properties](/assets/application.properties)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-springboot.src.main.resources.html","relUrl":"notes/classic-azure-ts-appservice-springboot.src.main.resources.html"},{"doc":"Java","title":"Java","hpath":"classic-azure-ts-appservice-springboot.src.main.java","content":"\n","url":"https://pulumi.dendron.so/notes/598e9a09-cb2f-43ba-8953-120779df1771.html","relUrl":"notes/598e9a09-cb2f-43ba-8953-120779df1771.html"},{"doc":"Hello","title":"Hello","hpath":"classic-azure-ts-appservice-springboot.src.main.java.hello","content":"## Imported Assets\n\n- [Application.java](/assets/application.java)\n- [Greeting.java](/assets/greeting.java)\n- [GreetingController.java](/assets/greetingcontroller.java)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-springboot.src.main.java.hello.html","relUrl":"notes/classic-azure-ts-appservice-springboot.src.main.java.hello.html"},{"doc":"Infrastructure","title":"Infrastructure","hpath":"classic-azure-ts-appservice-springboot.infrastructure","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-springboot.infrastructure.html","relUrl":"notes/classic-azure-ts-appservice-springboot.infrastructure.html"},{"doc":"Classic Azure Ts Appservice Devops","title":"Classic Azure Ts Appservice Devops","hpath":"classic-azure-ts-appservice-devops","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new?template=https://github.com/pulumi/examples/tree/master/azure-ts-appservice-devops/infra)\n\n# Todo App Using Azure App Service with SQL Database and Integrated with Azure DevOps\n\nA Todo List application from Azure Samples GitHub: [.NET Core MVC sample for Azure App Service](https://github.com/azure-samples/dotnetcore-sqldb-tutorial), a web app built with ASP.NET Core, Entity Framework Core and a SQL database. \n\nProvisions Azure SQL Database and Azure Application Insights to be used in combination with App Service. Defines an Azure DevOps pipeline to deploy in CI/CD environment.\n\n## Running the App manually with Pulumi CLI\n\n1. Build and publish the ASP.NET Core project:\n\n   ```\n   $ dotnet publish src\n   ```\n\n2. Navigate to `infra`:\n\n   ```\n   $ cd infra\n   ```\n\n3. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n4. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n5. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n6. Define SQL Server username:\n\n   ```\n   pulumi config set sqlUsername <value>\n   ```\n\n7. Define SQL Server password (make it complex enough to satisfy Azure policy):\n\n   ```\n   pulumi config set --secret sqlPassword <value>\n   ```\n\n8. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 1m14.59910109s\n   ```\n\n9. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://dev-as10d706a2.azurewebsites.net\n   $ curl \"$(pulumi stack output endpoint)\"\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n       <title>Index - My ToDoList App</title>\n   ...\n   ```\n\n## Integrating with Azure DevOps\n\n`azure-pipeline.yml` in the root folder of this example shows a configuration for Azure DevOps using [Pulumi task](https://marketplace.visualstudio.com/items?itemName=pulumi.build-and-release-task).\n\nPulumi task expects a Pulumi access token to be configured as a build variable. Copy your token from [Access Tokens page](https://app.pulumi.com/account/tokens) and put it into `pulumi.access.token` build variable.\n\n`alternative-pipeline` folder contains custom scripts and a pipeline to run Pulumi program in environments that have to access to the marketplace.\n\nFollow [Azure DevOps](https://www.pulumi.com/docs/guides/continuous-delivery/azure-devops/) guide for more details.\n\n* * *\n\n## Imported Assets\n\n- [azure-pipelines.yml](/assets/azure-pipelines.yml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.html","relUrl":"notes/classic-azure-ts-appservice-devops.html"},{"doc":"Src","title":"Src","hpath":"classic-azure-ts-appservice-devops.src","content":"## Imported Assets\n\n- [DotNetCoreSqlDb.csproj](/assets/dotnetcoresqldb.csproj)\n- [Program.cs](/assets/program.cs)\n- [Startup.cs](/assets/startup.cs)\n- [appsettings.json](/assets/appsettings.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"classic-azure-ts-appservice-devops.src.wwwroot","content":"## Imported Assets\n\n- [favicon.ico](/assets/favicon.ico)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.wwwroot.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.wwwroot.html"},{"doc":"JS","title":"JS","hpath":"classic-azure-ts-appservice-devops.src.wwwroot.js","content":"## Imported Assets\n\n- [site.js](/assets/site.js)\n- [site.min.js](/assets/site.js)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.wwwroot.js.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.wwwroot.js.html"},{"doc":"Images","title":"Images","hpath":"classic-azure-ts-appservice-devops.src.wwwroot.images","content":"## Imported Assets\n\n- [banner1.svg](/assets/banner1.svg)\n- [banner2.svg](/assets/banner2.svg)\n- [banner3.svg](/assets/banner3.svg)\n- [banner4.svg](/assets/banner4.svg)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.wwwroot.images.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.wwwroot.images.html"},{"doc":"CSS","title":"CSS","hpath":"classic-azure-ts-appservice-devops.src.wwwroot.css","content":"## Imported Assets\n\n- [site.css](/assets/site.css)\n- [site.min.css](/assets/site.css)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.wwwroot.css.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.wwwroot.css.html"},{"doc":"Views","title":"Views","hpath":"classic-azure-ts-appservice-devops.src.views","content":"## Imported Assets\n\n- [\\_ViewImports.cshtml](/assets/_viewimports.cshtml)\n- [\\_ViewStart.cshtml](/assets/_viewstart.cshtml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.views.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.views.html"},{"doc":"Todos","title":"Todos","hpath":"classic-azure-ts-appservice-devops.src.views.todos","content":"## Imported Assets\n\n- [Create.cshtml](/assets/create.cshtml)\n- [Delete.cshtml](/assets/delete.cshtml)\n- [Details.cshtml](/assets/details.cshtml)\n- [Edit.cshtml](/assets/edit.cshtml)\n- [Index.cshtml](/assets/index.cshtml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.views.todos.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.views.todos.html"},{"doc":"Shared","title":"Shared","hpath":"classic-azure-ts-appservice-devops.src.views.shared","content":"## Imported Assets\n\n- [Error.cshtml](/assets/error.cshtml)\n- [\\_Layout.cshtml](/assets/_layout.cshtml)\n- [\\_ValidationScriptsPartial.cshtml](/assets/_validationscriptspartial.cshtml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.views.shared.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.views.shared.html"},{"doc":"Home","title":"Home","hpath":"classic-azure-ts-appservice-devops.src.views.home","content":"## Imported Assets\n\n- [About.cshtml](/assets/about.cshtml)\n- [Contact.cshtml](/assets/contact.cshtml)\n- [Index.cshtml](/assets/index.cshtml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.views.home.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.views.home.html"},{"doc":"Properties","title":"Properties","hpath":"classic-azure-ts-appservice-devops.src.properties","content":"## Imported Assets\n\n- [launchSettings.json](/assets/launchsettings.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.properties.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.properties.html"},{"doc":"Models","title":"Models","hpath":"classic-azure-ts-appservice-devops.src.models","content":"## Imported Assets\n\n- [Todo.cs](/assets/todo.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.models.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.models.html"},{"doc":"Migrations","title":"Migrations","hpath":"classic-azure-ts-appservice-devops.src.migrations","content":"## Imported Assets\n\n- [20170901142627_Initial.Designer.cs](/assets/20170901142627_initial.cs)\n- [20170901142627_Initial.cs](/assets/20170901142627_initial.cs)\n- [MyDatabaseContextModelSnapshot.cs](/assets/mydatabasecontextmodelsnapshot.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.migrations.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.migrations.html"},{"doc":"Data","title":"Data","hpath":"classic-azure-ts-appservice-devops.src.data","content":"## Imported Assets\n\n- [MyDatabaseContext.cs](/assets/mydatabasecontext.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.data.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.data.html"},{"doc":"Controllers","title":"Controllers","hpath":"classic-azure-ts-appservice-devops.src.controllers","content":"## Imported Assets\n\n- [HomeController.cs](/assets/homecontroller.cs)\n- [TodoesController.cs](/assets/todoescontroller.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.src.controllers.html","relUrl":"notes/classic-azure-ts-appservice-devops.src.controllers.html"},{"doc":"Infra","title":"Infra","hpath":"classic-azure-ts-appservice-devops.infra","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.infra.html","relUrl":"notes/classic-azure-ts-appservice-devops.infra.html"},{"doc":"Alternative Pipeline","title":"Alternative Pipeline","hpath":"classic-azure-ts-appservice-devops.alternative-pipeline","content":"## Imported Assets\n\n- [azure-pipelines.yml](/assets/azure-pipelines.yml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.alternative-pipeline.html","relUrl":"notes/classic-azure-ts-appservice-devops.alternative-pipeline.html"},{"doc":"Scripts","title":"Scripts","hpath":"classic-azure-ts-appservice-devops.alternative-pipeline.scripts","content":"## Imported Assets\n\n- [run-pulumi.sh](/assets/run-pulumi.sh)\n- [setup.sh](/assets/setup.sh)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-appservice-devops.alternative-pipeline.scripts.html","relUrl":"notes/classic-azure-ts-appservice-devops.alternative-pipeline.scripts.html"},{"doc":"Classic Azure Ts API Management","title":"Classic Azure Ts API Management","hpath":"classic-azure-ts-api-management","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure API Management\n\nAn example Pulumi program that deploys an instance of Azure API Management with the following resources:\n\n- API which is linked to an Azure Function App backend\n- Operation and operation policy with URL rewrite and caching rules\n- A product, a user, and a subscription to enable access to the API\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Configure Azure location:\n\n   ```\n   $ pulumi config set azure:location <location>\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n      + 12 created\n   Duration: 34m54s\n   ```\n\n6. Check the deployed function endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://greeting-service12345678.azure-api.net/hello/Pulumi\n   $ curl --header \"Ocp-Apim-Subscription-Key: $(pulumi stack output key)\" $(pulumi stack output endpoint)\n   {\"time\":\"2019-06-17T15:16:08.227Z\",\"greeting\":\"Hello Pulumi!\"}\n   ...\n   ```\n\n7. Verify that API caches the response for 30 seconds - the same time should be returned for subsequent queries:\n\n   ```\n   $ curl --header \"Ocp-Apim-Subscription-Key: $(pulumi stack output key)\" $(pulumi stack output endpoint)\n   {\"time\":\"2019-06-17T15:16:08.227Z\",\"greeting\":\"Hello Pulumi!\"}\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-api-management.html","relUrl":"notes/classic-azure-ts-api-management.html"},{"doc":"Classic Azure Ts Aks with Diagnostics","title":"Classic Azure Ts Aks with Diagnostics","hpath":"classic-azure-ts-aks-with-diagnostics","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster with Diagnostics\n\nThis example demonstrates creating an Azure Kubernetes Service (AKS) Cluster, and enables diagnostics for the cluster. \nPlease see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands. A Kubernetes cluster and Apache web server will appear!\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including\n   an Active Directory service principal, AKS cluster, and then enables diagnostics for the cluster, all in a single gesture:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your cluster and Apache server will be ready. Your `kubeconfig` will be the application output and \n   you may also configure your `kubectl` client using the `kubeconfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ kubectl get namespaces\n   ....\n   ```\n\n5. At this point, you have a running cluster. Feel free to modify your program, and run `pulumi up` to redeploy changes.\n   The Pulumi CLI automatically detects what has changed and makes the minimal edits necessary to accomplish these\n   changes. This could be altering the existing chart, adding new Azure or Kubernetes resources, or anything, really.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-with-diagnostics.html","relUrl":"notes/classic-azure-ts-aks-with-diagnostics.html"},{"doc":"Classic Azure Ts Aks Multicluster","title":"Classic Azure Ts Aks Multicluster","hpath":"classic-azure-ts-aks-multicluster","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Multiple Azure Kubernetes Service (AKS) Clusters\n\nThis example demonstrates creating multiple Azure Kubernetes Service (AKS) clusters in different regions and with\ndifferent node counts. Please see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\n## Running the Example\n\n> **Note**: Due to an issue in the Azure Terraform Provider (<https://github.com/terraform-providers/terraform-provider-azurerm/issues/1635>) the\n> creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see index.ts), is delayed and may not\n> be available when the cluster is created.  If you get a Service Principal not found error, as a work around, you should be able to run `pulumi up`\n> again, at which time the Service Principal should have been created.\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including\n   an Active Directory service principal and AKS clusters:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your AKS clusters will be ready. The AKS cluster names will be printed as output variables\n   once `pulumi up` completes.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + aksClusterNames: [\n     +     [0]: \"akscluster-east513be264\"\n     +     [1]: \"akscluster-westece285c7\"\n       ]\n   ...\n   ```\n\n5. At this point, you have multiple AKS clusters running in different regions. Feel free to modify your program, and\n   run `pulumi up` to redeploy changes. The Pulumi CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-multicluster.html","relUrl":"notes/classic-azure-ts-aks-multicluster.html"},{"doc":"Classic Azure Ts Aks Mean","title":"Classic Azure Ts Aks Mean","hpath":"classic-azure-ts-aks-mean","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) App Using CosmosDB\n\nStands up an [Azure Kubernetes Service][aks] (AKS) cluster and a MongoDB-flavored instance of\n[CosmosDB][cosmos]. On top of the AKS cluster, we also deploy [Helm][helm] Chart with a simple\nNode.js TODO app ([`bitnami/node`][sample-mean]), swapping out the usual in-cluster MongoDB instance\nwith our managed CosmosDB instance.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/). [Follow the instructions\nhere](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\nThis example deploys a Helm Chart from [Bitnami's Helm chart repository](https://github.com/bitnami/charts)\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init\n   Enter a stack name: azure-mean\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   $ az login\n   ```\n\n3. Perform the deployment:\n\n   > **Note**: Due to an [issue](https://github.com/terraform-providers/terraform-provider-azuread/issues/156) in Azure Terraform Provider, the\n   > creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see cluster.ts), is delayed and may not\n   > be available when the cluster is created.  If you get a \"Service Principal not found\" error, as a work around, you should be able to run `pulumi up`\n   > again, at which time the Service Principal replication should have been completed. See [this issue](https://github.com/Azure/AKS/issues/1206) and\n   > [this doc](https://docs.microsoft.com/en-us/azure/aks/troubleshooting#im-receiving-errors-that-my-service-principal-was-not-found-when-i-try-to-create-a-new-cluster-without-passing-in-an-existing-one)\n   > for further details.\n\n   ```sh\n   $ pulumi up\n   Updating stack 'azure-mean'\n   Performing changes:\n\n        Type                                         Name                   Status      Info\n    +   pulumi:pulumi:Stack                          azure-mean-azure-mean  created     1 warning\n    +   ├─ azure:core:ResourceGroup                  aks                    created\n    +   ├─ azure:ad:Application                      aks                    created\n    +   ├─ azure:ad:ServicePrincipal                 aksSp                  created\n    +   ├─ azure:ad:ServicePrincipalPassword         aksSpPassword          created\n    +   ├─ azure:cosmosdb:Account                    cosmosDb               created\n    +   ├─ azure:containerservice:KubernetesCluster  aksCluster             created\n    +   ├─ pulumi:providers:kubernetes               aksK8s                 created\n    +   ├─ kubernetes:core:Secret                    mongo-secrets          created\n    +   └─ kubernetes:helm.sh:Chart                  node                   created\n    +      ├─ kubernetes:core:Service                node-node              created\n    +      └─ kubernetes:extensions:Deployment       node-node              created\n\n   ---outputs:---\n   cluster        : \"aksclusterbfb9388b\"\n   frontendAddress: \"40.76.25.71\"\n\n   info: 12 changes performed:\n       + 12 resources created\n   Update duration: 14m33.922322098s\n\n   Permalink: https://app.pulumi.com/hausdorff/azure-mean/updates/1\n   ```\n\n   We can see here in the `---outputs:---` section that our Node.js appwas allocated a public IP,\n   in this case `40.76.25.71`. It is exported with a stack output variable, `frontendAddress`. We\n   can use `curl` and `grep` to retrieve the `<title>` of the site the proxy points at.\n\n   ```sh\n   $ curl -sL $(pulumi stack output frontendAddress) | grep \"<title>\"\n       <title>Node/Angular Todo App</title>>\n   ```\n\n## Next steps\n\nOne of the interesting aspects of this example is the way it demonstrates how easy it is to use\nAzure resources to configure Kubernetes resources, without the need for intermediate APIs such as\n[OSBA](https://osba.sh/). In particular, this example uses the connection strings exposed by the\nCosmosDB instance to configure the `bitnami/node` Helm Chart to connect to CosmosDB, instead of\ncreating and connecting to an in-cluster MongoDB instance.\n\nIn `index.ts`, we see the MongoDB-flavored CosmosDB resource definition:\n\n```javascript\n// Create a MongoDB-flavored instance of CosmosDB.\nconst cosmosdb = new azure.cosmosdb.Account(\"cosmosDb\", {\n    kind: \"MongoDB\",\n    resourceGroupName: config.resourceGroup.name,\n    location: config.location,\n    consistencyPolicy: { ... },\n    offerType: \"Standard\",\n    enableAutomaticFailover: true,\n    geoLocations: [ ... ]\n});\n```\n\nAnd then subsequently, in the same file, we see that we use this CosmosDB object to create a\nKubernetes `Secret` containing the connection credentials, which is then consumed by the\n`bitnami/node` Helm chart to connect.\n\n```javascript\n// Create secret from MongoDB connection string.\nconst mongoConnStrings = new k8s.core.v1.Secret(\n    \"mongo-secrets\",\n    {\n        metadata: { name: \"mongo-secrets\" },\n        data: mongoHelpers.parseConnString(cosmosdb.connectionStrings)\n    },\n    { provider: k8sProvider }\n);\n\n// Boot up nodejs Helm chart example using CosmosDB in place of in-cluster MongoDB.\nconst node = new k8s.helm.v2.Chart(\n    \"node\",\n    {\n        repo: \"bitnami\",\n        chart: \"node\",\n        version: \"4.0.1\",\n        values: {\n            serviceType: \"LoadBalancer\",\n            mongodb: { install: false },\n            externaldb: { ssl: true, secretName: \"mongo-secrets\" }\n        }\n    },\n    { providers: { kubernetes: k8sProvider }, dependsOn: mongoConnStrings }\n);\n```\n\n[sample-mean]: https://github.com/bitnami/sample-mean\n\n[aks]: https://azure.microsoft.com/en-us/services/kubernetes-service/\n\n[cosmos]: https://azure.microsoft.com/en-us/services/cosmos-db/\n\n[helm]: https://www.helm.sh/\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [mongoHelpers.ts](/assets/mongohelpers.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-mean.html","relUrl":"notes/classic-azure-ts-aks-mean.html"},{"doc":"Classic Azure Ts Aks Keda","title":"Classic Azure Ts Aks Keda","hpath":"classic-azure-ts-aks-keda","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Azure Functions with KEDA\n\nThis example demonstrates creating an Azure Kubernetes Service (AKS) Cluster, and deploying an Azure Function App with Kubernetes-based Event Driven Autoscaling (KEDA) into it, all in one Pulumi program. Please see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS and <https://docs.microsoft.com/en-us/azure/azure-functions/functions-kubernetes-keda> for more information about KEDA.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\nThis example deploys a Helm Chart from Kedacore Helm chart repository.\n\nIf you are using Helm v2:\n\n```bash\n$ helm init --client-only\n$ helm repo add kedacore https://kedacore.github.io/charts\n$ helm repo update\n```\n\nIf you are using Helm v3:\n\n```\n$ helm repo add kedacore https://kedacore.github.io/charts\n$ helm repo update\n```\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the Azure region to deploy to:\n\n   ```bash\n   $ pulumi config set azure:location <value>\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including an Active Directory service principal, AKS cluster, and then deploys the Apache Helm Chart, and an Azure Function managed by KEDA, all in a single gesture:\n\n   > **Note**: Due to an [issue](https://github.com/terraform-providers/terraform-provider-azuread/issues/156) in Azure Terraform Provider, the\n   > creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see cluster.ts), is delayed and may not\n   > be available when the cluster is created.  If you get a \"Service Principal not found\" error, as a work around, you should be able to run `pulumi up`\n   > again, at which time the Service Principal replication should have been completed. See [this issue](https://github.com/Azure/AKS/issues/1206) and\n   > [this doc](https://docs.microsoft.com/en-us/azure/aks/troubleshooting#im-receiving-errors-that-my-service-principal-was-not-found-when-i-try-to-create-a-new-cluster-without-passing-in-an-existing-one)\n   > for further details.\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your cluster and Azure Function app will be ready. Four output variables will be printed, reflecting your cluster name (`clusterName`), Kubernetes config (`kubeConfig`), Storage Account name (`storageAccountName`), and storage queue name (`queueName`).\n\n   Using these output variables, you may configure your `kubectl` client using the `kubeConfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get deployment\n   NAME           READY     UP-TO-DATE     AVAILABLE    AGE\n   keda-edge      1/1       1              1            9m\n   queue-handler  0/0       0              0            2m\n   ```\n\n   Now, go ahead an enqueue a new message to the storage queue. You may use a tool like [Microsoft Azure Storage Explorer](https://azure.microsoft.com/en-us/features/storage-explorer/) to navigate to the queue and add a new message.\n\n   Wait for a minute and then query the deployments again:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get deployment\n   NAME           READY     UP-TO-DATE     AVAILABLE    AGE\n   keda-edge      1/1       1              1            14m\n   queue-handler  1/1       1              1            7m\n   ```\n\n   Note that the `queue-handler` deployment got 1 instance ready. Looking at the pods:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get pod\n   NAME                          READY   STATUS    RESTARTS   AGE                                    keda-edge-97664558c-q2mkd     1/1     Running   0          15m\n   queue-handler-c496dcfc-mb6tx  1/1     Running   0          2m3s\n   ```\n\n   There's now a pod processing queue messages. The message should be gone from the storage queue at this point. Query the logs of the pod:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl logs queue-handler-c496dcfc-mb6tx\n   ...\n   C# Queue trigger function processed: Test Message\n   Executed 'queue' (Succeeded, Id=ecd9433a-c6b7-468e-b6c6-6e7909bafce7)\n   ...\n   ```\n\n5. At this point, you have a running cluster. Feel free to modify your program, and run `pulumi up` to redeploy changes.  The Pulumi CLI automatically detects what has changed and makes the minimal edits necessary to accomplish these changes. This could be altering the existing chart, adding new Azure or Kubernetes resources, or anything, really.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [index.ts](/assets/index.ts)\n- [keda.ts](/assets/keda.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-keda.html","relUrl":"notes/classic-azure-ts-aks-keda.html"},{"doc":"Functionapp","title":"Functionapp","hpath":"classic-azure-ts-aks-keda.functionapp","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [host.json](/assets/host.json)\n- [queue.cs](/assets/queue.cs)\n- [queue.csproj](/assets/queue.csproj)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-keda.functionapp.html","relUrl":"notes/classic-azure-ts-aks-keda.functionapp.html"},{"doc":"Classic Azure Ts Aks Helm","title":"Classic Azure Ts Aks Helm","hpath":"classic-azure-ts-aks-helm","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Helm Chart\n\nThis example demonstrates creating an Azure Kubernetes Service (AKS) Cluster, and deploying a Helm Chart into it,\nall in one Pulumi program. Please see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\nThis example deploys a Helm Chart from [Bitnami's Helm chart repository](https://github.com/bitnami/charts)\n\nIn addition you will need the following CLI tools:\n\n```\n$ az --version # Azure CLI\nazure-cli                         2.11.1\ncore                              2.11.1\ntelemetry                          1.0.5\n...\n\n$ npm --version # Node.js Package Manager\n6.14.6\n\n$ tsc --version # TypeScript compiler\nVersion 4.0.2\n```\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands. A Kubernetes cluster and Apache web server will appear!\n\n1. Login to your Azure account:\n\n   ```bash\n   $ az login\n   ```\n\n2. Download nodejs dependencies:\n\n   ```bash\n   $ npm install\n   ```\n\n3. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n4. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   ```\n\n5. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including\n   an Active Directory service principal, AKS cluster, and then deploys the Apache Helm Chart, all in a single gesture:\n\n   > **Note**: Due to an [issue](https://github.com/terraform-providers/terraform-provider-azuread/issues/156) in Azure Terraform Provider, the\n   > creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see cluster.ts), is delayed and may not\n   > be available when the cluster is created.  If you get a \"Service Principal not found\" error, as a work around, you should be able to run `pulumi up`\n   > again, at which time the Service Principal replication should have been completed. See [this issue](https://github.com/Azure/AKS/issues/1206) and\n   > [this doc](https://docs.microsoft.com/en-us/azure/aks/troubleshooting#im-receiving-errors-that-my-service-principal-was-not-found-when-i-try-to-create-a-new-cluster-without-passing-in-an-existing-one)\n   > for further details.\n\n   ```bash\n   $ pulumi up\n   ```\n\n6. After a couple minutes, your cluster and Apache server will be ready. Three output variables will be printed,\n   reflecting your cluster name (`cluster`), Kubernetes config (`kubeConfig`) and server IP address (`serviceIP`).\n\n   Using these output variables, you may `curl` your Apache server's `serviceIP`:\n\n   ```bash\n   $ curl $(pulumi stack output serviceIP)\n   <html><body><h1>It works!</h1></body></html>\n   ```\n\n   And you may also configure your `kubectl` client using the `kubeConfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get service\n   NAME            TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                      AGE\n   apache-apache   LoadBalancer   10.0.125.196   40.76.52.208   80:32080/TCP,443:31419/TCP   9m\n   kubernetes      ClusterIP      10.0.0.1       <none>         443/TCP                      13h\n   ```\n\n7. At this point, you have a running cluster. Feel free to modify your program, and run `pulumi up` to redeploy changes.\n   The Pulumi CLI automatically detects what has changed and makes the minimal edits necessary to accomplish these\n   changes. This could be altering the existing chart, adding new Azure or Kubernetes resources, or anything, really.\n\n8. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n9. If you make changes to the example `ts` code outside of an IDE, run\n   the TypeScript compiler to check your changes:\n\n   ```bash\n   $ tsc --build tsconfig.json\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-ts-aks-helm.html","relUrl":"notes/classic-azure-ts-aks-helm.html"},{"doc":"Classic Azure Py Webserver Component","title":"Classic Azure Py Webserver Component","hpath":"classic-azure-py-webserver-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Azure Virtual Machine with ComponentResource\n\nThis example uses `pulumi.ComponentResource` as described [here](https://www.pulumi.com/docs/intro/concepts/resources/#components) \nto create and deploy an Azure Virtual Machine and starts a HTTP server on it.\n\nThe use of `pulumi.ComponentResource` demonstrates how multiple low-level resources \ncan be composed into a higher-level, reusable abstraction.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the Azure environment:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   ```\n\n3. Set the required configuration for this example. This example requires you to supply a username and password to\n   the virtual machine that we are going to create.\n\n   ````\n   ```bash\n   $ pulumi config set username myusername\n   ```\n\n   The password is a secret, so we can ask Pulumi to encrypt the configuration:\n\n   ```bash\n   $ pulumi config set --secret password Hunter2hunter2\n   ```\n   ````\n\n4. Run `pulumi up` to preview and deploy the changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n\n       Type                                  Name                              Plan\n   +   pulumi:pulumi:Stack                   azure-py-webserver-component-dev  create\n   +   ├─ custom:app:WebServer               server                            create\n   +   │  ├─ azure:network:PublicIp          server-ip                         create\n   +   │  ├─ azure:network:NetworkInterface  server-nic                        create\n   +   │  └─ azure:compute:VirtualMachine    server-vm                         create\n   +   └─ azure:core:ResourceGroup           server                            create\n   +      └─ azure:network:VirtualNetwork    server-network                    create\n   +         └─ azure:network:Subnet         server-subnet                     create\n\n   Resources:\n       + 8 to create\n\n   Do you want to perform this update? yes\n   Updating (dev):\n\n       Type                                  Name                              Status\n   +   pulumi:pulumi:Stack                   azure-py-webserver-component-dev  created\n   +   ├─ custom:app:WebServer               server                            created\n   +   │  ├─ azure:network:PublicIp          server-ip                         created\n   +   │  ├─ azure:network:NetworkInterface  server-nic                        created\n   +   │  └─ azure:compute:VirtualMachine    server-vm                         created\n   +   └─ azure:core:ResourceGroup           server                            created\n   +      └─ azure:network:VirtualNetwork    server-network                    created\n   +         └─ azure:network:Subnet         server-subnet                     created\n\n   Outputs:\n       public_ip: \"13.64.196.146\"\n\n   Resources:\n       + 8 created\n\n   Duration: 2m9s\n   ```\n\n5. Get the IP address of the newly-created instance from the stack's outputs: \n\n   ```bash\n   $ pulumi stack output public_ip\n   13.64.196.146\n   ```\n\n6. Check to see that your server is now running:\n\n   ```bash\n   $ curl http://$(pulumi stack output public_ip)\n   Hello, World!\n   ```\n\n7. Destroy the stack:\n\n   ```bash\n   $ pulumi destroy -y\n   Previewing destroy (dev):\n\n       Type                                  Name                              Plan\n   -   pulumi:pulumi:Stack                   azure-py-webserver-component-dev  delete\n   -   ├─ custom:app:WebServer               server                            delete\n   -   │  ├─ azure:compute:VirtualMachine    server-vm                         delete\n   -   │  ├─ azure:network:NetworkInterface  server-nic                        delete\n   -   │  └─ azure:network:PublicIp          server-ip                         delete\n   -   └─ azure:core:ResourceGroup           server                            delete\n   -      └─ azure:network:VirtualNetwork    server-network                    delete\n   -         └─ azure:network:Subnet         server-subnet                     delete\n\n   Outputs:\n   - public_ip: \"13.64.196.146\"\n\n   Resources:\n       - 8 to delete\n\n   Destroying (dev):\n\n       Type                                  Name                              Status\n   -   pulumi:pulumi:Stack                   azure-py-webserver-component-dev  deleted\n   -   ├─ custom:app:WebServer               server                            deleted\n   -   │  ├─ azure:compute:VirtualMachine    server-vm                         deleted\n   -   │  ├─ azure:network:NetworkInterface  server-nic                        deleted\n   -   │  └─ azure:network:PublicIp          server-ip                         deleted\n   -   └─ azure:core:ResourceGroup           server                            deleted\n   -      └─ azure:network:VirtualNetwork    server-network                    deleted\n   -         └─ azure:network:Subnet         server-subnet                     deleted\n\n   Outputs:\n   - public_ip: \"13.64.196.146\"\n\n   Resources:\n       - 8 deleted\n\n   Duration: 4m28s\n\n   The resources in the stack have been deleted, but the history and configuration associated with the stack are still maintained.\n   If you want to remove the stack completely, run 'pulumi stack rm dev'.\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n- [webserver.py](/assets/webserver.py)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-webserver-component.html","relUrl":"notes/classic-azure-py-webserver-component.html"},{"doc":"Classic Azure Py Vm Scaleset","title":"Classic Azure Py Vm Scaleset","hpath":"classic-azure-py-vm-scaleset","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure VM Scale Sets\n\nThis example provisions a Scale Set of Linux web servers with nginx deployed, configured the auto-scaling based on CPU load, puts a Load Balancer in front of them, and gives it a public IP address.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Configure the app deployment.\n\n   ```bash\n   $ pulumi config set azure:location westus    # any valid Azure region will do\n   ```\n\n   Optionally, configure the username and password for the admin user. Otherwise, they will be auto-generated.\n\n   ```bash\n   $ pulumi config set adminUser webmaster\n   $ pulumi config set adminPassword <your-password> --secret\n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update:\n   ...\n\n   Updating:\n   ...\n   Resources:\n       13 created\n   Update duration: 2m19s\n   ```\n\n5. Check the domain name of the PIP:\n\n   ```bash\n   $ pulumi stack output publicAddress\n   dsuv3vqbgi.westeurope.cloudapp.azure.com\n   $ curl http://$(pulumi stack output publicAddress)\n   #nginx welcome screen HTML is returned\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-vm-scaleset.html","relUrl":"notes/classic-azure-py-vm-scaleset.html"},{"doc":"Classic Azure Py Msi Keyvault Rbac","title":"Classic Azure Py Msi Keyvault Rbac","hpath":"classic-azure-py-msi-keyvault-rbac","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Managing Secrets and Secure Access in Azure Applications\n\n[Managed identities](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/) for Azure resources provides Azure services with an automatically managed identity in Azure Active Directory (Azure AD).\n\nThis example demonstrates using a managed identity with Azure App Service to access Azure KeyVault, Azure Storage, and Azure SQL Database without passwords or secrets.\n\nThe application consists of several parts:\n\n- An ASP.NET Application which reads data from a SQL Database and from a file in Blob Storage\n- App Service which host the application. The application binaries are placed in Blob Storage, with Blob Url placed as a secret in Azure Key Vault\n- App Service has a Managed Identity enabled\n- The identify is granted access to the SQL Server, Blob Storage, and Key Vault\n- No secret information is placed in App Service configuration: all access rights are derived from Active Directory\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Build and publish the ASP.NET Core project:\n\n   ```bash\n   $ dotnet publish webapp\n   ```\n\n4. Set an appropriate Azure location like:\n\n   ```bash\n   $ pulumi config set azure:location westus\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 4m16s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```bash\n   $ pulumi stack output endpoint\n   https://app129968b8.azurewebsites.net/\n   $ curl \"$(pulumi stack output endpoint)\"\n   Hello 311378b3-16b7-4889-a8d7-2eb77478beba@50f73f6a-e8e3-46b6-969c-bf026712a650! Here is your...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-msi-keyvault-rbac.html","relUrl":"notes/classic-azure-py-msi-keyvault-rbac.html"},{"doc":"Webapp","title":"Webapp","hpath":"classic-azure-py-msi-keyvault-rbac.webapp","content":"## Imported Assets\n\n- [Program.cs](/assets/program.cs)\n- [Reader.cs](/assets/reader.cs)\n- [Startup.cs](/assets/startup.cs)\n- [webapp.csproj](/assets/webapp.csproj)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-msi-keyvault-rbac.webapp.html","relUrl":"notes/classic-azure-py-msi-keyvault-rbac.webapp.html"},{"doc":"Classic Azure Py Hdinsight Spark","title":"Classic Azure Py Hdinsight Spark","hpath":"classic-azure-py-hdinsight-spark","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Spark on Azure HDInsight\n\nAn example Pulumi component that deploys a Spark cluster on Azure HDInsight.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Specify the Azure location to use:\n\n   ```bash\n   $ pulumi config set azure:location WestUS\n   ```\n\n4. Define Spark username and password (make it complex enough to satisfy Azure policy):\n\n   ```bash\n   $ pulumi config set username <value>\n   $ pulumi config set --secret password <value>\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 5 changes performed:\n       + 5 resources created\n   Update duration: 15m6s\n   ```\n\n6. Check the deployed Spark endpoint:\n\n   ```bash\n   $ pulumi stack output endpoint\n   https://myspark1234abcd.azurehdinsight.net/\n\n   # For instance, Jupyter notebooks are available at https://myspark1234abcd.azurehdinsight.net/jupyter/\n   # Follow https://docs.microsoft.com/en-us/azure/hdinsight/spark/apache-spark-load-data-run-query to test it out\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-hdinsight-spark.html","relUrl":"notes/classic-azure-py-hdinsight-spark.html"},{"doc":"Classic Azure Py Arm Template","title":"Classic Azure Py Arm Template","hpath":"classic-azure-py-arm-template","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Resource Manager (ARM) Template\n\nThis example simply deploys an existing Azure Resource Manager (ARM) template using Pulumi. This accepts\nany existing valid ARM template, enabling easy migration from existing JSON templates and towards infrastructure\nas code using Pulumi. Once deployed, it is easy to incrementally refactor resources at a time out of the template\nand into code.\n\n[Read more about ARM templates here](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview).\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/). [Follow the instructions\nhere](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init\n   Enter a stack name: azure-arm-dev\n   ```\n\n2. Set the required configuration variables for this program, and log into Azure:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set azure:location westus2\n   $ az login\n   ```\n\n3. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n   Updating stack 'azure-arm-dev'\n   Performing changes:\n\n        Type                              Name                      Status\n    +   pulumi:pulumi:Stack               azure-arm--azure-arm-dev  created\n    +   ├─ azure:core:ResourceGroup       rg                        created\n    +   └─ azure:core:TemplateDeployment  arm-dep                   created\n\n   Outputs:\n       storageAccountName: \"abevrwebgje2wstorage\"\n\n   Resources:\n       + 3 created\n\n   Duration: 1m8s\n   ```\n\n   Notice here that the `storageAccountName` allocated by the ARM template deployment is exported.\n\n4. Tidy up and delete all resources allocated by your deployment:\n\n   ```bash\n   $ pulumi destroy -y --skip-preview\n   $ pulumi stack rm -y\n   ```\n\n## Next Steps\n\nFor more Azure examples, please [check out the Azure Getting Started Guide](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-arm-template.html","relUrl":"notes/classic-azure-py-arm-template.html"},{"doc":"Classic Azure Py Aks Multicluster","title":"Classic Azure Py Aks Multicluster","hpath":"classic-azure-py-aks-multicluster","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Multiple Azure Kubernetes Service (AKS) Clusters\n\nThis example demonstrates creating multiple Azure Kubernetes Service (AKS) clusters in different regions and with\ndifferent node counts. Please see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS.\n\n# Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\n# Running the Example\n\n> **Note**: Due to an issue in the Azure Terraform Provider (<https://github.com/terraform-providers/terraform-provider-azurerm/issues/1635>) the\n> creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see index.ts), is delayed and may not\n> be available when the cluster is created.  If you get a Service Principal not found error, as a work around, you should be able to run `pulumi up`\n> again, at which time the Service Principal should have been created.\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including\n   an Active Directory service principal and AKS clusters:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your AKS clusters will be ready. The AKS cluster names will be printed as output variables\n   once `pulumi up` completes.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + aksClusterNames: [\n     +     [0]: \"akscluster-east513be264\"\n     +     [1]: \"akscluster-westece285c7\"\n       ]\n   ...\n   ```\n\n5. At this point, you have multiple AKS clusters running in different regions. Feel free to modify your program, and\n   run `pulumi up` to redeploy changes. The Pulumi CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-py-aks-multicluster.html","relUrl":"notes/classic-azure-py-aks-multicluster.html"},{"doc":"Classic Azure Go Webserver Component","title":"Classic Azure Go Webserver Component","hpath":"classic-azure-go-webserver-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Component Using Azure Virtual Machine\n\nThis example provisions a configurable number of Linux web servers in an Azure Virtual Machine, and returns the\nresulting public IP addresses. This example uses a reusable [Pulumi component](https://www.pulumi.com/docs/intro/concepts/resources/#components) to simplify the creation of new virtual machines. By\ndefining a `WebServer` class, we can hide many details (see [here](./webserver.go) for its definition).\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your Azure account](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) (if your `az` CLI is configured, no further changes are required)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the deployment. The username and password here will be used to configure the Virtual Machine. The\n   password must adhere to the [Azure restrictions on VM passwords](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm).\n\n   ```\n   $ pulumi config set azure:location westus  # any valid Azure region will do\n   $ pulumi config set username webmaster\n   $ pulumi config set password <your-password> --secret\n   $ pulumi config set count 5                # optional -- will default to 2 if left out\n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 4m27s\n   ```\n\n5. Check the resulting IP addresses:\n\n   ```\n   $ pulumi stack output ipAddresses\n   [ 40.112.181.239, ..., 40.112.181.240 ]\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n- [webserver.go](/assets/webserver.go)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-go-webserver-component.html","relUrl":"notes/classic-azure-go-webserver-component.html"},{"doc":"Classic Azure Go Aks Multicluster","title":"Classic Azure Go Aks Multicluster","hpath":"classic-azure-go-aks-multicluster","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Multiple Azure Kubernetes Service (AKS) Clusters\n\nThis example demonstrates creating multiple Azure Kubernetes Service (AKS) clusters in different regions and with\ndifferent node counts. Please see <https://docs.microsoft.com/en-us/azure/aks/> for more information about AKS.\n\n## Prerequisites\n\nEnsure you have [downloaded and installed the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/).\n\nWe will be deploying to Azure, so you will need an Azure account. If you don't have an account,\n[sign up for free here](https://azure.microsoft.com/en-us/free/).\n[Follow the instructions here](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) to connect Pulumi to your Azure account.\n\n## Running the Example\n\n> **Note**: Due to an issue in the Azure Terraform Provider (<https://github.com/terraform-providers/terraform-provider-azurerm/issues/1635>) the\n> creation of an Azure Service Principal, which is needed to create the Kubernetes cluster (see main.go), is delayed and may not\n> be available when the cluster is created.  If you get a Service Principal not found error, as a work around, you should be able to run `pulumi up`\n> again, at which time the Service Principal should have been created.\n\nAfter cloning this repo, `cd` into it and run these commands.\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure:environment public\n   $ pulumi config set password --secret [your-cluster-password-here]\n   $ ssh-keygen -t rsa -f key.rsa\n   $ pulumi config set sshPublicKey < key.rsa.pub\n   ```\n\n3. Deploy everything with the `pulumi up` command. This provisions all the Azure resources necessary, including\n   an Active Directory service principal and AKS clusters:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your AKS clusters will be ready. The AKS cluster names will be printed as output variables\n   once `pulumi up` completes.\n\n   ```bash\n   $ pulumi up\n   ...\n\n   Outputs:\n     + aksClusterNames: [\n     +     [0]: \"akscluster-east7f398a0b\"\n     +     [1]: \"akscluster-west7ee96bf1\"\n       ]\n   ...\n   ```\n\n5. At this point, you have multiple AKS clusters running in different regions. Feel free to modify your program, and\n   run `pulumi up` to redeploy changes. The Pulumi CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-go-aks-multicluster.html","relUrl":"notes/classic-azure-go-aks-multicluster.html"},{"doc":"Classic Azure Fs Appservice","title":"Classic Azure Fs Appservice","hpath":"classic-azure-fs-appservice","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service with SQL Database and Application Insights\n\nStarting point for building web application hosted in Azure App Service.\n\nProvisions Azure SQL Database and Azure Application Insights to be used in combination\nwith App Service.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Configure the location to deploy the resources to:\n\n   ```\n   $ pulumi config set azure:location <location>\n   ```\n\n4. Define SQL Server password (make it complex enough to satisfy Azure policy):\n\n   ```\n   pulumi config set --secret sqlPassword <value>\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 1m14.59910109s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://azpulumi-as0ef47193.azurewebsites.net\n   $ curl \"$(pulumi stack output endpoint)\"\n   <html>\n       <body>\n           <h1>Greetings from Azure App Service!</h1>\n       </body>\n   </html>\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.AppService.fsproj](/assets/azure.fsproj)\n- [Program.fs](/assets/program.fs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-appservice.html","relUrl":"notes/classic-azure-fs-appservice.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"classic-azure-fs-appservice.wwwroot","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-appservice.wwwroot.html","relUrl":"notes/classic-azure-fs-appservice.wwwroot.html"},{"doc":"Classic Azure Fs Aks","title":"Classic Azure Fs Aks","hpath":"classic-azure-fs-aks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster\n\nStands up an [Azure Kubernetes Service](https://azure.microsoft.com/en-us/services/kubernetes-service/) (AKS) cluster.\n\n## Prerequisite\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n3. [Install Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)\n\nConfigure the environment:\n\n```bash\n$ pulumi config set azure:location westeurope\n$ az login\n```\n\n## Deploying the App (short version)\n\nTo make it easier to try out you can use the available [Makefile](Makefile), like:\n\n```bash\n$ make deploy\n```\n\nThis will build the project and run `pulumi up -y`. If you haven't created a stack you will be prompted to do so.\n\nWhen the deploy is finished you can export the kubernetes config by running\n\n```bash\n$ make exportconfig\n```\n\nWith the config exported you can now test to access the kubernetes cluster\n\n```bash\n$ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n```\n\nIf you want to cleanup when you are done you can run\n\n```bash\n$ make destroy\n$ make rmstack\n```\n\nTo list all make targets run\n\n```bash\n$ make help\n```\n\nThe [Makefile](Makefile) also works as documentation on what commands you need to run to deploy the application.\n\n## Deploying the app (native version)\n\nIf you don't have make installed you will have to run the \"native\" commands. To deploy you run \n\n```bash\n$ pulumi up --yes\n```\n\nThis will prompt you to create a stack if you haven't done so already. When the deploy is ready you can export the kubernetes config with\n\n```bash\n$ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n```\n\nand then test the deployment with\n\n```bash\n$ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n```\n\nIf you want to cleanup the cloud resources when you are done you can run\n\n```bash\n$ pulumi destroy -y\n$ pulumi stack rm -y\n```\n\n* * *\n\n## Imported Assets\n\n- [Azure.Aks.fsproj](/assets/azure.fsproj)\n- [Makefile](/assets/makefile)\n- [Program.fs](/assets/program.fs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-aks.html","relUrl":"notes/classic-azure-fs-aks.html"},{"doc":"Classic Azure Fs Aci","title":"Classic Azure Fs Aci","hpath":"classic-azure-fs-aci","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Custom Docker Image running in Azure Container Instances\n\nStarting point for building web application hosted in Azure Container Instances.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Configure the location to deploy the resources to:\n\n   ```\n   $ pulumi config set azure:location <location>\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 55 changes performed:\n       + 10 resources created\n   Update duration: 1m56s\n   ```\n\n5. Check the deployed container endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://acifsharp.westeurope.azurecontainer.io\n   $ curl \"$(pulumi stack output endpoint)\"\n   <html>\n   <head><meta charset=\"UTF-8\">\n   <title>Hello, Pulumi!</title></head>\n   <body>\n       <p>Hello, containers!</p>\n       <p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n   </body></html>\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.Aci.fsproj](/assets/azure.fsproj)\n- [Program.fs](/assets/program.fs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-aci.html","relUrl":"notes/classic-azure-fs-aci.html"},{"doc":"App","title":"App","hpath":"classic-azure-fs-aci.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-aci.app.html","relUrl":"notes/classic-azure-fs-aci.app.html"},{"doc":"Content","title":"Content","hpath":"classic-azure-fs-aci.app.content","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-fs-aci.app.content.html","relUrl":"notes/classic-azure-fs-aci.app.content.html"},{"doc":"Classic Azure Cs Webserver","title":"Classic Azure Cs Webserver","hpath":"classic-azure-cs-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Azure Virtual Machine\n\nThis example deploys an Azure Virtual Machine and starts a HTTP server on it.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n2. Set an appropriate Azure location like:\n\n   ```\n   $ pulumi config set azure:location westus\n   ```\n\n3. Run `pulumi up` to preview and deploy the changes:\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n\n   7 resources created\n   ```\n\n5. Get the IP address of the newly-created instance from the stack's outputs:\n\n   ```\n   $ pulumi stack output IpAddress\n   137.117.15.111\n   ```\n\n6. Check to see that your server is now running:\n\n   ```\n   $ curl http://$(pulumi stack output IpAddress)\n   Hello, World!\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.WebServer.csproj](/assets/azure.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [WebServerStack.cs](/assets/webserverstack.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-webserver.html","relUrl":"notes/classic-azure-cs-webserver.html"},{"doc":"Classic Azure Cs Vm Scaleset","title":"Classic Azure Cs Vm Scaleset","hpath":"classic-azure-cs-vm-scaleset","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure VM Scale Sets\n\nThis example deploys Scale Set of Linux web servers with autoscaling and starts a HTTP server on it.\nA Load Balancer is connected in order to balance among VMs.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n2. Set an appropriate Azure location like:\n\n   ```\n   $ pulumi config set azure:location westus\n   ```\n\n3. Run `pulumi up` to preview and deploy the changes:\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n\n   7 resources created\n   ```\n\n5. Get the IP address of the newly-created instance from the stack's outputs:\n\n   ```\n   $ pulumi stack output IpAddress\n   137.117.15.111\n   ```\n\n6. Check to see that your server is now running:\n\n   ```\n   $ curl http://$(pulumi stack output IpAddress)\n   Hello, World By <HOSTNAME>!\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.VmScaleset.csproj](/assets/azure.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [VmScalesetStack.cs](/assets/vmscalesetstack.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-vm-scaleset.html","relUrl":"notes/classic-azure-cs-vm-scaleset.html"},{"doc":"Classic Azure Cs Msi Keyvault Rbac","title":"Classic Azure Cs Msi Keyvault Rbac","hpath":"classic-azure-cs-msi-keyvault-rbac","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Managing Secrets and Secure Access in Azure Applications\n\n[Managed identities](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/) for Azure resources provides Azure services with an automatically managed identity in Azure Active Directory (Azure AD).\n\nThis example demonstrates using a managed identity with Azure App Service to access Azure KeyVault, Azure Storage, and Azure SQL Database without passwords or secrets.\n\nThe application consists of several parts:\n\n- An ASP.NET Application which reads data from a SQL Database and from a file in Blob Storage\n- App Service which host the application. The application binaries are placed in Blob Storage, with Blob Url placed as a secret in Azure Key Vault\n- App Service has a Managed Identity enabled\n- The identify is granted access to the SQL Server, Blob Storage, and Key Vault\n- No secret information is placed in App Service configuration: all access rights are derived from Active Directory\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Build and publish the ASP.NET Core project:\n\n   ```\n   $ dotnet publish webapp\n   ```\n\n4. Set an appropriate Azure location like:\n\n   ```\n   $ pulumi config set azure:location westus\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 15 changes performed:\n       + 15 resources created\n   Update duration: 4m16s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output Endpoint\n   https://app129968b8.azurewebsites.net/\n   $ curl \"$(pulumi stack output Endpoint)\"\n   Hello 311378b3-16b7-4889-a8d7-2eb77478beba@50f73f6a-e8e3-46b6-969c-bf026712a650! Here is your...\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [AppStack.cs](/assets/appstack.cs)\n- [Azure.KeyVault.csproj](/assets/azure.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-msi-keyvault-rbac.html","relUrl":"notes/classic-azure-cs-msi-keyvault-rbac.html"},{"doc":"Webapp","title":"Webapp","hpath":"classic-azure-cs-msi-keyvault-rbac.webapp","content":"## Imported Assets\n\n- [Program.cs](/assets/program.cs)\n- [Reader.cs](/assets/reader.cs)\n- [Startup.cs](/assets/startup.cs)\n- [webapp.csproj](/assets/webapp.csproj)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-msi-keyvault-rbac.webapp.html","relUrl":"notes/classic-azure-cs-msi-keyvault-rbac.webapp.html"},{"doc":"Classic Azure Cs Cosmosapp Component","title":"Classic Azure Cs Cosmosapp Component","hpath":"classic-azure-cs-cosmosapp-component","content":"# Reusable Component to Create Globally-distributed Applications with Azure Cosmos DB\n\nThis example demonstrates the usage of Pulumi to create globally-distributed applications with Azure Cosmos DB as the backend and pluggable infrastrustructure as the web tier.\n\nThe application shows several notable features:\n\n1. Easy global deployments - a config setting provides a list of all the regions to deploy and a single execution deploys across them all.\n2. Abstraction - the `CosmosApp` component - abstracts away all the common logic for a global app with Cosmos DB multi-region data distribution and Traffic Manager for routing the traffic.\n3. Multi-model - an implementation example is currently provided for serverless functions and virtual machines.\n\n## `CosmosApp` component\n\nThe [`CosmosApp`](CosmosApp.cs) defines a skeleton for the application. While not limiting the type of compute resources, it creates the multi-regional pieces of the infrastructure:\n\n![Cosmos App](https://github.com/mikhailshilkov/pulumi-cosmos/raw/master/pictures/globalapp.png)\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n#### Step 1: Create a new stack\n\n```\n$ pulumi stack init dev\n```\n\n#### Step 2: Log in to the Azure CLI\n\nYou will be prompted to do this during deployment if you forget this step.\n\n```\n$ az login\n```\n\n#### Step 3: Build and publish the Azure Functions project:\n\n````\n```\n$ dotnet publish app\n```\n````\n\n#### Step 4: Configure the list of regions to deploy to\n\n```\n$ pulumi config set azure:location westus\n$ pulumi config set locations westus,westeurope\n```\n\n#### Step 5: Deploy your changes\n\nRun `pulumi up` to preview and deploy changes:\n\n```\n$ pulumi up\nPreviewing changes:\n+  azure-cs-cosmosapp-component-dev  create\n+  examples:azure:CosmosApp vms create\n+  azure:network:VirtualNetwork vnet-westeurope create\n+  azure:network:PublicIp pip-westeurope create\n+  azure:trafficmanager:Profile tmvms create\n+  azure:trafficmanager:Endpoint tmvmswesteurope create\n+  azure:cosmosdb:Account cosmos-vms\n...\n```\n\n### Step 6: Check the deployed website endpoints\n\nThree endpoints are now available. For example,\n\n```\n$ pulumi stack output VmssEndpoint\nhttp://vmssrgcc15ea50.trafficmanager.net/cosmos\n\n$ curl \"$(pulumi stack output VmssEndpoint)\"\nDocument 'cosmos' not found\n```\n\nGo to the Azure portal and add a document with the ID \"cosmos\" to receive a non-empty response.\n\n### Step 7: Clean up\n\nOnce you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n```bash\n$ pulumi destroy --yes\n$ pulumi stack rm --yes\n```\n\n* * *\n\n## Imported Assets\n\n- [ArchiveFunctionApp.cs](/assets/archivefunctionapp.cs)\n- [Azure.CosmosAppComponent.csproj](/assets/azure.csproj)\n- [Containers.cs](/assets/containers.cs)\n- [CosmosApp.cs](/assets/cosmosapp.cs)\n- [DemoStack.cs](/assets/demostack.cs)\n- [Extensions.cs](/assets/extensions.cs)\n- [Functions.cs](/assets/functions.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [VmScaleSets.cs](/assets/vmscalesets.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-cosmosapp-component.html","relUrl":"notes/classic-azure-cs-cosmosapp-component.html"},{"doc":"Vm","title":"Vm","hpath":"classic-azure-cs-cosmosapp-component.vm","content":"## Imported Assets\n\n- [vmCustomData.yaml](/assets/vmcustomdata.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-cosmosapp-component.vm.html","relUrl":"notes/classic-azure-cs-cosmosapp-component.vm.html"},{"doc":"Container","title":"Container","hpath":"classic-azure-cs-cosmosapp-component.container","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-cosmosapp-component.container.html","relUrl":"notes/classic-azure-cs-cosmosapp-component.container.html"},{"doc":"App","title":"App","hpath":"classic-azure-cs-cosmosapp-component.container.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-cosmosapp-component.container.app.html","relUrl":"notes/classic-azure-cs-cosmosapp-component.container.app.html"},{"doc":"App","title":"App","hpath":"classic-azure-cs-cosmosapp-component.app","content":"## Imported Assets\n\n- [Functions.csproj](/assets/functions.csproj)\n- [Hello.cs](/assets/hello.cs)\n- [host.json](/assets/host.json)\n- [local.settings.json](/assets/local.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-cosmosapp-component.app.html","relUrl":"notes/classic-azure-cs-cosmosapp-component.app.html"},{"doc":"Classic Azure Cs Botservice","title":"Classic Azure Cs Botservice","hpath":"classic-azure-cs-botservice","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Bot Service with Application Insights\n\nStarting point for building Azure Bot Service hosted in Azure App Service.\n\nProvisions Azure Bot Service, Azure Bot Channel registration and Azure Application Insights to be used in combination\nwith App Service - registering Azure AD Microsoft Application with secret.  \n\nThis will deploy the echo bot code within the ~/bot directory - you can tweak the contents or replace the contents with your own bot.  Please ensure you publish the bot first to the ~/bot/publish subfolder - following the instructions for `Publish Bot Steps`.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Publish Bot Steps\n\n1. Within the **/bot** subfolder, publish the bot to subfolder called publish:\n\n   ```bash\n   $ dotnet publish -o publish\n   ```\n\n### Pulumi Steps\n\n1. Within the **azure-cs-botservice** folder, create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Configure the location to deploy the resources to:\n\n   ```bash\n   $ pulumi config set azure:location \"North Europe\"\n   ```\n\n4. Configure the Bot Name:\n\n   ```bash\n   $ pulumi config set botName PulumiBot1\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 14 changes performed:\n       + 14 resources created\n   Update duration: 1m22s\n   ```\n\n6. Check the deployed bot using either:\n\n- Azure Portal Azure Bot Service - [Test in Webchat feature](https://docs.microsoft.com/en-us/azure/bot-service/abs-quickstart?view=azure-bot-service-4.0#test-the-bot)\n- [Bot Framework Emulator](https://github.com/Microsoft/BotFramework-Emulator) pointing to the output bot endpoint and Microsoft Application Id and the secret you supplied:\n\n  ```bash\n  $ BotEndpoint: \"https://app8asdf.azurewebsites.net/api/messages\"\n  $ MicrosoftAppId: \"b5e65403-923c-4568-z2f6-a6f41b258azz\"\n  $ MicrosoftAppPassword: \"<secret>\"    \n  ```\n\n7. Once you've finished, you can tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy -y\n   $ pulumi stack rm -y\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.BotService.csproj](/assets/azure.csproj)\n- [BotStack.cs](/assets/botstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-botservice.html","relUrl":"notes/classic-azure-cs-botservice.html"},{"doc":"Bot","title":"Bot","hpath":"classic-azure-cs-botservice.bot","content":"# SimpleBot\n\nBot Framework v4 empty bot sample.\n\nThis bot has been created using [Bot Framework](https://dev.botframework.com), it shows the minimum code required to build a bot.\n\n## Prerequisites\n\n- [.NET Core SDK](https://dotnet.microsoft.com/download) version 2.1\n\n  ```bash\n  # determine dotnet version\n  dotnet --version\n  ```\n\n## To try this sample\n\n- In a terminal, navigate to `SimpleBot`\n\n  ```bash\n  # change into project folder\n  cd SimpleBot\n  ```\n\n- Run the bot from a terminal or from Visual Studio, choose option A or B.\n\n  A) From a terminal\n\n  ```bash\n  # run the bot\n  dotnet run\n  ```\n\n  B) Or from Visual Studio\n\n  - Launch Visual Studio\n  - File -> Open -> Project/Solution\n  - Navigate to `SimpleBot` folder\n  - Select `SimpleBot.csproj` file\n  - Press `F5` to run the project\n\n## Testing the bot using Bot Framework Emulator\n\n[Bot Framework Emulator](https://github.com/microsoft/botframework-emulator) is a desktop application that allows bot developers to test and debug their bots on localhost or running remotely through a tunnel.\n\n- Install the Bot Framework Emulator version 4.3.0 or greater from [here](https://github.com/Microsoft/BotFramework-Emulator/releases)\n\n### Connect to the bot using Bot Framework Emulator\n\n- Launch Bot Framework Emulator\n- File -> Open Bot\n- Enter a Bot URL of `http://localhost:3978/api/messages`\n\n## Deploy the bot to Azure\n\nTo learn more about deploying a bot to Azure, see [Deploy your bot to Azure](https://aka.ms/azuredeployment) for a complete list of deployment instructions.\n\n## Further reading\n\n- [Bot Framework Documentation](https://docs.botframework.com)\n- [Bot Basics](https://docs.microsoft.com/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0)\n- [Activity processing](https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-activity-processing?view=azure-bot-service-4.0)\n- [Azure Bot Service Introduction](https://docs.microsoft.com/azure/bot-service/bot-service-overview-introduction?view=azure-bot-service-4.0)\n- [Azure Bot Service Documentation](https://docs.microsoft.com/azure/bot-service/?view=azure-bot-service-4.0)\n- [.NET Core CLI tools](https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x)\n- [Azure CLI](https://docs.microsoft.com/cli/azure/?view=azure-cli-latest)\n- [Azure Portal](https://portal.azure.com)\n- [Language Understanding using LUIS](https://docs.microsoft.com/en-us/azure/cognitive-services/luis/)\n- [Channels and Bot Connector Service](https://docs.microsoft.com/en-us/azure/bot-service/bot-concepts?view=azure-bot-service-4.0)\n\n* * *\n\n## Imported Assets\n\n- [AdapterWithErrorHandler.cs](/assets/adapterwitherrorhandler.cs)\n- [Program.cs](/assets/program.cs)\n- [SimpleBot.cs](/assets/simplebot.cs)\n- [SimpleBot.csproj](/assets/simplebot.csproj)\n- [SimpleBot.sln](/assets/simplebot.sln)\n- [Startup.cs](/assets/startup.cs)\n- [appsettings.Development.json](/assets/appsettings.json)\n- [appsettings.json](/assets/appsettings.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-botservice.bot.html","relUrl":"notes/classic-azure-cs-botservice.bot.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"classic-azure-cs-botservice.bot.wwwroot","content":"## Imported Assets\n\n- [default.htm](/assets/default.htm)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-botservice.bot.wwwroot.html","relUrl":"notes/classic-azure-cs-botservice.bot.wwwroot.html"},{"doc":"Properties","title":"Properties","hpath":"classic-azure-cs-botservice.bot.properties","content":"## Imported Assets\n\n- [launchSettings.json](/assets/launchsettings.json)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-botservice.bot.properties.html","relUrl":"notes/classic-azure-cs-botservice.bot.properties.html"},{"doc":"Controllers","title":"Controllers","hpath":"classic-azure-cs-botservice.bot.controllers","content":"## Imported Assets\n\n- [BotController.cs](/assets/botcontroller.cs)\n\n","url":"https://pulumi.dendron.so/notes/classic-azure-cs-botservice.bot.controllers.html","relUrl":"notes/classic-azure-cs-botservice.bot.controllers.html"},{"doc":"Azure Ts Webserver","title":"Azure Ts Webserver","hpath":"azure-ts-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Azure Virtual Machine\n\nThis example provisions a Linux web server in an Azure Virtual Machine and gives it a public IP address.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your Azure account](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) (if your `az` CLI is configured, no further changes are required)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Configure the app deployment. The username and password here will be used to configure the Virtual Machine. The\n   password must adhere to the [Azure restrictions on VM passwords](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm).\n\n   ```\n   $ pulumi config set azure-native:location westus    # any valid Azure region will do\n   $ pulumi config set username webmaster\n   $ pulumi config set password --secret <your-password> \n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n4. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 7 changes performed:\n       + 7 resources created\n   Update duration: 2m38s\n   ```\n\n6. Check the IP address:\n\n   ```\n   $ pulumi stack output ipAddress\n   40.112.181.239\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-webserver.html","relUrl":"notes/azure-ts-webserver.html"},{"doc":"Azure Ts Webapp Privateendpoint Vnet Injection","title":"Azure Ts Webapp Privateendpoint Vnet Injection","hpath":"azure-ts-webapp-privateendpoint-vnet-injection","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Deploy two App Services - Front web app with VNet injection and Back web app with a Private Endpoint\n\n**Note** This is a port of <https://github.com/Azure/azure-quickstart-templates/tree/master/101-webapp-privateendpoint-vnet-injection> to Pulumi's native Azure SDK.\n\nThis deploys a secure front end - back end web app. The front end web app is plugged in a subnet with the feature regional VNet integration enabled. Settings are set to consume a DNS private zone. The backend web app is only exposed through a private endpoint.\n\nIt will create a VNet, two subnets, one where your Private Endpoint will exist, the second where you will inject the front web app, an App Service Plan in PremiumV2 tier (mandatory for Private Endpoint), a Private Endpoint, settings for DNS queries to the DNS Private Zone, and a private DNS zone with record for the Private Endpoint.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install node.js](https://nodejs.org/en/download/)\n3. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Optional config params\n\n1. `virtualNetworkCIDR` - CIDR range for the vnet (defaults to `10.200.0.0/16`)\n2. `backendCIDR` - subnet CIDR range for the backend (defaults to `10.200.1.0/24`)\n3. `frontendCIDR` - subnet CIDR range for the frontend (defaults to `10.200.2.0/24`)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n3. Next, install the dependencies:\n\n   ```bash\n   $ npm install\n   ```\n\n4. Stand up the cluster by invoking pulumi\n   ```bash\n   $ pulumi up\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-webapp-privateendpoint-vnet-injection.html","relUrl":"notes/azure-ts-webapp-privateendpoint-vnet-injection.html"},{"doc":"Azure Ts Synapse","title":"Azure Ts Synapse","hpath":"azure-ts-synapse","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Synapse Workspace and Pools\n\nStarting point for enterprise analytics solutions based on Azure Synapse.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 13 created\n\n   Duration: 10m53s\n   ```\n\n6. Navigate to <https://web.azuresynapse.net> and sign in to your new workspace.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-synapse.html","relUrl":"notes/azure-ts-synapse.html"},{"doc":"Azure Ts Static Website","title":"Azure Ts Static Website","hpath":"azure-ts-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website Using Azure Blob Storage and CDN\n\nBased on <https://github.com/zemien/static-website-ARM-template>\n\nThis example configures [Static website hosting in Azure Storage](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website).\n\nIn addition to the Storage itself, a CDN is configured to serve files from the Blob container origin. This may be useful if you need to serve files via HTTPS from a custom domain (not shown in the example).\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 9 created\n   Duration: 2m52s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output staticEndpoint\n   https://websitesbc90978a1.z20.web.core.windows.net/\n   $ curl \"$(pulumi stack output staticEndpoint)\"\n   <html>\n       <body>\n           <h1>This file is served from Blob Storage (courtesy of Pulumi!)</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-static-website.html","relUrl":"notes/azure-ts-static-website.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-ts-static-website.wwwroot","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-static-website.wwwroot.html","relUrl":"notes/azure-ts-static-website.wwwroot.html"},{"doc":"Azure Ts Functions","title":"Azure Ts Functions","hpath":"azure-ts-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Deploying Azure Functions\n\nStarting point for building serverless applications hosted in Azure Functions.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 8 created\n\n   Duration: 1m18s\n   ```\n\n6. Check the deployed endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://appg-fsprfojnnlr.azurewebsites.net/api/HelloNode?name=Pulumi\n   $ curl \"$(pulumi stack output endpoint)\"\n   Hello from Node.js, Pulumi\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [helpers.ts](/assets/helpers.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions.html","relUrl":"notes/azure-ts-functions.html"},{"doc":"JavaScript","title":"JavaScript","hpath":"azure-ts-functions.javascript","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions.javascript.html","relUrl":"notes/azure-ts-functions.javascript.html"},{"doc":"Hellonode","title":"Hellonode","hpath":"azure-ts-functions.javascript.hellonode","content":"## Imported Assets\n\n- [function.json](/assets/function.json)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions.javascript.hellonode.html","relUrl":"notes/azure-ts-functions.javascript.hellonode.html"},{"doc":"Azure Ts Functions Many","title":"Azure Ts Functions Many","hpath":"azure-ts-functions-many","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Functions in All Supported Languages\n\nAzure Functions created from raw deployment packages in all supported languages.\n\n.NET and Java are precompiled languages, and the deployment artifact contains compiled binaries. You will need the following tools to build these projects:\n\n- [.NET Core SDK](https://dotnet.microsoft.com/download) for the .NET Function App\n- [Apache Maven](https://maven.apache.org/) for the Java Function App\n\nPlease remove the corresponding resources from the program in case you don't need those runtimes.\n\n## Running the App\n\n1. Build and publish the .NET Function App project:\n\n   ```\n   $ dotnet publish dotnet\n   ```\n\n2. Build and publish the Java Function App project:\n\n   ```\n   $ mvn clean package -f java\n   ```\n\n3. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n4. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n5. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n6. Configure the location to deploy the resources to:\n\n   ```\n   $ pulumi config set azure-native:location <location>\n   ```\n\n7. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 20 created\n   Duration: 2m42s\n   ```\n\n8. Check the deployed function endpoints:\n\n   ```\n   $ pulumi stack output dotnetEndpoint\n   https://http-dotnet1a2d3e4d.azurewebsites.net/api/HelloDotnet?name=Pulumi\n   $ curl \"$(pulumi stack output dotnetEndpoint)\"\n   Hello from .NET, Pulumi\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.html","relUrl":"notes/azure-ts-functions-many.html"},{"doc":"Python","title":"Python","hpath":"azure-ts-functions-many.python","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.python.html","relUrl":"notes/azure-ts-functions-many.python.html"},{"doc":"Hellopython","title":"Hellopython","hpath":"azure-ts-functions-many.python.hellopython","content":"## Imported Assets\n\n- [**init**.py](/assets/__init__.py)\n- [function.json](/assets/function.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.python.hellopython.html","relUrl":"notes/azure-ts-functions-many.python.hellopython.html"},{"doc":"Powershell","title":"Powershell","hpath":"azure-ts-functions-many.powershell","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [profile.ps1](/assets/profile.ps1)\n- [requirements.psd1](/assets/requirements.psd1)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.powershell.html","relUrl":"notes/azure-ts-functions-many.powershell.html"},{"doc":"Hellops","title":"Hellops","hpath":"azure-ts-functions-many.powershell.hellops","content":"## Imported Assets\n\n- [function.json](/assets/function.json)\n- [run.ps1](/assets/run.ps1)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.powershell.hellops.html","relUrl":"notes/azure-ts-functions-many.powershell.hellops.html"},{"doc":"JavaScript","title":"JavaScript","hpath":"azure-ts-functions-many.javascript","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.javascript.html","relUrl":"notes/azure-ts-functions-many.javascript.html"},{"doc":"Hellonode","title":"Hellonode","hpath":"azure-ts-functions-many.javascript.hellonode","content":"## Imported Assets\n\n- [function.json](/assets/function.json)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.javascript.hellonode.html","relUrl":"notes/azure-ts-functions-many.javascript.hellonode.html"},{"doc":"Java","title":"Java","hpath":"azure-ts-functions-many.java","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [pom.xml](/assets/pom.xml)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.html","relUrl":"notes/azure-ts-functions-many.java.html"},{"doc":"Target","title":"Target","hpath":"azure-ts-functions-many.java.target","content":"## Imported Assets\n\n- [fabrikam-functions-1.0-SNAPSHOT.jar](/assets/fabrikam-functions-1.jar)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.html","relUrl":"notes/azure-ts-functions-many.java.target.html"},{"doc":"Maven Status","title":"Maven Status","hpath":"azure-ts-functions-many.java.target.maven-status","content":"\n","url":"https://pulumi.dendron.so/notes/4676188a-4ac8-42a9-aeda-1aa307e2ef8b.html","relUrl":"notes/4676188a-4ac8-42a9-aeda-1aa307e2ef8b.html"},{"doc":"Maven Compiler Plugin","title":"Maven Compiler Plugin","hpath":"azure-ts-functions-many.java.target.maven-status.maven-compiler-plugin","content":"\n","url":"https://pulumi.dendron.so/notes/3c62d49c-e8f4-430a-943a-35fc0417278b.html","relUrl":"notes/3c62d49c-e8f4-430a-943a-35fc0417278b.html"},{"doc":"Compile","title":"Compile","hpath":"azure-ts-functions-many.java.target.maven-status.maven-compiler-plugin.compile","content":"\n","url":"https://pulumi.dendron.so/notes/9f264279-b37c-4446-bf16-f1d49d30fd7f.html","relUrl":"notes/9f264279-b37c-4446-bf16-f1d49d30fd7f.html"},{"doc":"Default Compile","title":"Default Compile","hpath":"azure-ts-functions-many.java.target.maven-status.maven-compiler-plugin.compile.default-compile","content":"## Imported Assets\n\n- [createdFiles.lst](/assets/createdfiles.lst)\n- [inputFiles.lst](/assets/inputfiles.lst)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.maven-status.maven-compiler-plugin.compile.default-compile.html","relUrl":"notes/azure-ts-functions-many.java.target.maven-status.maven-compiler-plugin.compile.default-compile.html"},{"doc":"Maven Archiver","title":"Maven Archiver","hpath":"azure-ts-functions-many.java.target.maven-archiver","content":"## Imported Assets\n\n- [pom.properties](/assets/pom.properties)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.maven-archiver.html","relUrl":"notes/azure-ts-functions-many.java.target.maven-archiver.html"},{"doc":"Classes","title":"Classes","hpath":"azure-ts-functions-many.java.target.classes","content":"\n","url":"https://pulumi.dendron.so/notes/cf91f3e0-82f6-414c-b71f-f868219719f6.html","relUrl":"notes/cf91f3e0-82f6-414c-b71f-f868219719f6.html"},{"doc":"Com","title":"Com","hpath":"azure-ts-functions-many.java.target.classes.com","content":"\n","url":"https://pulumi.dendron.so/notes/0d8732d8-fdca-43b6-87e5-8357f6c144f6.html","relUrl":"notes/0d8732d8-fdca-43b6-87e5-8357f6c144f6.html"},{"doc":"Fabrikam","title":"Fabrikam","hpath":"azure-ts-functions-many.java.target.classes.com.fabrikam","content":"\n","url":"https://pulumi.dendron.so/notes/dcd3db39-a5d0-48f4-a391-00f451019b44.html","relUrl":"notes/dcd3db39-a5d0-48f4-a391-00f451019b44.html"},{"doc":"Functions","title":"Functions","hpath":"azure-ts-functions-many.java.target.classes.com.fabrikam.functions","content":"## Imported Assets\n\n- [Function.class](/assets/function.class)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.classes.com.fabrikam.functions.html","relUrl":"notes/azure-ts-functions-many.java.target.classes.com.fabrikam.functions.html"},{"doc":"Azure Functions","title":"Azure Functions","hpath":"azure-ts-functions-many.java.target.azure-functions","content":"\n","url":"https://pulumi.dendron.so/notes/623b2d9f-7d4b-4e01-8c12-ad9d8e0c5681.html","relUrl":"notes/623b2d9f-7d4b-4e01-8c12-ad9d8e0c5681.html"},{"doc":"Fabrikam Functions","title":"Fabrikam Functions","hpath":"azure-ts-functions-many.java.target.azure-functions.fabrikam-functions","content":"## Imported Assets\n\n- [fabrikam-functions-1.0-SNAPSHOT.jar](/assets/fabrikam-functions-1.jar)\n- [host.json](/assets/host.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.azure-functions.fabrikam-functions.html","relUrl":"notes/azure-ts-functions-many.java.target.azure-functions.fabrikam-functions.html"},{"doc":"Hellojava","title":"Hellojava","hpath":"azure-ts-functions-many.java.target.azure-functions.fabrikam-functions.hellojava","content":"## Imported Assets\n\n- [function.json](/assets/function.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.target.azure-functions.fabrikam-functions.hellojava.html","relUrl":"notes/azure-ts-functions-many.java.target.azure-functions.fabrikam-functions.hellojava.html"},{"doc":"Src","title":"Src","hpath":"azure-ts-functions-many.java.src","content":"\n","url":"https://pulumi.dendron.so/notes/1b732456-a5fd-4685-b4a1-a69bc391d177.html","relUrl":"notes/1b732456-a5fd-4685-b4a1-a69bc391d177.html"},{"doc":"Main","title":"Main","hpath":"azure-ts-functions-many.java.src.main","content":"\n","url":"https://pulumi.dendron.so/notes/de8a3ef2-15c3-4011-885b-f9f62060ac27.html","relUrl":"notes/de8a3ef2-15c3-4011-885b-f9f62060ac27.html"},{"doc":"Java","title":"Java","hpath":"azure-ts-functions-many.java.src.main.java","content":"\n","url":"https://pulumi.dendron.so/notes/d6e8da1e-6ab2-4e1c-81a0-0632f004297b.html","relUrl":"notes/d6e8da1e-6ab2-4e1c-81a0-0632f004297b.html"},{"doc":"Com","title":"Com","hpath":"azure-ts-functions-many.java.src.main.java.com","content":"\n","url":"https://pulumi.dendron.so/notes/16281564-7b91-4d06-85d9-6682b18a3a45.html","relUrl":"notes/16281564-7b91-4d06-85d9-6682b18a3a45.html"},{"doc":"Fabrikam","title":"Fabrikam","hpath":"azure-ts-functions-many.java.src.main.java.com.fabrikam","content":"\n","url":"https://pulumi.dendron.so/notes/06bf7ca0-6b32-4b88-bafe-fef59fe54825.html","relUrl":"notes/06bf7ca0-6b32-4b88-bafe-fef59fe54825.html"},{"doc":"Functions","title":"Functions","hpath":"azure-ts-functions-many.java.src.main.java.com.fabrikam.functions","content":"## Imported Assets\n\n- [Function.java](/assets/function.java)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.java.src.main.java.com.fabrikam.functions.html","relUrl":"notes/azure-ts-functions-many.java.src.main.java.com.fabrikam.functions.html"},{"doc":"Dotnet","title":"Dotnet","hpath":"azure-ts-functions-many.dotnet","content":"## Imported Assets\n\n- [HelloDotnet.cs](/assets/hellodotnet.cs)\n- [functionapp-dotnet.csproj](/assets/functionapp-dotnet.csproj)\n- [host.json](/assets/host.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-functions-many.dotnet.html","relUrl":"notes/azure-ts-functions-many.dotnet.html"},{"doc":"Azure Ts Cosmosdb Logicapp","title":"Azure Ts Cosmosdb Logicapp","hpath":"azure-ts-cosmosdb-logicapp","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Cosmos DB, an API Connection, and a Logic App\n\nWith the native Azure provider we can directly use the Azure resource manager API to define API connections and linking it to a logic app. The resulting experience is much faster in comparison to performing the same operation through ARM templates.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your Azure account](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/) (if your `az` CLI is configured, no further changes are required)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration variables for this program, and log into Azure:\n\n   ```bash\n   $ pulumi config set azure-native:location westeurope\n   $ az login\n   ```\n\n3. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n\n        Type                                                Name                         Status      \n    +   pulumi:pulumi:Stack                                 azure-cosmosdb-logicapp-dev  created     \n    +   ├─ azure-native:resources:ResourceGroup             logicappdemo-rg              created     \n    +   ├─ azure-native:storage:StorageAccount              logicappdemosa               created     \n    +   ├─ azure-native:documentdb:DatabaseAccount          logicappdemo-cdb             created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlDatabase   db                           created     \n    +   ├─ azure-native:web:Connection                      cosmosdbConnection           created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlContainer  container                    created     \n    +   └─ azure-native:logic:Workflow                      workflow                     created     \n\n   Resources:\n       + 8 created\n\n   Duration: 3m16s\n   ```\n\n4. At this point, you have a Cosmos DB collection and a Logic App listening to HTTP requests. You can trigger the Logic App with a `curl` command:\n\n   ```\n   $ curl -X POST \"$(pulumi stack output endpoint)\" -d '\"Hello World\"' -H 'Content-Type: application/json'\n   ```\n\n   The POST body will be saved into a new document in the Cosmos DB collection.\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-cosmosdb-logicapp.html","relUrl":"notes/azure-ts-cosmosdb-logicapp.html"},{"doc":"Azure Ts Appservice","title":"Azure Ts Appservice","hpath":"azure-ts-appservice","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service with SQL Database and Application Insights\n\nStarting point for building web application hosted in Azure App Service.\n\nProvisions Azure SQL Database and Azure Application Insights to be used in combination\nwith App Service.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Define SQL Server password (make it complex enough to satisfy Azure policy):\n\n   ```\n   pulumi config set --secret sqlPassword <value>\n   ```\n\n6. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 1m14.59910109s\n   ```\n\n7. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://azpulumi-as0ef47193.azurewebsites.net\n   $ curl \"$(pulumi stack output endpoint)\"\n   <html>\n       <body>\n           <h1>Greetings from Azure App Service (courtesy of Pulumi)!</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-appservice.html","relUrl":"notes/azure-ts-appservice.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-ts-appservice.wwwroot","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-appservice.wwwroot.html","relUrl":"notes/azure-ts-appservice.wwwroot.html"},{"doc":"Azure Ts Appservice Docker","title":"Azure Ts Appservice Docker","hpath":"azure-ts-appservice-docker","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service Running Docker Containers on Linux\n\nStarting point for building web application hosted in Azure App Service from Docker images.\n\nThe example shows two scenarios:\n\n- Deploying an existing image from Docker Hub\n- Deploying a new custom registry in Azure Container Registry, building a custom Docker image, and running the image from the custom registry\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 8 created\n\n   Duration: 56s\n   ```\n\n6. Check the deployed endpoints:\n\n   ```\n   $ pulumi stack output HelloEndpoint\n   http://hello-app-91dfea.azurewebsites.net/hello\n   $ curl \"$(pulumi stack output HelloEndpoint)\"\n   Hello, world!\n\n   $ pulumi stack output GetStartedEndpoint\n   http://get-started-15da13.azurewebsites.net\n   $ curl \"$(pulumi stack output GetStartedEndpoint)\"\n   <html>\n   <body>\n   <h1>Your custom docker image is running in Azure App Service!</h1>\n   </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-appservice-docker.html","relUrl":"notes/azure-ts-appservice-docker.html"},{"doc":"Node App","title":"Node App","hpath":"azure-ts-appservice-docker.node-app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-appservice-docker.node-app.html","relUrl":"notes/azure-ts-appservice-docker.node-app.html"},{"doc":"App","title":"App","hpath":"azure-ts-appservice-docker.node-app.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-appservice-docker.node-app.app.html","relUrl":"notes/azure-ts-appservice-docker.node-app.app.html"},{"doc":"Azure Ts Aks","title":"Azure Ts Aks","hpath":"azure-ts-aks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster using the native Azure Provider\n\nThis example deploys an AKS cluster, creates an Azure Active AD application, creates a Service Principal and sets credentials to manage access to the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install node.js](https://nodejs.org/en/download/)\n3. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Next, install the dependencies:\n\n   ```bash\n   $ npm install\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Stand up the cluster by invoking pulumi\n   ```bash\n   $ pulumi up\n   ```\n\n5. After 3-4 minutes, your cluster will be ready, and the kubeconfig YAML you'll use to connect to the cluster will be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   ```\n\n   Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-aks.html","relUrl":"notes/azure-ts-aks.html"},{"doc":"Azure Ts Aks Helm","title":"Azure Ts Aks Helm","hpath":"azure-ts-aks-helm","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Helm Chart\n\nThis example demonstrates creating an [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/)\ncluster and deploying a Helm Chart from [Bitnami Helm chart repository](https://github.com/bitnami/charts)\ninto this cluster, all in one Pulumi program.\n\nThe example showcases the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n## Prerequisites\n\n- Install [Pulumi](https://www.pulumi.com/docs/get-started/install/).\n\n- Install [TypeScript](https://www.typescriptlang.org/#installation) and [NPM](https://www.npmjs.com/get-npm).\n\n- We will be deploying to Azure, so you will need an Azure account. If\n  you do not have an account, [sign up for free here](https://azure.microsoft.com/en-us/free/).\n\n- Setup and authenticate the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/).\n\n## Running the Example\n\nIn this example we will provision a Kubernetes cluster running a\npublic Apache web server, verify we can access it, and clean up when\ndone.\n\n1. Get the code:\n\n   ```bash\n   $ git clone git@github.com:pulumi/examples.git\n   $ cd examples/azure-ts-aks-helm\n   ```\n\n2. Restore dependencies:\n\n   ```bash\n   $ npm install\n   # OR\n   $ yarn install\n   ```\n\n3. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n4. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Deploy everything with the `pulumi up` command. This provisions\n   all the Azure resources necessary, including an Active Directory\n   service principal, AKS cluster, and then deploys the Apache Helm\n   Chart, all in a single gesture (takes 5-10 min):\n\n   ```bash\n   $ pulumi up\n   ```\n\n6. Now your cluster and Apache server are ready. Several output\n   variables will be printed, including your cluster name\n   (`clusterName`), Kubernetes config (`kubeconfig`) and server IP\n   address (`apacheServiceIP`).\n\n   Using these output variables, you may access your Apache server:\n\n   ```bash\n   $ curl $(pulumi stack output apacheServiceIP)\n   <html><body><h1>It works!</h1></body></html>\n   ```\n\n   And you may also configure your `kubectl` client using the\n   `kubeConfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get service\n\n   NAME           TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                      AGE\n   apache-chart   LoadBalancer   10.0.154.121   40.125.100.104   80:30472/TCP,443:30364/TCP   8m\n   kubernetes     ClusterIP      10.0.0.1       <none>           443/TCP                      8m\n   ```\n\n7. At this point, you have a running cluster. Feel free to modify\n   your program, and run `pulumi up` to redeploy changes. The Pulumi\n   CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes. This could be\n   altering the existing chart, adding new Azure or Kubernetes\n   resources, or anything, really.\n\n   TIP: if you make changes to the example code outside of an IDE, run\n   the TypeScript compiler to type-check your changes before executing\n   them:\n\n   ```bash\n   $ tsc --build tsconfig.json\n   ```\n\n8. Once you are done, you can destroy all of the resources, and the\n   stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   $ rm kubeconfig.yaml\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.ts](/assets/cluster.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-aks-helm.html","relUrl":"notes/azure-ts-aks-helm.html"},{"doc":"Azure Ts Aci","title":"Azure Ts Aci","hpath":"azure-ts-aci","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Container Instances on Linux\n\nStarting point for building web application hosted in Azure Container Instances.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Restore NPM dependencies:\n\n   ```\n   $ npm install\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 3 created\n\n   Duration: 1m18s\n   ```\n\n6. Check the deployed endpoint:\n\n   ```\n   $ pulumi stack output containerIPv4Address\n   13.83.66.37\n   $ curl \"$(pulumi stack output containerIPv4Address)\"\n   <html>\n   <head>\n       <title>Welcome to Azure Container Instances!</title>\n   </head>\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-ts-aci.html","relUrl":"notes/azure-ts-aci.html"},{"doc":"Azure Py Webserver","title":"Azure Py Webserver","hpath":"azure-py-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Azure Virtual Machine\n\nThis example deploys an Azure Virtual Machine and starts an HTTP server on it.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration for this example. This example requires you to supply a username and password to the virtual machine that we are going to create.\n\n   ```\n   $ pulumi config set azure-native:location westus    # any valid Azure region will do\n   $ pulumi config set username webmaster\n   $ pulumi config set password --secret <your-password> \n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n\n1. Run `pulumi up` to preview and deploy the changes:\n\n   ```\n   $ pulumi update\n   Previewing update (azuredev):\n\n       Type                                      Name                         Plan       \n   +   pulumi:pulumi:Stack                       azure-py-webserver-azuredev  create     \n   +   ├─ azure-native:core:ResourceGroup        server                       create     \n   +   ├─ azure-native:network:VirtualNetwork    server-network               create     \n   +   ├─ azure-native:network:PublicIp          server-ip                    create     \n   +   ├─ azure-native:network:Subnet            server-subnet                create     \n   +   ├─ azure-native:network:NetworkInterface  server-nic                   create     \n   +   └─ azure-native:compute:VirtualMachine    server-vm                    create     \n\n   Resources:\n       + 7 to create\n\n   Do you want to perform this update? yes\n   Updating (azuredev):\n\n       Type                                      Name                         Status      \n   +   pulumi:pulumi:Stack                       azure-py-webserver-azuredev  created     \n   +   ├─ azure-native:core:ResourceGroup        server                       created     \n   +   ├─ azure-native:network:VirtualNetwork    server-network               created     \n   +   ├─ azure-native:network:PublicIp          server-ip                    created     \n   +   ├─ azure-native:network:Subnet            server-subnet                created     \n   +   ├─ azure-native:network:NetworkInterface  server-nic                   created     \n   +   └─ azure-native:compute:VirtualMachine    server-vm                    created     \n\n   Outputs:\n       public_ip: \"137.117.15.111\"\n\n   Resources:\n       + 7 created\n\n   Duration: 2m55s\n\n   Permalink: https://app.pulumi.com/swgillespie/azure-py-webserver/azuredev/updates/3\n   ```\n\n2. Get the IP address of the newly-created instance from the stack's outputs: \n\n   ```bash\n   $ pulumi stack output public_ip\n   137.117.15.111\n   ```\n\n3. Check to see that your server is now running:\n\n   ```\n   $ curl http://$(pulumi stack output public_ip)\n   Hello, World!\n   ```\n\n4. Destroy the stack:\n\n   ```bash\n   ▶ pulumi destroy --yes\n   Previewing destroy (azuredev):\n\n       Type                                      Name                         Plan       \n   -   pulumi:pulumi:Stack                       azure-py-webserver-azuredev  delete     \n   -   ├─ azure-native:compute:VirtualMachine    server-vm                    delete     \n   -   ├─ azure-native:network:NetworkInterface  server-nic                   delete     \n   -   ├─ azure-native:network:Subnet            server-subnet                delete     \n   -   ├─ azure-native:network:PublicIp          server-ip                    delete     \n   -   ├─ azure-native:network:VirtualNetwork    server-network               delete     \n   -   └─ azure-native:core:ResourceGroup        server                       delete     \n\n   Resources:\n       - 7 to delete\n\n   Destroying (azuredev):\n\n       Type                                      Name                         Status      \n   -   pulumi:pulumi:Stack                       azure-py-webserver-azuredev  deleted     \n   -   ├─ azure-native:compute:VirtualMachine    server-vm                    deleted     \n   -   ├─ azure-native:network:NetworkInterface  server-nic                   deleted     \n   -   ├─ azure-native:network:Subnet            server-subnet                deleted     \n   -   ├─ azure-native:network:VirtualNetwork    server-network               deleted     \n   -   ├─ azure-native:network:PublicIp          server-ip                    deleted     \n   -   └─ azure-native:core:ResourceGroup        server                       deleted     \n\n   Resources:\n       - 7 deleted\n\n   Duration: 3m49s\n\n   Permalink: https://app.pulumi.com/swgillespie/azure-py-webserver/azuredev/updates/4\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-webserver.html","relUrl":"notes/azure-py-webserver.html"},{"doc":"Azure Py Virtual Data Center","title":"Azure Py Virtual Data Center","hpath":"azure-py-virtual-data-center","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Virtual Data Center (VDC)\n\nThis example deploys Azure Virtual Data Center (VDC) hub-and-spoke network stacks in Azure, complete with ExpressRoute and VPN Gateways, Azure Firewall (with provision for forced tunnelling) guarding a DMZ, and Azure Bastion. In addition, as many subnets as required for shared services in the hub and application environments in the spokes may be simply specified.\n\nIn this implementation, the Azure Firewall is central. Custom routing redirects all traffic to and from hub and spokes, as well as all traffic to, within and from the DMZ, through the firewall (which scales out as a service to handle the throughput). Firewall rules are required to allow traffic through (not yet implemented). Traffic between shared services subnets in the hub and between subnets within the spokes is not redirected through the firewall, and should instead be controlled using Network Security Groups (not yet implemented).\n\nWith minimal configuration, matching stacks may be deployed in Azure [paired regions](https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions), configured for Production/Disaster Recovery or High Availability (or both for different applications). Global VNet Peering between the hubs connects the separate stacks into one symmetric network.\n\nAlthough the VDC pattern is in widespread use, Azure now offers a managed service intended to replace it, comprising Virtual Hub along with partner SD-WAN components, with a [migration plan](https://docs.microsoft.com/en-us/azure/virtual-wan/migrate-from-hub-spoke-topology) that illustrates the differences between the two patterns. But if you want or need to manage your own network infrastructure, VDC is still relevant.\n\nThis example uses `pulumi.ComponentResource` as described [here](https://www.pulumi.com/docs/intro/concepts/resources/#components) which demonstrates how multiple low-level resources can be composed into a higher-level, reusable abstraction. It also demonstrates use of `pulumi.StackReference` as described [here](https://www.pulumi.com/docs/guides/organizing-projects-stacks/) to relate multiple stacks. Finally, it uses Python's `ipaddress` module to simplify and validate configuration of network addresses.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n# Running the Example\n\nAfter cloning this repo, `cd` into the `azure-py-virtual-data-center` directory and run the following commands.\n\n1. Create a new stack intended for Production (for example's sake):\n\n   ```bash\n   $ pulumi stack init prod\n   ```\n\n   This will appear within your Pulumi organization under the `azure-py-vdc` project (as specified in `Pulumi.yaml`).\n\n2. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n3. Set the configuration variables for this stack to suit yourself, following guidance in `Pulumi.yaml`. This will create a new `Pulumi.prod.yaml` file (named after the stack) in which to store them:\n\n   Required:\n\n   ```bash\n   $ pulumi config set firewall_address_space   192.168.100.0/24\n   $ pulumi config set hub_address_space        10.100.0.0/16\n   $ pulumi config set azure-native:location    australiaeast\n   ```\n\n   Optional:\n\n   ```bash\n   $ pulumi config set azure_bastion            true\n   $ pulumi config set forced_tunnel            10.0.100.1\n   $ pulumi config set separator                ' '\n   $ pulumi config set suffix                   ae\n   ```\n\n   Note that it is advisable to enable Azure Bastion on a second pass to avoid contention.\n\n4. Deploy the `prod` stack with the `pulumi up` command. This may take up to an hour to provision all the Azure resources specified, including gateways, firewall and bastion hosts:\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. After a while, your Production stack will be ready.\n\n   ```\n   Updating (prod)\n\n   View Live: https://app.pulumi.com/organization/azureng-py-vdc/prod/updates/1\n\n        Type                                                      Name                 Status\n    +   pulumi:pulumi:Stack                                       azureng-py-vdc-prod  created\n    +   ├─ vdc:network:Hub                                        hub                  created\n    +   │  ├─ azure-native:network:VirtualNetwork                 hub_vn_ae            created\n    +   │  ├─ azure-native:network:RouteTable                     hub_fwm_rt_ae        created\n    +   │  ├─ azure-native:network:RouteTable                     hub_fw_rt_ae         created\n    +   │  ├─ azure-native:network:Route                          fwm_internet_r       created\n    +   │  ├─ azure-native:network:Route                          fw_tunnel_r          created\n    +   │  ├─ azure-native:network:Subnet                         hub_fwm_sn           created\n    +   │  ├─ azure-native:network:Subnet                         hub_fw_sn            created\n    +   │  ├─ azure-native:network:PublicIPAddress                hub_fw_pip_ae        created\n    +   │  ├─ azure-native:network:PublicIPAddress                hub_fwm_pip_ae       created\n    +   │  ├─ azure-native:network:AzureFirewall                  hub_fw_ae            created\n    +   │  ├─ azure-native:network:RouteTable                     hub_dmz_rt_ae        created\n    +   │  ├─ azure-native:network:Route                          dmz_dg_r             created\n    +   │  ├─ azure-native:network:Route                          dmz_dmz_r            created\n    +   │  ├─ azure-native:network:Route                          dmz_hub_r            created\n    +   │  ├─ azure-native:network:Subnet                         hub_dmz_sn           created\n    +   │  ├─ azure-native:network:RouteTable                     hub_gw_rt_ae         created\n    +   │  ├─ azure-native:network:Route                          gw_gw_r              created\n    +   │  ├─ azure-native:network:Route                          gw_dmz_r             created\n    +   │  ├─ azure-native:network:Route                          gw_hub_r             created\n    +   │  ├─ azure-native:network:Subnet                         hub_gw_sn            created\n    +   │  ├─ azure-native:network:PublicIPAddress                hub_vpn_gw_pip_ae    created\n    +   │  ├─ azure-native:network:PublicIPAddress                hub_er_gw_pip_ae     created\n    +   │  ├─ azure-native:network:VirtualNetworkGateway          hub_vpn_gw_ae        created\n    +   │  ├─ azure-native:network:VirtualNetworkGateway          hub_er_gw_ae         created\n    +   │  ├─ azure-native:network:RouteTable                     hub_ss_rt_ae         created\n    +   │  ├─ azure-native:network:PublicIPAddress                hub_ab_pip_ae        created\n    +   │  ├─ azure-native:network:Subnet                         hub_ab_sn            created\n    +   │  ├─ azure-native:network:Route                          ss_dg_r              created\n    +   │  ├─ azure-native:network:Route                          ss_dmz_r             created\n    +   │  ├─ azure-native:network:Route                          ss_gw_r              created\n    +   │  ├─ azure-native:network:Subnet                         hub_domain_sn        created\n    +   │  ├─ azure-native:network:Subnet                         hub_files_sn         created\n    +   │  └─ azure-native:network:BastionHost                    hub_ab_ae            created\n    +   ├─ vdc:network:Spoke                                      s01                  created\n    +   │  ├─ azure-native:network:VirtualNetwork                 s01_vn_ae            created\n    +   │  ├─ azure-native:network:RouteTable                     s01_rt_ae            created\n    +   │  ├─ azure-native:network:VirtualNetworkPeering          hub_s01_vnp_ae       created\n    +   │  ├─ azure-native:network:Route                          s01_dg_r             created\n    +   │  ├─ azure-native:network:Route                          s01_hub_r            created\n    +   │  ├─ azure-native:network:Route                          s01_dmz_r            created\n    +   │  ├─ azure-native:network:Route                          dmz_s01_r            created\n    +   │  ├─ azure-native:network:Route                          gw_s01_r             created\n    +   │  ├─ azure-native:network:VirtualNetworkPeering          s01_hub_vnp_ae       created\n    +   │  ├─ azure-native:network:Route                          ss_s01_r             created\n    +   │  ├─ azure-native:network:PublicIPAddress                s01_ab_pip_ae        created\n    +   │  ├─ azure-native:network:Subnet                         s01_ab_sn            created\n    +   │  ├─ azure-native:network:Subnet                         s01_web_sn           created\n    +   │  ├─ azure-native:network:Subnet                         s01_db_sn            created\n    +   │  ├─ azure-native:network:Subnet                         s01_app_sn           created\n    +   │  └─ azure-native:network:BastionHost                    s01_ab_ae            created\n    +   ├─ vdc:network:Spoke                                      s02                  created\n    +   │  ├─ azure-native:network:VirtualNetwork                 s02_vn_ae            created\n    +   │  ├─ azure-native:network:RouteTable                     s02_rt_ae            created\n    +   │  ├─ azure-native:network:VirtualNetworkPeering          hub_s02_vnp_ae       created\n    +   │  ├─ azure-native:network:Route                          s02_dg_r             created\n    +   │  ├─ azure-native:network:Route                          s02_dmz_r            created\n    +   │  ├─ azure-native:network:Route                          s02_hub_r            created\n    +   │  ├─ azure-native:network:Route                          dmz_s02_r            created\n    +   │  ├─ azure-native:network:Route                          gw_s02_r             created\n    +   │  ├─ azure-native:network:VirtualNetworkPeering          s02_hub_vnp_ae       created\n    +   │  ├─ azure-native:network:Route                          ss_s02_r             created\n    +   │  ├─ azure-native:network:PublicIPAddress                s02_ab_pip_ae        created\n    +   │  ├─ azure-native:network:Subnet                         s02_ab_sn            created\n    +   │  ├─ azure-native:network:Subnet                         s02_app_sn           created\n    +   │  ├─ azure-native:network:Subnet                         s02_web_sn           created\n    +   │  ├─ azure-native:network:Subnet                         s02_db_sn            created\n    +   │  └─ azure-native:network:BastionHost                    s02_ab_ae            created\n    +   └─ azure-native:resources:ResourceGroup                   prod_vdc_rg_ae       created\n\n   Outputs:\n       dmz_ar: \"192.168.100.128/25\"\n       fw_ip : \"192.168.100.4\"\n       hub_as: \"10.100.0.0/16\"\n       hub_id: \"/subscriptions/subscription/resourceGroups/prod_vdc_rg_ae/providers/Microsoft.Network/virtualNetworks/hub_vn_ae\"\n       s01_as: \"10.101.0.0/16\"\n       s01_id: \"/subscriptions/subscription/resourceGroups/prod_vdc_rg_ae/providers/Microsoft.Network/virtualNetworks/s01_vn_ae\"\n       s02_as: \"10.102.0.0/16\"\n       s02_id: \"/subscriptions/subscription/resourceGroups/prod_vdc_rg_ae/providers/Microsoft.Network/virtualNetworks/s02_vn_ae\"\n\n   Resources:\n       + 70 created\n\n   Duration: 45m1s\n   ```\n\n   Feel free to modify your program, and then run `pulumi up` again. Pulumi automatically detects differences and makes the minimal changes necessary to achieved the desired state. If any changes to resources are made outside of Pulumi, you should first do a `pulumi refresh` so that Pulumi can discover the actual situation, and then `pulumi up` to return to desired state.\n\n6. Create another new stack intended for Disaster Recovery (following the example):\n\n   ```bash\n   $ pulumi stack init dr\n   ```\n\n   This will also appear within your Pulumi organization under the `azureng-py-vdc` project (as specified in `Pulumi.yaml`).\n\n7. Set the configuration variables for this stack which will be stored in a new `Pulumi.dr.yaml` file (change the values below to suit yourself):\n\n   Required:\n\n   ```bash\n   $ pulumi config set firewall_address_space   192.168.200.0/24\n   $ pulumi config set hub_address_space        10.200.0.0/16\n   $ pulumi config set location                 australiasoutheast\n   ```\n\n   Optional:\n\n   ```bash\n   $ pulumi config set azure_bastion            true\n   $ pulumi config set forced_tunnel            10.0.200.1\n   $ pulumi config set separator                _    \n   $ pulumi config set suffix                   ase\n   ```\n\n   Note that it is advisable to enable Azure Bastion on a second pass to avoid contention.\n\n8. Deploy the `dr` stack with the `pulumi up` command. Once again, this may take up to an hour to provision all the Azure resources specified, including gateways, firewall and bastion hosts:\n\n   ```bash\n   $ pulumi up\n   ```\n\n9. Once you have both Production and Disaster Recovery stacks (ideally in paired regions), you can connect their hubs using Global (between regions) VNet Peering:\n\n   Required:\n\n   ```bash\n   $ pulumi stack select prod\n   $ pulumi config set peer dr\n   $ pulumi up\n   $ pulumi stack select dr\n   $ pulumi config set peer prod\n   $ pulumi up\n   ```\n\n   Optional (for each stack):\n\n   ```bash\n   $ pulumi config set org         organization\n   $ pulumi config set project     project\n   ```\n\n   Note: you may specify another organization and/or project (corresponding hub and spoke names should be the same). It isn't yet [possible](https://github.com/pulumi/pulumi/issues/2800) to discover the Pulumi organization from within the program.\n\n   If you later destroy a stack, you need to remove the corresponding `peer` variable in the other stack and run `pulumi up`. If you want to tear down the peerings, you should remove the `peer` variables in both stacks and run `pulumi up`:\n\n   ```bash\n   $ pulumi stack select prod\n   $ pulumi config rm peer\n   $ pulumi up\n   $ pulumi stack select dr\n   $ pulumi config rm peer\n   $ pulumi up\n   ```\n\n   You need to remove both peerings before you can connect the hubs again.\n\n10. When you are finished experimenting, you can destroy all of the resources, and the stacks:\n\n    ```bash\n    $ pulumi stack select prod\n    $ pulumi destroy\n    $ pulumi stack rm\n    $ pulumi stack select dr\n    $ pulumi destroy\n    $ pulumi stack rm\n    ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [config.py](/assets/config.py)\n- [hub.py](/assets/hub.py)\n- [requirements.txt](/assets/requirements.txt)\n- [spoke.py](/assets/spoke.py)\n- [vdc.py](/assets/vdc.py)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-virtual-data-center.html","relUrl":"notes/azure-py-virtual-data-center.html"},{"doc":"Azure Py Synapse","title":"Azure Py Synapse","hpath":"azure-py-synapse","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Synapse Workspace and Pools\n\nStarting point for enterprise analytics solutions based on Azure Synapse.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n3. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Set the user ID to grant access to (e.g., your current user):\n\n   ```\n   $ pulumi config set userObjectId $(az ad signed-in-user show --query=objectId | tr -d '\"')\n   ```\n\n6. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 13 created\n\n   Duration: 10m53s\n   ```\n\n7. Navigate to <https://web.azuresynapse.net> and sign in to your new workspace.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-synapse.html","relUrl":"notes/azure-py-synapse.html"},{"doc":"Azure Py Static Website","title":"Azure Py Static Website","hpath":"azure-py-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website Using Azure Blob Storage and CDN\n\nBased on <https://github.com/zemien/static-website-ARM-template>\n\nThis example configures [Static website hosting in Azure Storage](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website).\n\nIn addition to the Storage itself, a CDN is configured to serve files from the Blob container origin. This may be useful if you need to serve files via HTTPS from a custom domain (not shown in the example).\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 9 created\n   Duration: 2m52s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output staticEndpoint\n   https://websitesbc90978a1.z20.web.core.windows.net/\n   $ curl \"$(pulumi stack output staticEndpoint)\"\n   <html>\n       <body>\n           <h1>This file is served from Blob Storage (courtesy of Pulumi!)</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-static-website.html","relUrl":"notes/azure-py-static-website.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-py-static-website.wwwroot","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-static-website.wwwroot.html","relUrl":"notes/azure-py-static-website.wwwroot.html"},{"doc":"Azure Py Minecraft Server","title":"Azure Py Minecraft Server","hpath":"azure-py-minecraft-server","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Minecraft Server Using an Azure Virtual Machine\n\nThis example deploys an Azure Virtual Machine and provisions a Minecraft server.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n3. Next, generate an OpenSSH keypair for use with your server.\n\n   ```bash\n   $ ssh-keygen -t rsa -f rsa -b 4096 -m PEM\n   ```\n\n   This will output two files, `rsa` and `rsa.pub`, in the current directory. Be sure not to commit these files!\n\n   We must configure our stack and make the public key and private available to the virtual machine. The private key is used for subsequent SCP and SSH steps that will configure our server after it is stood up.\n\n   ```bash\n   $ cat rsa.pub | pulumi config set publicKey --\n   $ cat rsa | pulumi config set privateKey --secret --\n   ```\n\n   If your key is protected by a passphrase, add that too:\n\n   ```bash\n   $ pulumi config set privateKeyPassphrase --secret [yourPassphraseHere]\n   ```\n\n   Notice that we've used `--secret` for both `privateKey` and `privateKeyPassphrase`. This ensures they are\n   stored in encrypted form in the Pulumi secrets system.\n\n4. Set the required configuration for this example. This example requires you to supply a username, password, location, and the public and private keys to the virtual machine that we are going to create. Check the Azure virtual machine [password requirements](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/faq#what-are-the-password-requirements-when-creating-a-vm) before creating a password.\n\n   ```bash\n   $ pulumi config set admin_password --secret <admin password>\n   $ pulumi config set admin_username <admin username>\n   $ pulumi config set azure-native:location westus # any valid Azure region will do\n   ```\n\n   Note that `--secret` ensures your password is encrypted safely.\n\n\n1. Run `pulumi up` to preview and deploy the changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev)\n\n   View Live: https://app.pulumi.com/spara/azure-py-webserver/dev/previews/19ff86d5-9303-4f53-a1ae-d0882a59e9a9\n\n       Type                                              Name                    Plan\n   +   pulumi:pulumi:Stack                               azure-py-webserver-dev  create\n   +   ├─ azure-native:resources:ResourceGroup           server-rg               create\n   +   ├─ azure-native:network:PublicIPAddress           server-ip               create\n   +   ├─ azure-native:network:VirtualNetwork            server-network          create\n   +   ├─ azure-native:network:NetworkInterface          server-nic              create\n   +   ├─ azure-native:compute:VirtualMachine            server-vm               create\n   +   ├─ pulumi-python:dynamic:Resource                 config                  create\n   +   └─ pulumi-python:dynamic:Resource                 install                 create\n\n   Resources:\n       + 8 to create\n\n   Do you want to perform this update? yes\n   Updating (dev)\n\n   View Live: https://app.pulumi.com/spara/azure-py-webserver/dev/updates/40\n\n       Type                                              Name                    Status      Info\n   +   pulumi:pulumi:Stack                               azure-py-webserver-dev  created     1 message\n   +   ├─ azure-native:resources:ResourceGroup           server-rg               created\n   +   ├─ azure-native:network:VirtualNetwork            server-network          created\n   +   ├─ azure-native:network:PublicIPAddress           server-ip               created\n   +   ├─ azure-native:network:NetworkInterface          server-nic              created\n   +   ├─ azure-native:compute:VirtualMachine            server-vm               created\n   +   ├─ pulumi-python:dynamic:Resource                 config                  created\n   +   └─ pulumi-python:dynamic:Resource                 install                 created\n\n   Diagnostics:\n\n   Outputs:\n   Minecraft Server IP Address: \"40.112.182.143\"\n\n   Resources:\n       + 8 created\n\n   Duration: 7m6s\n   ```\n\n2. Get the IP address of the newly-created instance from the stack's outputs:\n\n   ```bash\n   $ pulumi stack output public_ip\n   40.112.182.143\n   ```\n\n3. Check to see that your server is running by adding the server to the Minecraft client.\n\n   ![Add server](add_server.png)\n\n4. Destroy the stack:\n\n   ```bash\n   $ pulumi destroy\n   Previewing destroy (dev)\n\n   View Live: https://app.pulumi.com/spara/azure-py-webserver/dev/previews/2544442c-ddd7-44cc-a633-2a5fed28dafb\n\n       Type                                              Name                    Plan\n   -   pulumi:pulumi:Stack                               azure-py-webserver-dev  delete\n   -   ├─ pulumi-python:dynamic:Resource                 install                 delete\n   -   ├─ pulumi-python:dynamic:Resource                 config                  delete\n   -   ├─ azure-native:compute:VirtualMachine            server-vm               delete\n   -   ├─ azure-native:network:NetworkInterface          server-nic              delete\n   -   ├─ azure-native:network:PublicIPAddress           server-ip               delete\n   -   ├─ azure-native:network:VirtualNetwork            server-network          delete\n   -   └─ azure-native:resources:ResourceGroup           server-rg               delete\n\n   Outputs:\n   - Minecraft Server IP Address: \"40.112.182.143\"\n\n   Resources:\n       - 8 to delete\n\n   Do you want to perform this destroy? yes\n   Destroying (dev)\n\n   View Live: https://app.pulumi.com/spara/azure-py-webserver/dev/updates/41\n\n       Type                                              Name                    Status\n   -   pulumi:pulumi:Stack                               azure-py-webserver-dev  deleted\n   -   ├─ pulumi-python:dynamic:Resource                 install                 deleted\n   -   ├─ pulumi-python:dynamic:Resource                 config                  deleted\n   -   ├─ azure-native:compute:VirtualMachine            server-vm               deleted\n   -   ├─ azure-native:network:NetworkInterface          server-nic              deleted\n   -   ├─ azure-native:network:PublicIPAddress           server-ip               deleted\n   -   ├─ azure-native:network:VirtualNetwork            server-network          deleted\n   -   └─ azure-native:resources:ResourceGroup           server-rg               deleted\n\n   Outputs:\n   - Minecraft Server IP Address: \"40.112.182.143\"\n\n   Resources:\n       - 8 deleted\n\n   Duration: 4m33s\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [add_server.png](/assets/add_server.png)\n- [install.sh](/assets/install.sh)\n- [provisioners.py](/assets/provisioners.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-minecraft-server.html","relUrl":"notes/azure-py-minecraft-server.html"},{"doc":"Azure Py Cosmosdb Logicapp","title":"Azure Py Cosmosdb Logicapp","hpath":"azure-py-cosmosdb-logicapp","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Cosmos DB, an API Connection, and a Logic App\n\nWith the native Azure provider we can directly use the Azure resource manager API to define API connections and linking it to a logic app. The resulting experience is much faster in comparison to performing the same operation through ARM templates.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init dev\n   ```\n\n2. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n3. Set the required configuration variables for this program, and log into Azure:\n\n   ```bash\n   $ pulumi config set azure-native:location westeurope\n   $ az login\n   ```\n\n4. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n\n        Type                                                        Name                         Status      \n    +   pulumi:pulumi:Stack                                         azure-cosmosdb-logicapp-dev  created     \n    +   ├─ azure-native:resources:ResourceGroup                     logicappdemo-rg              created     \n    +   ├─ azure-native:storage:StorageAccount                      logicappdemosa               created     \n    +   ├─ azure-native:documentdb:DatabaseAccount                  logicappdemo-cdb             created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlDatabase           db                           created     \n    +   ├─ azure-native:web:Connection                              cosmosdbConnection           created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlContainer          container                    created     \n    +   └─ azure-native:logic:Workflow                              workflow                     created     \n\n   Resources:\n       + 8 created\n\n   Duration: 3m16s\n   ```\n\n5. At this point, you have a Cosmos DB collection and a Logic App listening to HTTP requests. You can trigger the Logic App with a `curl` command:\n\n   ```\n   $ curl -X POST \"$(pulumi stack output endpoint)\" -d '\"Hello World\"' -H 'Content-Type: application/json'\n   ```\n\n   The POST body will be saved into a new document in the Cosmos DB collection.\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-cosmosdb-logicapp.html","relUrl":"notes/azure-py-cosmosdb-logicapp.html"},{"doc":"Azure Py Appservice","title":"Azure Py Appservice","hpath":"azure-py-appservice","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service with SQL Database and Application Insights\n\nStarting point for building web application hosted in Azure App Service.\n\nProvisions Azure SQL Database and Azure Application Insights to be used in combination\nwith App Service.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n4. Specify the Azure location to use:\n\n   ```bash\n   $ pulumi config set azure-native:location WestUS\n   ```\n\n5. Define SQL Server password (make it complex enough to satisfy Azure policy):\n\n   ```bash\n   $ pulumi config set --secret sqlPassword <value>\n   ```\n\n6. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 1m14.59910109s\n   ```\n\n7. Check the deployed website endpoint:\n\n   ```bash\n   $ pulumi stack output endpoint\n   https://azpulumi-as0ef47193.azurewebsites.net\n   $ curl \"$(pulumi stack output endpoint)\"\n   <html>\n       <body>\n           <h1>Greetings from Azure App Service!</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-appservice.html","relUrl":"notes/azure-py-appservice.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-py-appservice.wwwroot","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-appservice.wwwroot.html","relUrl":"notes/azure-py-appservice.wwwroot.html"},{"doc":"Azure Py Appservice Docker","title":"Azure Py Appservice Docker","hpath":"azure-py-appservice-docker","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service Running Docker Containers on Linux\n\nStarting point for building a web application hosted in Azure App Service from Docker images.\n\nThe example shows two scenarios:\n\n- Deploying an existing image from Docker Hub\n- Deploying a new custom registry in Azure Container Registry, building a custom Docker image, and running the image from the custom registry\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Create a Python virtualenv, activate it, and install dependencies:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ python3 -m venv venv\n   $ source venv/bin/activate\n   $ pip3 install -r requirements.txt\n   ```\n\n4. Specify the Azure location to use:\n\n   ```bash\n   $ pulumi config set azure-native:location WestUS\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 8 created\n\n   Duration: 56s\n   ```\n\n6. Check the deployed endpoints:\n\n   ```bash\n   $ pulumi stack output helloEndpoint\n   http://hello-app91dfea21.azurewebsites.net/hello\n   $ curl \"$(pulumi stack output helloEndpoint)\"\n   Hello, world!\n\n   $ pulumi stack output getStartedEndpoint\n   http://get-started-15da13.azurewebsites.net\n   $ curl \"$(pulumi stack output getStartedEndpoint)\"\n   <html>\n   <body>\n   <h1>Your custom docker image is running in Azure App Service!</h1>\n   </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-appservice-docker.html","relUrl":"notes/azure-py-appservice-docker.html"},{"doc":"Node App","title":"Node App","hpath":"azure-py-appservice-docker.node-app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-appservice-docker.node-app.html","relUrl":"notes/azure-py-appservice-docker.node-app.html"},{"doc":"App","title":"App","hpath":"azure-py-appservice-docker.node-app.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-appservice-docker.node-app.app.html","relUrl":"notes/azure-py-appservice-docker.node-app.app.html"},{"doc":"Azure Py Aks","title":"Azure Py Aks","hpath":"azure-py-aks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster using the native Azure Provider\n\nThis example deploys an AKS cluster, creates an Azure Active AD application, creates a Service Principal and sets credentials to manage access to the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Python 3.6 or higher](https://www.python.org/downloads/)\n3. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n3. Initiate pulumi to stand up the cluster\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After 3-4 minutes, your cluster will be ready, and the kubeconfig YAML you'll use to connect to the cluster will be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   ```\n\n   Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n   ```\n\n5. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-aks.html","relUrl":"notes/azure-py-aks.html"},{"doc":"Azure Py Aks Helm","title":"Azure Py Aks Helm","hpath":"azure-py-aks-helm","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Helm Chart\n\nThis example demonstrates creating an [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/)\ncluster and deploying a Helm Chart from [Bitnami Helm chart repository](https://github.com/bitnami/charts)\ninto this cluster, all in one Pulumi program.\n\nThe example showcases the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n## Prerequisites\n\n- Install [Pulumi](https://www.pulumi.com/docs/get-started/install/).\n\n- Install [Python 3.6](https://www.python.org/downloads/) or higher.\n\n- We will be deploying to Azure, so you will need an Azure account. If\n  you do not have an account, [sign up for free here](https://azure.microsoft.com/en-us/free/).\n\n- Setup and authenticate the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/).\n\n## Running the Example\n\nIn this example we will provision a Kubernetes cluster running a\npublic Apache web server, verify we can access it, and clean up when\ndone.\n\n1. Get the code:\n\n   ```bash\n   $ git clone git@github.com:pulumi/examples.git\n   $ cd examples/azure-py-aks-helm\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Deploy everything with the `pulumi up` command. This provisions\n   all the Azure resources necessary, including an Active Directory\n   service principal, AKS cluster, and then deploys the Apache Helm\n   Chart, all in a single gesture (takes 5-10 min):\n\n   ```bash\n   $ pulumi up\n   ```\n\n   Note: this command will create a virtual environment and restore\n   dependencies automatically as described in [Pulumi\n   docs](https://www.pulumi.com/docs/intro/languages/python/#virtual-environments).\n\n5. Now your cluster and Apache server are ready. Several output\n   variables will be printed, including your cluster name\n   (`cluster_name`), Kubernetes config (`kubeconfig`) and server IP\n   address (`apache_service_ip`).\n\n   Using these output variables, you may access your Apache server:\n\n   ```bash\n   $ curl $(pulumi stack output apache_service_ip)\n   <html><body><h1>It works!</h1></body></html>\n   ```\n\n   And you may also configure your `kubectl` client using the\n   `kubeconfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get service\n\n   NAME           TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                      AGE\n   apache-chart   LoadBalancer   10.0.154.121   40.125.100.104   80:30472/TCP,443:30364/TCP   8m\n   kubernetes     ClusterIP      10.0.0.1       <none>           443/TCP                      8m\n   ```\n\n6. At this point, you have a running cluster. Feel free to modify\n   your program, and run `pulumi up` to redeploy changes. The Pulumi\n   CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes. This could be\n   altering the existing chart, adding new Azure or Kubernetes\n   resources, or anything, really.\n\n7. Once you are done, you can destroy all of the resources, and the\n   stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   $ rm kubeconfig.yaml\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [cluster.py](/assets/cluster.py)\n- [config.py](/assets/config.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-aks-helm.html","relUrl":"notes/azure-py-aks-helm.html"},{"doc":"Azure Py Aci","title":"Azure Py Aci","hpath":"azure-py-aci","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Container Instances on Linux\n\nStarting point for building web application hosted in Azure Container Instances.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```bash\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 3 created\n\n   Duration: 1m18s\n   ```\n\n5. Check the deployed endpoint:\n\n   ```\n   $ pulumi stack output containerIPv4Address\n   13.83.66.37\n   $ curl \"$(pulumi stack output containerIPv4Address)\"\n   <html>\n   <head>\n       <title>Welcome to Azure Container Instances!</title>\n   </head>\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-py-aci.html","relUrl":"notes/azure-py-aci.html"},{"doc":"Azure Go Static Website","title":"Azure Go Static Website","hpath":"azure-go-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website Using Azure Blob Storage and CDN\n\nThis example configures [Static website hosting in Azure Storage](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website).\n\nIn addition to the Storage itself, a CDN is configured to serve files from the Blob container origin. This may be useful if you need to serve files via HTTPS from a custom domain (not shown in the example).\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 9 created\n   Duration: 2m52s\n   ```\n\n5. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output staticEndpoint\n   https://websitesbc90978a1.z20.web.core.windows.net/\n   $ curl \"$(pulumi stack output staticEndpoint)\"\n   <html>\n       <body>\n           <h1>This file is served from Blob Storage (courtesy of Pulumi!)</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-static-website.html","relUrl":"notes/azure-go-static-website.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-go-static-website.wwwroot","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-static-website.wwwroot.html","relUrl":"notes/azure-go-static-website.wwwroot.html"},{"doc":"Azure Go Appservice Docker","title":"Azure Go Appservice Docker","hpath":"azure-go-appservice-docker","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service Running Docker Containers on Linux\n\nStarting point for building web application hosted in Azure App Service from Docker images.\n\nThe example shows two scenarios:\n\n- Deploying an existing image from Docker Hub\n- Deploying a new custom registry in Azure Container Registry, building a custom Docker image, and running the image from the custom registry\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 8 created\n\n   Duration: 56s\n   ```\n\n5. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output helloEndpoint\n   http://hello-app-91dfea.azurewebsites.net/hello\n   $ curl \"$(pulumi stack output helloEndpoint)\"\n   Hello, world!\n\n   $ pulumi stack output getStartedEndpoint\n   http://get-started-15da13.azurewebsites.net\n   $ curl \"$(pulumi stack output getStartedEndpoint)\"\n   <html>\n   <body>\n   <h1>Your custom docker image is running in Azure App Service!</h1>\n   </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-appservice-docker.html","relUrl":"notes/azure-go-appservice-docker.html"},{"doc":"Node App","title":"Node App","hpath":"azure-go-appservice-docker.node-app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-appservice-docker.node-app.html","relUrl":"notes/azure-go-appservice-docker.node-app.html"},{"doc":"App","title":"App","hpath":"azure-go-appservice-docker.node-app.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-appservice-docker.node-app.app.html","relUrl":"notes/azure-go-appservice-docker.node-app.app.html"},{"doc":"Azure Go Aks","title":"Azure Go Aks","hpath":"azure-go-aks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster using the native Azure Provider\n\nThis example deploys an AKS cluster, creates an Azure Active AD application, creates a Service Principal and sets credentials to manage access to the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n3. Stand up the cluster by invoking pulumi\n   ```bash\n   $ pulumi up\n   ```\n\n4. After 3-4 minutes, your cluster will be ready, and the kubeconfig YAML you'll use to connect to the cluster will be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   ```\n\n   Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n   ```\n\n5. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n6. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-aks.html","relUrl":"notes/azure-go-aks.html"},{"doc":"Azure Go Aks Helm","title":"Azure Go Aks Helm","hpath":"azure-go-aks-helm","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Helm Chart\n\nThis example demonstrates creating an [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/)\ncluster and deploying a Helm Chart from [Bitnami Helm chart repository](https://github.com/bitnami/charts)\ninto this cluster, all in one Pulumi program.\n\nThe example showcases the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n## Prerequisites\n\n- Install [Pulumi](https://www.pulumi.com/docs/get-started/install/).\n\n- Install [Go](https://golang.org)\n\n- We will be deploying to Azure, so you will need an Azure account. If\n  you do not have an account, [sign up for free here](https://azure.microsoft.com/en-us/free/).\n\n- Setup and authenticate the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/).\n\n## Running the Example\n\nIn this example we will provision a Kubernetes cluster running a\npublic Apache web server, verify we can access it, and clean up when\ndone.\n\n1. Get the code:\n\n   ```bash\n   $ git clone git@github.com:pulumi/examples.git\n   $ cd examples/azure-go-aks-helm\n   ```\n\n2. Restore dependencies and build:\n\n   ```bash\n   $ go build\n   ```\n\n3. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n4. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Deploy everything with the `pulumi up` command. This provisions\n   all the Azure resources necessary, including an Active Directory\n   service principal, AKS cluster, and then deploys the Apache Helm\n   Chart, all in a single gesture (takes 5-10 min):\n\n   ```bash\n   $ pulumi up\n   ```\n\n6. Now your cluster and Apache server are ready. Several output\n   variables will be printed, including your cluster name\n   (`clusterName`), Kubernetes config (`kubeconfig`) and server IP\n   address (`apacheServiceIP`).\n\n   Using these output variables, you may access your Apache server:\n\n   ```bash\n   $ curl $(pulumi stack output apacheServiceIP)\n   <html><body><h1>It works!</h1></body></html>\n   ```\n\n   And you may also configure your `kubectl` client using the\n   `kubeConfig` configuration:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get service\n\n   NAME           TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                      AGE\n   apache-chart   LoadBalancer   10.0.154.121   40.125.100.104   80:30472/TCP,443:30364/TCP   8m\n   kubernetes     ClusterIP      10.0.0.1       <none>           443/TCP                      8m\n   ```\n\n7. At this point, you have a running cluster. Feel free to modify\n   your program, and run `pulumi up` to redeploy changes. The Pulumi\n   CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes. This could be\n   altering the existing chart, adding new Azure or Kubernetes\n   resources, or anything, really.\n\n   TIP: if you make changes to the example code outside of an IDE,\n   run the Go compiler after every change:\n\n   ```bash\n   $ go build\n   ```\n\n8. Once you are done, you can destroy all of the resources, and the\n   stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   $ rm kubeconfig.yaml\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cluster.go](/assets/cluster.go)\n- [config.go](/assets/config.go)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-aks-helm.html","relUrl":"notes/azure-go-aks-helm.html"},{"doc":"Azure Go Aci","title":"Azure Go Aci","hpath":"azure-go-aci","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Container Instances on Linux\n\nStarting point for building web application hosted in Azure Container Instances.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 3 created\n\n   Duration: 1m18s\n   ```\n\n5. Check the deployed endpoint:\n\n   ```\n   $ pulumi stack output containerIPv4Address\n   13.83.66.37\n   $ curl \"$(pulumi stack output containerIPv4Address)\"\n   <html>\n   <head>\n       <title>Welcome to Azure Container Instances!</title>\n   </head>\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/azure-go-aci.html","relUrl":"notes/azure-go-aci.html"},{"doc":"Azure Cs Synapse","title":"Azure Cs Synapse","hpath":"azure-cs-synapse","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Synapse Workspace and Pools\n\nStarting point for enterprise analytics solutions based on Azure Synapse.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 13 created\n\n   Duration: 10m53s\n   ```\n\n5. Navigate to <https://web.azuresynapse.net> and sign in to your new workspace.\n\n* * *\n\n## Imported Assets\n\n- [Azure.Synapse.csproj](/assets/azure.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-synapse.html","relUrl":"notes/azure-cs-synapse.html"},{"doc":"Azure Cs Static Website","title":"Azure Cs Static Website","hpath":"azure-cs-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website Using Azure Blob Storage and CDN\n\nThis example configures [Static website hosting in Azure Storage](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website).\n\nIn addition to the Storage itself, a CDN is configured to serve files from the Blob container origin. This may be useful if you need to serve files via HTTPS from a custom domain (not shown in the example).\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 9 created\n   Duration: 2m52s\n   ```\n\n5. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output staticEndpoint\n   https://websitesbc90978a1.z20.web.core.windows.net/\n   $ curl \"$(pulumi stack output staticEndpoint)\"\n   <html>\n       <body>\n           <h1>This file is served from Blob Storage (courtesy of Pulumi!)</h1>\n       </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.StaticWebsite.csproj](/assets/azure.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-static-website.html","relUrl":"notes/azure-cs-static-website.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-cs-static-website.wwwroot","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-static-website.wwwroot.html","relUrl":"notes/azure-cs-static-website.wwwroot.html"},{"doc":"Azure Cs Net5 Aks Webapp","title":"Azure Cs Net5 Aks Webapp","hpath":"azure-cs-net5-aks-webapp","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Deploy Containerized Web Applications using the native Azure Provider, .NET 5, and C# 9\n\nThe example demonstrate several Pulumi features:\n\n- Azure-Native provider\n- Running on .NET 5\n- Using C# 9 constructs like top-level statements, implicit constuctors, and records\n- Defining and using components with Pulumi\n\n## Adjust the code\n\nThis example can cover several deployments architectures that are listed below.\n\n### Public Docker Image to Azure App Service\n\nYou can deploy any public Docker image that contains a web application listening to port 80 to an Azure App Service. Modify the constructor of `MyStack` class in `Program.cs` file to \n\n```cs\npublic MyStack()\n{\n    var app = new WebApplication(\"hello\", new()\n    {\n        DockerImage = \"strm/helloworld-http\"\n    });\n\n    this.Endpoint = app.Endpoint;\n}\n```\n\n### Custom Application to Azure App Service\n\nBuilds a Docker container from the files in `app` folder, push it to Azure Container Registry, and deploy it to an Azure App Service. Modify the constructor of `MyStack` class in `Program.cs` file to \n\n```cs\npublic MyStack()\n{\n    var app = new WebApplication(\"hello\", new()\n    {\n        AppFolder = \"./app\"\n    });\n\n    this.Endpoint = app.Endpoint;\n}\n```\n\n### Public Docker Image to Azure Kubernetes Service\n\nYou can deploy any public Docker image that contains a web application listening to port 80 to a new AKS cluster. Modify the constructor of `MyStack` class in `Program.cs` file to \n\n```cs\npublic MyStack()\n{\n    var cluster = new AksCluster(\"demoaks\");\n\n    var app = new WebApplication(\"hello\", new()\n    {\n        Cluster = cluster,\n        DockerImage = \"strm/helloworld-http\"\n    });\n\n    this.Endpoint = app.Endpoint;\n}\n```\n\n### Custom Application to Azure Kubernetes Service\n\nBuilds a Docker container from the files in `app` folder, push it to Azure Container Registry, and deploy it to a new AKS cluster. Modify the constructor of `MyStack` class in `Program.cs` file to \n\n```cs\npublic MyStack()\n{\n    var cluster = new AksCluster(\"demoaks\");\n\n    var app = new WebApplication(\"hello\", new()\n    {\n        Cluster = cluster,\n        AppFolder = \"./app\"\n    });\n\n    this.Endpoint = app.Endpoint;\n}\n```\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Steps\n\nAfter cloning this repo and making adjustments as described above, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Stand up the application by invoking pulumi\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [AksCluster.cs](/assets/akscluster.cs)\n- [Azure.Dotnet5.csproj](/assets/azure.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [ResourceGroup.cs](/assets/resourcegroup.cs)\n- [WebApplication.cs](/assets/webapplication.cs)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-net5-aks-webapp.html","relUrl":"notes/azure-cs-net5-aks-webapp.html"},{"doc":"App","title":"App","hpath":"azure-cs-net5-aks-webapp.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-net5-aks-webapp.app.html","relUrl":"notes/azure-cs-net5-aks-webapp.app.html"},{"doc":"App","title":"App","hpath":"azure-cs-net5-aks-webapp.app.app","content":"## Imported Assets\n\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-net5-aks-webapp.app.app.html","relUrl":"notes/azure-cs-net5-aks-webapp.app.app.html"},{"doc":"Azure Cs Functions","title":"Azure Cs Functions","hpath":"azure-cs-functions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Functions on a Linux App Service Plan\n\nAzure Functions created from deployment packages in Python and deployed to an App Service Plan on Linux.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Configure the location to deploy the resources to:\n\n   ```\n   $ pulumi config set azure-native:location <location>\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 8 created\n   Duration: 2m42s\n   ```\n\n5. Check the deployed function endpoints:\n\n   ```\n   $ pulumi stack output Endpoint\n   https://app1a2d3e4d.azurewebsites.net/api/Hello?name=Pulumi\n   $ curl \"$(pulumi stack output Endpoint)\"\n   Hello, Pulumi\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.Functions.csproj](/assets/azure.csproj)\n- [FunctionsStack.cs](/assets/functionsstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-functions.html","relUrl":"notes/azure-cs-functions.html"},{"doc":"Functions","title":"Functions","hpath":"azure-cs-functions.functions","content":"## Imported Assets\n\n- [host.json](/assets/host.json)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-functions.functions.html","relUrl":"notes/azure-cs-functions.functions.html"},{"doc":"Hello","title":"Hello","hpath":"azure-cs-functions.functions.hello","content":"## Imported Assets\n\n- [**init**.py](/assets/__init__.py)\n- [function.json](/assets/function.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-functions.functions.hello.html","relUrl":"notes/azure-cs-functions.functions.hello.html"},{"doc":"Azure Cs Credential Rotation One Set","title":"Azure Cs Credential Rotation One Set","hpath":"azure-cs-credential-rotation-one-set","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Automate the rotation of a secret for resources that use one set of authentication credentials\n\nModeled after [Microsoft ARM documentation](https://docs.microsoft.com/en-us/azure/key-vault/secrets/tutorial-rotation)\n\nThis example demonstrates using a managed identity with Azure App Service to access Azure KeyVault, Azure Storage, and Azure SQL Database without passwords or secrets.\n\nThe application consists of several parts:\n\n- A SQL Server to rotate credendials\n- A KeyVault that stores the credentials of the SQL Server\n- A KeyVault that is only accessible to the WebApp and Function (through Managed Identity)\n- An Azure Function that generates a new secret and sets it in SQL Server and Key Vault\n- An Azure WebApp that shows that the secret is changing and still accessible\n- An EventGrid subscription to receive SecretNearExpiry events from KeyVault and, in turn, call the Azure Function\n\n## IMPORTANT: For example purposes, new secrets are continually generated. Make sure to change the validityPeriod or destory the stack when you are done.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Build and publish the ASP.NET Core project:\n\n   ```\n   $ dotnet publish webapp\n   ```\n\n4. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output WebAppEndpoint\n   https://app129968b8.azurewebsites.net/\n   $ Start-Process \"$(pulumi stack output WebAppEndpoint)\"\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [AppStack.cs](/assets/appstack.cs)\n- [Azure.CredentialRotation.OneSet.csproj](/assets/azure-credentialrotation.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-credential-rotation-one-set.html","relUrl":"notes/azure-cs-credential-rotation-one-set.html"},{"doc":"Azure Cs Cosmosdb Logicapp","title":"Azure Cs Cosmosdb Logicapp","hpath":"azure-cs-cosmosdb-logicapp","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Cosmos DB, an API Connection, and a Logic App\n\nWith the native Azure provider we can directly use the Azure resource manager API to define API connections and linking it to a logic app. The resulting experience is much faster in comparison to performing the same operation through ARM templates.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.1+](https://dotnet.microsoft.com/download)\n\n## Running the App\n\n1. Create a new stack:\n\n   ```sh\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration variables for this program, and log into Azure:\n\n   ```bash\n   $ pulumi config set azure-native:location westeurope\n   $ az login\n   ```\n\n3. Perform the deployment:\n\n   ```sh\n   $ pulumi up\n\n        Type                                                Name                         Status      \n    +   pulumi:pulumi:Stack                                 azure-cosmosdb-logicapp-dev  created     \n    +   ├─ azure-native:resources:ResourceGroup             logicappdemo-rg              created     \n    +   ├─ azure-native:storage:StorageAccount              logicappdemosa               created     \n    +   ├─ azure-native:documentdb:DatabaseAccount          logicappdemo-cdb             created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlDatabase   db                           created     \n    +   ├─ azure-native:web:Connection                      cosmosdbConnection           created     \n    +   ├─ azure-native:documentdb:SqlResourceSqlContainer  container                    created     \n    +   └─ azure-native:logic:Workflow                      workflow                     created     \n\n   Resources:\n       + 8 created\n\n   Duration: 3m16s\n   ```\n\n4. At this point, you have a Cosmos DB collection and a Logic App listening to HTTP requests. You can trigger the Logic App with a `curl` command:\n\n   ```\n   $ curl -X POST \"$(pulumi stack output endpoint)\" -d '\"Hello World\"' -H 'Content-Type: application/json'\n   ```\n\n   The POST body will be saved into a new document in the Cosmos DB collection.\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [CosmosDBLogicApp.csproj](/assets/cosmosdblogicapp.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-cosmosdb-logicapp.html","relUrl":"notes/azure-cs-cosmosdb-logicapp.html"},{"doc":"Azure Cs Appservice","title":"Azure Cs Appservice","hpath":"azure-cs-appservice","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service with SQL Database and Application Insights\n\nStarting point for building web application hosted in Azure App Service.\n\nProvisions Azure SQL Database and Azure Application Insights to be used in combination\nwith App Service.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n### Steps\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Configure the location to deploy the resources to:\n\n   ```\n   $ pulumi config set azure-native:location centralus\n   ```\n\n4. Define SQL Server password (make it complex enough to satisfy Azure policy):\n\n   ```\n   pulumi config set --secret sqlPassword <value>\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 1m14.59910109s\n   ```\n\n6. Check the deployed website endpoint:\n\n   ```\n   $ pulumi stack output Endpoint\n   https://azpulumi-as0ef47193.azurewebsites.net\n   $ curl \"$(pulumi stack output Endpoint)\"\n   <html>\n       <body>\n           <h1>Greetings from Azure App Service (courtesy of Pulumi)!</h1>\n       </body>\n   </html>\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [AppServiceStack.cs](/assets/appservicestack.cs)\n- [Azure.AppService.csproj](/assets/azure.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-appservice.html","relUrl":"notes/azure-cs-appservice.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"azure-cs-appservice.wwwroot","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-appservice.wwwroot.html","relUrl":"notes/azure-cs-appservice.wwwroot.html"},{"doc":"Azure Cs Appservice Docker","title":"Azure Cs Appservice Docker","hpath":"azure-cs-appservice-docker","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure App Service Running Docker Containers on Linux\n\nStarting point for building web application hosted in Azure App Service from Docker images.\n\nThe example shows two scenarios:\n\n- Deploying an existing image from Docker Hub\n- Deploying a new custom registry in Azure Container Registry, building a custom Docker image, and running the image from the custom registry\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   Resources:\n       + 8 created\n\n   Duration: 56s\n   ```\n\n5. Check the deployed endpoints:\n\n   ```\n   $ pulumi stack output HelloEndpoint\n   http://hello-app-91dfea.azurewebsites.net/hello\n   $ curl \"$(pulumi stack output HelloEndpoint)\"\n   Hello, world!\n\n   $ pulumi stack output GetStartedEndpoint\n   http://get-started-15da13.azurewebsites.net\n   $ curl \"$(pulumi stack output GetStartedEndpoint)\"\n   <html>\n   <body>\n   <h1>Your custom docker image is running in Azure App Service!</h1>\n   </body>\n   </html>\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.AppService.Docker.csproj](/assets/azure-appservice.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-appservice-docker.html","relUrl":"notes/azure-cs-appservice-docker.html"},{"doc":"Node App","title":"Node App","hpath":"azure-cs-appservice-docker.node-app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-appservice-docker.node-app.html","relUrl":"notes/azure-cs-appservice-docker.node-app.html"},{"doc":"App","title":"App","hpath":"azure-cs-appservice-docker.node-app.app","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-appservice-docker.node-app.app.html","relUrl":"notes/azure-cs-appservice-docker.node-app.app.html"},{"doc":"Azure Cs Aks","title":"Azure Cs Aks","hpath":"azure-cs-aks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster using the native Azure Provider\n\nThis example deploys an AKS cluster, creates an Azure Active AD application, creates a Service Principal and sets credentials to manage access to the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Azure Credentials](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the azure location in which to run the test:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Stand up the cluster by invoking pulumi\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. After 3-4 minutes, your cluster will be ready, and the kubeconfig YAML you'll use to connect to the cluster will be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig.yaml\n   ```\n\n   Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get nodes\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.Aks.csproj](/assets/azure.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-aks.html","relUrl":"notes/azure-cs-aks.html"},{"doc":"Azure Cs Aks Helm","title":"Azure Cs Aks Helm","hpath":"azure-cs-aks-helm","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Kubernetes Service (AKS) Cluster and Helm Chart\n\nThis example demonstrates creating an [Azure Kubernetes Service (AKS)](https://docs.microsoft.com/en-us/azure/aks/)\ncluster and deploying a Helm Chart from [Bitnami Helm chart repository](https://github.com/bitnami/charts)\ninto this cluster, all in one Pulumi program.\n\nThe example showcases the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/).\n\n## Prerequisites\n\n- Install [Pulumi](https://www.pulumi.com/docs/get-started/install/).\n\n- Install [.NET Core](https://dotnet.microsoft.com/download)\n\n- We will be deploying to Azure, so you will need an Azure account. If\n  you do not have an account, [sign up for free here](https://azure.microsoft.com/en-us/free/).\n\n- Setup and authenticate the [native Azure provider for Pulumi](https://www.pulumi.com/docs/intro/cloud-providers/azure/setup/).\n\n## Running the Example\n\nIn this example we will provision a Kubernetes cluster running a\npublic Apache web server, verify we can access it, and clean up when\ndone.\n\n1. Get the code:\n\n   ```bash\n   $ git clone git@github.com:pulumi/examples.git\n   $ cd examples/azure-cs-aks-helm\n   ```\n\n2. Restore dependencies and build:\n\n   ```bash\n   $ dotnet build\n   ```\n\n3. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n4. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set azure-native:location westus2\n   ```\n\n5. Deploy everything with the `pulumi up` command. This provisions\n   all the Azure resources necessary, including an Active Directory\n   service principal, AKS cluster, and then deploys the Apache Helm\n   Chart, all in a single gesture (takes 5-10 min):\n\n   ```bash\n   $ pulumi up\n   ```\n\n6. Now your cluster and Apache server are ready. Several output\n   variables will be printed, including your cluster name\n   (`ClusterName`), Kubernetes config (`Kubeconfig`) and server IP\n   address (`ApacheServiceIP`).\n\n   Using these output variables, you may access your Apache server:\n\n   ```bash\n   $ curl $(pulumi stack output ApacheServiceIP)\n   <html><body><h1>It works!</h1></body></html>\n   ```\n\n   And you may also configure your `kubectl` client using the\n   `Kubeconfig` configuration:\n\n   ```bash\n   $ pulumi stack output Kubeconfig --show-secrets > kubeconfig.yaml\n   $ KUBECONFIG=./kubeconfig.yaml kubectl get service\n\n   NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)                      AGE\n   apache-chart   LoadBalancer   10.0.58.153   20.51.80.30   80:32707/TCP,443:32495/TCP   3m23s\n   kubernetes     ClusterIP      10.0.0.1      <none>        443/TCP                      21m\n   ```\n\n7. At this point, you have a running cluster. Feel free to modify\n   your program, and run `pulumi up` to redeploy changes. The Pulumi\n   CLI automatically detects what has changed and makes the minimal\n   edits necessary to accomplish these changes. This could be\n   altering the existing chart, adding new Azure or Kubernetes\n   resources, or anything, really.\n\n   TIP: if you make changes to the example code outside of an IDE,\n   run the C# compiler after every change:\n\n   ```bash\n   $ dotnet build\n   ```\n\n8. Once you are done, you can destroy all of the resources, and the\n   stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   $ rm kubeconfig.yaml\n   ```\n\n* * *\n\n## Imported Assets\n\n- [MyCluster.cs](/assets/mycluster.cs)\n- [MyConfig.cs](/assets/myconfig.cs)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [azure-cs-aks-helm.csproj](/assets/azure-cs-aks-helm.csproj)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-aks-helm.html","relUrl":"notes/azure-cs-aks-helm.html"},{"doc":"Azure Cs Aci","title":"Azure Cs Aci","hpath":"azure-cs-aci","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Azure Container Instances on Linux\n\nStarting point for building web application hosted in Azure Container Instances.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Login to Azure CLI (you will be prompted to do this during deployment if you forget this step):\n\n   ```\n   $ az login\n   ```\n\n3. Set the Azure region location to use:\n\n   ```\n   $ pulumi config set azure-native:location westus2\n   ```\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n\n       Type                                              Name              Status     \n   +   pulumi:pulumi:Stack                               azure-cs-aci-dev  created\n   +   ├─ azure-native:resources:ResourceGroup           aci-rg            created      \n   +   └─ azure-native:containerinstance:ContainerGroup  helloworld        created\n\n   Outputs:\n       containerIPv4Address: \"20.56.239.40\"\n\n   Resources:\n       + 3 created\n\n   Duration: 1m18s\n   ```\n\n5. Check the deployed endpoints:\n\n   ```\n   $ pulumi stack output containerIPv4Address\n   13.83.66.37\n   $ curl \"$(pulumi stack output containerIPv4Address)\"\n   <html>\n   <head>\n       <title>Welcome to Azure Container Instances!</title>\n   </head>\n   ...\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Azure.Aci.csproj](/assets/azure.csproj)\n- [MyStack.cs](/assets/mystack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/azure-cs-aci.html","relUrl":"notes/azure-cs-aci.html"},{"doc":"Aws Ts Vpc with Ecs Fargate Py","title":"Aws Ts Vpc with Ecs Fargate Py","hpath":"aws-ts-vpc-with-ecs-fargate-py","content":"\n","url":"https://pulumi.dendron.so/notes/dc661e33-77aa-4094-9827-9d1443130193.html","relUrl":"notes/dc661e33-77aa-4094-9827-9d1443130193.html"},{"doc":"Vpc Crosswalk Ts","title":"Vpc Crosswalk Ts","hpath":"aws-ts-vpc-with-ecs-fargate-py.vpc-crosswalk-ts","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Pulumi:  A VPC on AWS built in Typescript.\n\n### What Is This?\n\nThis example uses [Pulumi CrossWalk for AWS](https://www.pulumi.com/docs/guides/crosswalk/aws/#pulumi-crosswalk-for-aws) for deploying your own vpc using crosswalk [VPC](https://www.pulumi.com/docs/guides/crosswalk/aws/vpc/).  The VPC is built in `typescript`\n\n### Why would you do this?\n\nAn example showing that you can easily integrate infrastructure from another Pulumi application written in a different language than the one you are used to.\n\n## Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n\n### Where are the settings?\n\n The settings are in `Pulumi`.stackname`.yaml`\n You will be creating a new file that holds your configs\n\n### Creating a new `Pulumi`.stackname`.yaml`\n\n1. Initialize a new stack called: `vpc-fargate` via [pulumi stack init](https://www.pulumi.com/docs/reference/cli/pulumi_stack_init/). \n   ```\n   $ pulumi stack init vpc-fargate-dev\n   ```\n\n2. Now, install dependencies:\n\n   ```\n   $ npm install\n   ```\n\n3. View the current config settings. This will be empty.\n   ```\n   $ pulumi config\n   ```\n   ```\n   KEY                     VALUE\n   ```\n\n4. Populate the config.\n\n   Here are aws [endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html)\n\n   ```\n   $ pulumi config set aws:region us-east-2 # any valid aws region endpoint\n   $ pulumi config set vpc_name vpc-fargate-dev\n   $ pulumi config set vpc_cidr 10.0.0.0/24\n   $ pulumi config set zone_number 3 # number of availability zones\n   $ pulumi config set number_of_nat_gateways 3 # number of nat gateways. 1 to N(where N is zone_number). recommended to keep at least 2 for high availability.\n   ```\n\n5. View the current config settings\n   `$ pulumi config`\n   ```\n   KEY                     VALUE\n   aws:region              us-east-2\n   number_of_nat_gateways  3\n   vpc_cidr                10.0.0.0/24\n   vpc_name                vpc-fargate-dev\n   zone_number             3\n   ```\n\n6. Launch\n   `$ pulumi up`\n\n7. Expected output:\n\n```\nPreviewing update (vpc-fargate-dev)\n\nView Live: https://app.pulumi.com/shaht/crosswalk-vpc/vpc-fargate-dev/previews/0da8c31d-5cb4-4fee-9a3d-69d9d5d21511\n\n     Type                              Name                           Plan\n +   pulumi:pulumi:Stack               crosswalk-vpc-vpc-fargate-dev  create...\n +   └─ awsx:x:ec2:Vpc                 vpc-fargate-dev                create\n +      ├─ awsx:x:ec2:Subnet           vpc-fargate-dev-public-2       create\n +      │  ├─ aws:ec2:RouteTable       vpc-fargate-dev-public-2       create\n +      │  └─ aws:ec2:Subnet           vpc-fargate-dev-public-2       create\n +      ├─ awsx:x:ec2:Subnet           vpc-fargate-dev-private-2      create\n +      │  ├─ aws:ec2:RouteTable       vpc-fargate-dev-private-2      create\n +      │  ├─ aws:ec2:RouteTable       vpc-fargate-dev-private-2      create\n +      │  ├─ aws:ec2:Subnet                 vpc-fargate-dev-private-2      create\n +      │  └─ aws:ec2:RouteTableAssociation  vpc-fargate-dev-private-2      create\n +      ├─ awsx:x:ec2:Subnet                 vpc-fargate-dev-public-1       create\n +      ├─ awsx:x:ec2:Subnet                 vpc-fargate-dev-public-1       create\n +      │  └─ aws:ec2:RouteTableAssociation  vpc-fargate-dev-public-2       create\n +      │  ├─ aws:ec2:Subnet                 vpc-fargate-dev-public-1       create\n +      │  ├─ aws:ec2:Route                  vpc-fargate-dev-public-1-ig    create\n +      │  └─ aws:ec2:RouteTableAssociation  vpc-fargate-dev-public-1       create\n +      ├─ awsx:x:ec2:Subnet                 vpc-fargate-dev-private-1      create\n +      │  ├─ aws:ec2:RouteTable             vpc-fargate-dev-private-1        create\n +      │  ├─ aws:ec2:RouteTable             vpc-fargate-dev-private-1        create\n +      │  └─ aws:ec2:Route                  vpc-fargate-dev-private-2-nat-2  create\n +   pulumi:pulumi:Stack                     crosswalk-vpc-vpc-fargate-dev    create\n +      │  └─ aws:ec2:Route                  vpc-fargate-dev-private-1-nat-1  create\n +      ├─ awsx:x:ec2:NatGateway             vpc-fargate-dev-0                create\n +      │  ├─ aws:ec2:Eip                    vpc-fargate-dev-0                create\n +      │  └─ aws:ec2:NatGateway             vpc-fargate-dev-0                create\n +      ├─ awsx:x:ec2:Subnet                 vpc-fargate-dev-public-0         create\n +      │  ├─ aws:ec2:RouteTable             vpc-fargate-dev-public-0         create\n +      │  ├─ aws:ec2:Subnet                 vpc-fargate-dev-public-0         create\n +      │  ├─ aws:ec2:Route                  vpc-fargate-dev-public-0-ig      create\n +      │  └─ aws:ec2:RouteTableAssociation  vpc-fargate-dev-public-0         create\n +      ├─ awsx:x:ec2:NatGateway             vpc-fargate-dev-2                create\n +      │  ├─ aws:ec2:Eip                    vpc-fargate-dev-2                create\n +      │  └─ aws:ec2:NatGateway             vpc-fargate-dev-2                create\n +      ├─ awsx:x:ec2:Subnet                 vpc-fargate-dev-private-0        create\n +      │  ├─ aws:ec2:RouteTable             vpc-fargate-dev-private-0        create\n +      │  ├─ aws:ec2:Subnet                 vpc-fargate-dev-private-0        create\n +      │  ├─ aws:ec2:RouteTableAssociation  vpc-fargate-dev-private-0        create\n +      │  └─ aws:ec2:Route                  vpc-fargate-dev-private-0-nat-0  create\n +      ├─ awsx:x:ec2:InternetGateway        vpc-fargate-dev                  create\n +      │  └─ aws:ec2:InternetGateway        vpc-fargate-dev                  create\n +      ├─ awsx:x:ec2:NatGateway             vpc-fargate-dev-1                create\n +      │  ├─ aws:ec2:Eip                    vpc-fargate-dev-1                create\n +      │  └─ aws:ec2:NatGateway             vpc-fargate-dev-1                create\n +      └─ aws:ec2:Vpc                       vpc-fargate-dev                  create\n\nResources:\n    + 44 to create\n\nDo you want to perform this update?  [Use arrows to move, enter to select, type to filter]\n> yes\n  no\n  details\n```\n\nYou need to select `yes` to continue.  The url will look similar to the url below and you will need to replace the `shaht` with your own org, `team-qa`:  \n   <https://app.pulumi.com/`shaht`/crosswalk-vpc/vpc-fargate-dev/>\n\n8. The stack outputs will be used as [StackReference](https://www.pulumi.com/docs/intro/concepts/organizing-stacks-projects/#inter-stack-dependencies) for ECS fargate (resides in ecs-fargate-python folder)\n\n   `$ pulumi stack output`\n\n   ```\n   Current stack outputs (8):\n      OUTPUT                              VALUE\n      pulumi_vpc_aws_tags                 {\"Name\":\"vpc-fargate-dev\",\"availability_zones_used\":\"3\",\"cidr_block\":\"10.0.0.0/24\",\"cost_center\":\"1234\",\"crosswalk\":\"yes\",\"demo\":\"true\",\"number_of_nat_gateways\":\"3\",\"pulumi:Configs\":\"Pulumi.vpc-fargate-dev.yaml\",\"pulumi:Project\":\"crosswalk-vpc\",\"pulumi:Stack\":\"vpc-fargate-dev\"}\n      pulumi_vpc_az_zones                 3\n      pulumi_vpc_cidr                     10.0.0.0/24\n      pulumi_vpc_id                       vpc-0e1a5b4a8277fb720\n      pulumi_vpc_name                     vpc-fargate-dev\n      pulumi_vpc_private_subnet_ids       [\"subnet-0d7d33f32765376aa\",\"subnet-0697aa77c78831c8a\",\"subnet-0e11a5c7b3bfae990\"]\n      pulumi_vpc_public_subnet_ids        [\"subnet-0f09644bed84984e5\",\"subnet-08f11730467a5a376\",\"subnet-0eff65aac894f1115\"]\n      pulumic_vpc_number_of_nat_gateways  3\n   ```\n\n9. The value to use in a [`StackReference`](https://www.pulumi.com/docs/intro/concepts/organizing-stacks-projects/#inter-stack-dependencies) can be retrieved from the last line. \n\n   ```\n      $ pulumi stack\n   ```\n\n   ```\n   ...\n   ...\n   More information at: https://app.pulumi.com/shaht/crosswalk-vpc/vpc-fargate-dev\n   ```\n\n   Here is what we need from above to launch things in here.  \n\n   ```\n      shaht/crosswalk-vpc/vpc-fargate-dev\n   ```\n\n   Note, yours will be something along the lines of:\n\n   ```\n      teamqa/crosswalk-vpc/vpc-fargate-dev\n   ```\n\n\n10. Cleanup.  Destroy the vpc only if all there are no other resources running in it such as ecs fargate.\n    ```\n    $ pulumi destroy -y\n    $ pulumi stack rm vpc-fargate\n    ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-vpc-with-ecs-fargate-py.vpc-crosswalk-ts.html","relUrl":"notes/aws-ts-vpc-with-ecs-fargate-py.vpc-crosswalk-ts.html"},{"doc":"Ecs Fargate Python","title":"Ecs Fargate Python","hpath":"aws-ts-vpc-with-ecs-fargate-py.ecs-fargate-python","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# NGINX on AWS ECS Fargate using Python with a vpc built in Typescript\n\n### What Is This?\n\nThis example demonstrates the ability to deploy resources in Pulumi using one language (TypeScript) and then reference those resources from another Pulumi application using a different language (Python). \n\n[`vpc-crosswalk-ts`](./vpc-crosswalk-ts) deploys an AWS VPC using TypeScript\n\n[`ecs-fargate-python`](./ecs-fargate-python) deploys an AWS ECS Cluster using Python that references the VPC from `vpc-crosswalk-ts`\n\nIt provisions a full [Amazon Elastic Container Service (ECS) \"Fargate\"](https://aws.amazon.com/ecs) cluster and\nrelated infrastructure, running a load-balanced NGINX web server accessible over the Internet on port 80.\nThis example is inspired by [Docker's Getting Started Tutorial](https://docs.docker.com/get-started/).\n\n### Why would you do this?\n\nAn example showing that you can easily infrastructure written in a different language than the one you are used to.  The vpc outputs from vpc-crosswalk-ts folder are used as inputs via [StackReference](https://www.pulumi.com/docs/intro/concepts/organizing-stacks-projects/#inter-stack-dependencies)\n\n## Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n\n### Mandatory AWS Pre-REQ: AWS Console Fix for Tags:\n\nThis is necessary so that the tags work properly in ecs\n[Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)\n\nAs per AWS:  `You must opt in to the new Amazon Resource Name (ARN) and resource identifier (ID) formats.`\n\nThis has to be done per region until AWS enables it as default across the board(April 1, 2021).\n\nAWS Console -> Elastic Container Service ->  Account Settings -> \n\nBEFORE\n\n```\nResource                My IAM user or role account settings \nContainer Instance      Undefined\nService                 Undefined\nTask                    Undefined\n```\n\nAFTER\n\n```\nResource                My IAM user or role account settings \nContainer Instance      Enabled\nService                 Enabled\nTask                    Enabled\n```\n\n## Running the Example\n\n1. Initialize a new stack called: `ecs-fargate-dev` via [pulumi stack init](https://www.pulumi.com/docs/reference/cli/pulumi_stack_init/).\n\n   ```\n   $ pulumi stack init ecs-fargate-dev\n   ```\n\n2. View the current config settings. This will be empty.\n\n   ```\n   $ pulumi config\n   ```\n\n   ```\n   KEY                     VALUE\n   ```\n\n3. Populate the config.\n\n   Here are aws [endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html)\n\n   The [StackReference](https://www.pulumi.com/docs/intro/concepts/organizing-stacks-projects/#inter-stack-dependencies) constructor takes as input a string of the form `org/project/stack`, and lets you access the outputs of that stack.  This format is ONLY for the SaaS based backend of pulumi(not for self-hosted).\n\n   Note: The key is `mystackpath`.  The value for it will be your `stackreference` from the vpc:\n\n   e.g.:  `team-qa/crosswalk-vpc/vpc-fargate-dev`\n\n   ```\n   $ pulumi config set aws:region us-east-2 # must match vpc region\n   $ pulumi config set config set mystackpath team-qa/crosswalk-vpc/vpc-fargate\n   ```\n\n4. View the current config settings\n\n   ```\n   $ pulumi config\n   ```\n\n   ```\n   KEY                     VALUE\n   aws:region           us-east-2\n   mystackpath          team-qa/crosswalk-vpc/vpc-fargate\n   ```\n\n5. Launch\n\n   ```\n   $ pulumi up\n   ```\n\n   select `y` to continue\n\n6. Open the `View Live` link to view the deployment details in the Pulumi Console.  Note, you will have a url that shows up that will look similar to the url below.  The `team-qa` value will be replaced with your own org, for example if your org name is: `team-prod`:\n\n   console view that matches above code as an example:\n\n   <https://app.pulumi.com/`team-qa`/fargate-with-crosswalk-vpc/ecs-fargate-dev/>\n\n   console view with YOUR ORG NAME:\n\n   <https://app.pulumi.com/`team-prod`/fargate-with-crosswalk-vpc/ecs-fargate-dev/>\n\n7. View the outputs\n\n   ```\n   $ pulumi stack output\n   ```\n\n   ```\n   Current stack outputs (2):\n   OUTPUT             VALUE\n   ECS Cluster Tags   {\"Name\":\"pulumi-fargate-ecs-cluster\",\"application\":\"fargate\",\"costcenter\":\"1234\",\"crosswalk-vpc\":\"yes\",\"demo\":\"yes\",\"env\":\"dev\",\"pulumi:Config\":\"Pulumi.ecs-fargate-dev.yaml\",\"pulumi:project\":\"fargate-with-crosswalk-vpc\",\"pulumi:stack\":\"ecs-fargate-dev\",\"vpc_cidr\":\"10.0.0.0/24\",\"vpc_name\":\"vpc-fargate-dev\"}\n\n   Load Balancer URL  pulumi-fargate-alb-7467631-1452059497.us-east-2.elb.amazonaws.com\n   ```\n\n8. Cleanup.\n\n   ```\n   $ pulumi destroy -y\n   $ pulumi rm ecs-fargate-dev\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-vpc-with-ecs-fargate-py.ecs-fargate-python.html","relUrl":"notes/aws-ts-vpc-with-ecs-fargate-py.ecs-fargate-python.html"},{"doc":"Aws Ts Voting App","title":"Aws Ts Voting App","hpath":"aws-ts-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Voting app Using Redis and Flask\n\nA simple voting app that uses Redis for a data store and a Python Flask app for the frontend. The example has been ported from <https://github.com/Azure-Samples/azure-voting-app-redis>.\n\nThe example shows how easy it is to deploy containers into production and to connect them to one another. Since the example defines a custom container, Pulumi does the following:\n\n- Builds the Docker image\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the image to the ECR instance\n- Creates a new ECS task definition, pointing to the ECR image definition\n\n## Prerequisites\n\nTo use this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Deploying and running the program\n\n### Configure the deployment\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Login via `pulumi login`.\n\n2. Create a new stack:\n\n   ```\n   $ pulumi stack init voting-app-testing\n   ```\n\n3. Set AWS as the provider:\n\n   ```\n   $ pulumi config set cloud:provider aws\n   ```\n\n4. Configure Pulumi to use an AWS region that supports Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n5. Set a value for the Redis password. The value can be an encrypted secret, specified with the `--secret` flag. If this flag is not provided, the value will be saved as plaintext in `Pulumi.testing.yaml` (since `testing` is the current stack name).\n\n   ```\n   $ pulumi config set --secret redisPassword S3cr37Password\n   ```\n\n### Install dependencies\n\n1. Restore NPM modules via `npm install` or `yarn install`.\n\n### Preview and deploy\n\n1. Ensure the Docker daemon is running on your machine, then preview and deploy the program with `pulumi up`. The program deploys 24 resources and takes about 10 minutes to complete.\n\n2. View the stack output properties via `pulumi stack output`. The stack output property `frontendUrl` is the URL and port of the deployed app:\n\n   ```bash\n   $ pulumi stack output frontendURL\n   ***.elb.us-west-2.amazonaws.com\n   ```\n\n3. In a browser, navigate to the URL for `frontendURL`. You should see the voting app webpage.\n\n   ![Voting app screenshot](./voting-app-webpage.png)\n\n### Delete resources\n\nWhen you're done, run `pulumi destroy` to delete the program's resources:\n\n```\n$ pulumi destroy\nThis will permanently destroy all resources in the 'testing' stack!\nPlease confirm that this is what you'd like to do by typing (\"testing\"): testing\n```\n\n## About the code\n\nAt the start of the program, the following lines retrieve the value for the Redis password by reading a [configuration value](https://www.pulumi.com/docs/reference/config/). This is the same value that was set above with the command `pulumi config set redisPassword <value>`:\n\n```typescript\nlet config = new pulumi.Config();\nlet redisPassword = config.require(\"redisPassword\");\n```\n\nIn the program, the value can be used like any other variable.\n\n### Resources\n\nThe program provisions two top-level resources with the following commands:\n\n```typescript\nlet redisCache = new awsx.ecs.FargateService(\"voting-app-cache\", ... )\nlet frontend = new awsx.ecs.FargateService(\"voting-app-frontend\", ... )\n```\n\nThe definition of `redisCache` uses the `image` property of `FargateService.taskDefinitionArgs` to point to an existing Docker image. In this case, this is the image `redis` at tag `alpine` on Docker Hub. The `redisPassword` variable is passed to the startup command for this image.\n\nThe definition of `frontend` is more interesting, as it uses `image` property of `FargateService.taskDefinitionArgs` to point to a folder with a Dockerfile, which in this case is a Python Flask app. Pulumi automatically invokes `docker build` for you and pushes the container to ECR.\n\nSo that the `frontend` container can connect to `redisCache`, the environment variables `REDIS`, `REDIS_PORT` are defined. Using the `redisListenre.endpoint` property, it's easy to declare the connection between the two containers.\n\nThe Flask app uses these environment variables to connect to the Redis cache container. See the following in [`frontend/app/main.py`](frontend/app/main.py):\n\n```python\nredis_server =   os.environ['REDIS']\nredis_port =     os.environ['REDIS_PORT']\nredis_password = os.environ['REDIS_PWD']\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [voting-app-webpage.png](/assets/voting-app-webpage.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-voting-app.html","relUrl":"notes/aws-ts-voting-app.html"},{"doc":"Frontend","title":"Frontend","hpath":"aws-ts-voting-app.frontend","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [LICENSE](/assets/license)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-voting-app.frontend.html","relUrl":"notes/aws-ts-voting-app.frontend.html"},{"doc":"App","title":"App","hpath":"aws-ts-voting-app.frontend.app","content":"## Imported Assets\n\n- [config_file.cfg](/assets/config_file.cfg)\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-voting-app.frontend.app.html","relUrl":"notes/aws-ts-voting-app.frontend.app.html"},{"doc":"Templates","title":"Templates","hpath":"aws-ts-voting-app.frontend.app.templates","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-voting-app.frontend.app.templates.html","relUrl":"notes/aws-ts-voting-app.frontend.app.templates.html"},{"doc":"Static","title":"Static","hpath":"aws-ts-voting-app.frontend.app.static","content":"## Imported Assets\n\n- [default.css](/assets/default.css)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-voting-app.frontend.app.static.html","relUrl":"notes/aws-ts-voting-app.frontend.app.static.html"},{"doc":"Aws Ts URL Shortener Cache HTTP","title":"Aws Ts URL Shortener Cache HTTP","hpath":"aws-ts-url-shortener-cache-http","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless URL Shortener with Redis Cache and HttpServer\n\nA sample URL shortener SPA that uses the high-level components. The example shows to combine serverless functions along with containers. This shows that you can create your own higher level\nabstractions for your own use, your team's, or to share with the community using your language's package manager.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init url-cache-testing\n   ```\n\n2. Configure Pulumi to use an AWS region that supports Fargate, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Set a value for the Redis password. The value can be an encrypted secret, specified with the `--secret` flag. If this flag is not provided, the value will be saved as plaintext in `Pulumi.url-cache-testing.yaml` (since `url-cache-testing` is the current stack name).\n\n   ```\n   $ pulumi config set --secret redisPassword S3cr37Password\n   ```\n\n4. Add the 'www' directory to the uploaded function code so it can be served from the http server:\n\n   ```\n   $ pulumi config set cloud-aws:functionIncludePaths www\n   ```\n\n5. Restore NPM modules via `npm install` or `yarn install`.\n\n6. Compile the program via `tsc` or `npm run build` or `yarn run build`.\n\n7. Preview and run the deployment via `pulumi update`. The operation will take about 5 minutes to complete.\n\n   ```\n   $ pulumi update\n   Previewing stack 'url-cache-testing'\n   ...\n\n   Updating stack 'url-cache-testing'\n   Performing changes:\n\n   #:  Resource Type                            Name\n   1:  pulumi:pulumi:Stack                      url-shortener-cache-url-\n   ...\n   49: aws:apigateway:Stage                     urlshortener\n\n   info: 49 changes performed:\n       + 49 resources created\n   Update duration: ***\n   ```\n\n8. To view the API endpoint, use the `stack output` command:\n\n   ```\n   $ pulumi stack output endpointUrl\n   https://***.us-east-1.amazonaws.com/stage/\n   ```\n\n9. Open this page in a browser and you'll see a single page app for creating and viewing short URLs.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [cache.ts](/assets/cache.ts)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-url-shortener-cache-http.html","relUrl":"notes/aws-ts-url-shortener-cache-http.html"},{"doc":"Www","title":"Www","hpath":"aws-ts-url-shortener-cache-http.www","content":"## Imported Assets\n\n- [bootstrap.min.css](/assets/bootstrap.css)\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-url-shortener-cache-http.www.html","relUrl":"notes/aws-ts-url-shortener-cache-http.www.html"},{"doc":"Aws Ts Twitter Athena","title":"Aws Ts Twitter Athena","hpath":"aws-ts-twitter-athena","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Twitter Search in Athena\n\nA sample project that queries Twitter every 2 minutes and stores the results in S3. The project also sets up an Athena table and query. This project demonstrates using `aws.cloudwatch.EventRule` to run a Lambda on an interval.\n\n## Setup\n\nRegister a new [Twitter app](https://apps.twitter.com/). \n\n## Deploy and run the program\n\n1. Create a new stack:\n\n   ```\n   pulumi stack init twitter-athena\n   ```\n\n2. In Twitter, get the keys for your application. Set configuration values for your Twitter consumer key/secret and application key/secret. Use the `--secret` flag to securely encrypt secret values.\n\n   ```\n   pulumi config set twitterAccessTokenKey <Value for Consumer Key (API Key)>\n   pulumi config set --secret twitterAccessTokenSecret <Value for Consumer Secret (API Secret)> \n   pulumi config set twitterConsumerKey <Value for Access Token>\n   pulumi config set --secret twitterConsumerSecret <Value for Access Token Secret>\n   ```\n\n3. Set a search term to query for:\n\n   ```\n   pulumi config set twitterQuery \"Amazon Web Services\"\n   ```\n\n4. Set the AWS region:\n\n   ```bash\n   pulumi config set aws:region us-west-2\n   ```\n\n5. Restore NPM modules via `npm install`.\n\n6. Preview and run the deployment via `pulumi up`. A total of 16 resources are created.\n\n7. Run `pulumi stack output` to view output properties (or view the stack on pulumi.com).\n\n   ```\n   $ pulumi stack output\n   Please choose a stack: aws-serverless-js-twitter-dev\n   Current stack outputs (4):\n       OUTPUT                                           VALUE\n       athenaDatabase                                   tweets_database\n       bucketName                                       tweet-bucket-de18828\n       createTableQueryUri                              https://us-west-2.console.aws.amazon.com/athena/home?force#query/saved/e394800e-a35e-44b3-b8ca-8b47b0f74469\n       topUsersQueryUri                                 https://us-west-2.console.aws.amazon.com/athena/home?force#query/saved/51fa5744-bab6-4e5f-8cd6-9447b6619f06\n   ```\n\n8. Navigate to the URL for `createTableQueryUri` and run the query in the Athena console. This will create a table called `tweets`.\n\n9. Navigate to the URL for `topUsersQueryUri` and run the query in Athena. You'll see tweets for your search term, by users with more than 1000 followers.\n\n   ![Athena console](athena-screenshot.png)\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [athena-screenshot.png](/assets/athena-screenshot.png)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-twitter-athena.html","relUrl":"notes/aws-ts-twitter-athena.html"},{"doc":"Aws Ts Thumbnailer","title":"Aws Ts Thumbnailer","hpath":"aws-ts-thumbnailer","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Video Thumbnailer Using AWS Fargate\n\nA video thumbnail extractor using serverless functions and containers.\n\nLoosely derived from the example at <https://serverless.com/blog/serverless-application-for-long-running-process-fargate-lambda/>.\n\n![When a new video is uploaded, extract a thumbnail](thumbnailer-diagram.png)\n\n## Prerequisites\n\nTo run this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   pulumi stack init thumbnailer-testing\n   ```\n\n2. Configure Pulumi to use an AWS region where Fargate is supported, which is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and deploy the app via `pulumi up`. The preview will take some time, as it builds a Docker container. A total of 32 resources are created.\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'thumbnailer-testing'\n   Previewing changes:\n\n       Type                                Name                                   Plan          Info\n   *   global                              global                                 no change     1 info message. info: Building container image 'pulum-\n   +   pulumi:pulumi:Stack                       video-thumbnailer-thumbnailer-testing  create...     1 info message. info: Successfully tagged pulum-\n   ...\n\n   Do you want to perform this update? yes\n   Updating stack 'thumbnailer-testing'\n   Performing changes:\n\n       Type                                Name                                   Status        Info\n   *   global                              global                                 unchanged     1 info message. info: Building container image 'pulum-\n   +   pulumi:pulumi:Stack                 video-thumbnailer-thumbnailer-testing  created      1 info message. info: 081c66fa4b0c: Pushed\n   + ...\n   ...\n\n   info: 32 changes performed:\n       + 32 resources created\n   Update duration: ***\n\n   Permalink: https://app.pulumi.com/***\n   ```\n\n5. View the stack outputs:\n\n   ```\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT                                           VALUE\n       bucketName                                       ***\n   ```\n\n6. Upload a video, embedding the timestamp in the filename:\n\n   ```\n   $ aws s3 cp ./sample/cat.mp4 s3://$(pulumi stack output bucketName)/cat_00-01.mp4\n   upload: sample/cat.mp4 to s3://***/cat_00-01.mp4\n   ```\n\n7. View the logs from both the Lambda function and the ECS task:\n\n   ````\n   $ pulumi logs -f\n   Collecting logs for stack thumbnailer-testing since ***\n\n   2018-05-25T12:57:26.326-07:00[                    onNewVideo] *** New video: file cat_00-01.mp4 was uploaded at 2018-05-25T19:57:25.507Z.\n   2018-05-25T12:57:30.705-07:00[                    onNewVideo] Running thumbnailer task.\n   2018-05-25T12:58:34.960-07:00[               ffmpegThumbTask] Starting ffmpeg task...\n   2018-05-25T12:58:34.960-07:00[               ffmpegThumbTask] Copying video from S3 bucket-5ea6b28/cat_00-01.mp4 to cat_00-01.mp4...\n   2018-05-25T12:58:37.267-07:00[               ffmpegThumbTask] Completed 256.0 KiB/666.5 KiB (2.5 MiB/s) with 1 fildownload: s3://bucket-5ea6b28/cat_00-01.mp4 to ./cat_00-01.mp4\n   2018-05-25T12:58:40.306-07:00[               ffmpegThumbTask] Copying cat.jpg to S3 at bucket-5ea6b28/cat.jpg ...\n   2018-05-25T12:58:43.034-07:00[               ffmpegThumbTask] Completed 86.6 KiB/86.6 KiB (619.7 KiB/s) with 1 filupload: ./cat.jpg to s3://bucket-5ea6b28/cat.jpg\n   2018-05-25T12:58:43.758-07:00[                onNewThumbnail] *** New thumbnail: file cat.jpg was saved at 2018-05-25T19:58:43.028Z.\n       ```\n\n   ````\n\n8. Download the key frame:\n\n   ```\n   $ aws s3 cp s3://$(pulumi stack output bucketName)/cat.jpg .\n   download: s3://***/cat.jpg to ./cat.jpg\n   ```\n\n## Clean up\n\nTo clean up the resources, you will first need to clear the contents of the bucket.\n\n```bash\naws s3 rm s3://$(pulumi stack output bucketName) --recursive\n```\n\nThen, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [thumbnailer-diagram.key](/assets/thumbnailer-diagram.key)\n- [thumbnailer-diagram.png](/assets/thumbnailer-diagram.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-thumbnailer.html","relUrl":"notes/aws-ts-thumbnailer.html"},{"doc":"Sample","title":"Sample","hpath":"aws-ts-thumbnailer.sample","content":"## Imported Assets\n\n- [cat.mp4](/assets/cat.mp4)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-thumbnailer.sample.html","relUrl":"notes/aws-ts-thumbnailer.sample.html"},{"doc":"Docker Ffmpeg Thumb","title":"Docker Ffmpeg Thumb","hpath":"aws-ts-thumbnailer.docker-ffmpeg-thumb","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-thumbnailer.docker-ffmpeg-thumb.html","relUrl":"notes/aws-ts-thumbnailer.docker-ffmpeg-thumb.html"},{"doc":"Aws Ts Stepfunctions","title":"Aws Ts Stepfunctions","hpath":"aws-ts-stepfunctions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Step Functions\n\nA basic example that demonstrates using AWS Step Functions with a Lambda function.\n\n```\n# Create and configure a new stack\n$ pulumi stack init stepfunctions-dev\n$ pulumi config set aws:region us-east-2\n\n# Install dependencies\n$ npm install\n\n# Preview and run the deployment\n$ pulumi up\n\n# Start execution using the AWS CLI (or from the console at https://console.aws.amazon.com/states)\n$ aws stepfunctions start-execution --state-machine-arn $(pulumi stack output stateMachineArn)\n\n# Remove the app\n$ pulumi destroy\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-stepfunctions.html","relUrl":"notes/aws-ts-stepfunctions.html"},{"doc":"Aws Ts Static Website","title":"Aws Ts Static Website","hpath":"aws-ts-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Secure Static Website Using Amazon S3, CloudFront, Route53, and Certificate Manager\n\nThis example serves a static website using TypeScript and AWS.\n\nThis sample uses the following AWS products:\n\n- [Amazon S3](https://aws.amazon.com/s3/) is used to store the website's contents.\n- [Amazon CloudFront](https://aws.amazon.com/cloudfront/) is the CDN serving content.\n- [Amazon Route53](https://aws.amazon.com/route53/) is used to set up the DNS for the website.\n- [Amazon Certificate Manager](https://aws.amazon.com/certificate-manager/) is used for securing things via HTTPS.\n\n## Getting Started\n\nInstall prerequisites with:\n\n```bash\nnpm install\n```\n\nConfigure the Pulumi program. There are several configuration settings that need to be\nset:\n\n- `certificateArn` - ACM certificate to serve content from. ACM certificate creation needs to be\n  done manually. Also, any certificate used to secure a CloudFront distribution must be created\n  in the `us-east-1` region.\n- `targetDomain` - The domain to serve the website at (e.g. [www.example.com](http://www.example.com)). It is assumed that\n  the parent domain (example.com) is a Route53 Hosted Zone in the AWS account you are running the\n  Pulumi program in.\n- `pathToWebsiteContents` - Directory of the website's contents. e.g. the `./www` folder.\n\n## How it works\n\nThe Pulumi program constructs the S3 bucket, and constructs an `aws.s3.BucketObject` object\nfor every file in `config.pathToWebsiteContents`. This is essentially tracks every file on\nyour static website as a Pulumi-managed resource. So a subsequent `pulumi up` where the\nfile's contents have changed will result in an update to the `aws.s3.BucketObject` resource.\n\nNote how the `contentType` property is set by calling the NPM package [mime](https://www.npmjs.com/package/mime).\n\n```typescript\nconst contentFile = new aws.s3.BucketObject(\n    relativeFilePath,\n    {\n        key: relativeFilePath,\n\n        acl: \"public-read\",\n        bucket: contentBucket,\n        contentType: mime.getType(filePath) || undefined,\n        source: new pulumi.asset.FileAsset(filePath),\n    });\n```\n\nThe Pulumi program then creates an `aws.cloudfront.Distribution` resource, which will serve\nthe contents of the S3 bucket. The CloudFront distribution can be configured to handle\nthings like custom error pages, cache TTLs, and so on.\n\nFinally, an `aws.route53.Record` is created to associate the domain name ([www.example.com](http://www.example.com))\nwith the CloudFront distribution (which would be something like d3naiyyld9222b.cloudfront.net).\n\n```typescript\nreturn new aws.route53.Record(\n        targetDomain,\n        {\n            name: domainParts.subdomain,\n            zoneId: hostedZone.zoneId,\n            type: \"A\",\n            aliases: [\n                {\n                    name: distribution.domainName,\n                    zoneId: distribution.hostedZoneId,\n                    evaluateTargetHealth: true,\n                },\n            ],\n        });\n```\n\n## Troubleshooting\n\n### Scary HTTPS Warning\n\nWhen you create an S3 bucket and CloudFront distribution shortly after one another, you'll see\nwhat looks to be HTTPS configuration issues. This has to do with the replication delay between\nS3, CloudFront, and the world-wide DNS system.\n\nJust wait 15 minutes or so, and the error will go away. Be sure to refresh in an incognito\nwindow, which will avoid any local caches your browser might have.\n\n### \"PreconditionFailed: The request failed because it didn't meet the preconditions\"\n\nSometimes updating the CloudFront distribution will fail with:\n\n```text\n\"PreconditionFailed: The request failed because it didn't meet the preconditions in one or more\nrequest-header fields.\"\n```\n\nThis is caused by CloudFront confirming the ETag of the resource before applying any updates.\nETag is essentially a \"version\", and AWS is rejecting any requests that are trying to update\nany version but the \"latest\".\n\nThis error will occur when the state of the ETag get out of sync between the Pulumi Service\nand AWS. (Which can happen when inspecting the CloudFront distribution in the AWS console.)\n\nYou can fix this by running `pulumi refresh` to pickup the newer ETag values.\n\n## Deployment Speed\n\nThis example creates a `aws.S3.BucketObject` for every file served from the website. When deploying\nlarge websites, that can lead to very long updates as every individual file is checked for any\nchanges.\n\nIt may be more efficient to not manage individual files using Pulumi and and instead just use the\nAWS CLI to sync local files with the S3 bucket directly.\n\nRemove the call to `crawlDirectory` and run `pulumi up`. Pulumi will then delete the contents\nof the S3 bucket, and no longer manage their contents. Then do a bulk upload outside of Pulumi\nusing the AWS CLI.\n\n```bash\naws s3 sync ./www/ s3://example-bucket/\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-static-website.html","relUrl":"notes/aws-ts-static-website.html"},{"doc":"Www","title":"Www","hpath":"aws-ts-static-website.www","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-static-website.www.html","relUrl":"notes/aws-ts-static-website.www.html"},{"doc":"Aws Ts Stackreference","title":"Aws Ts Stackreference","hpath":"aws-ts-stackreference","content":"\n","url":"https://pulumi.dendron.so/notes/0a314c36-ec10-4968-9f2c-87bf93c6b7d9.html","relUrl":"notes/0a314c36-ec10-4968-9f2c-87bf93c6b7d9.html"},{"doc":"Team","title":"Team","hpath":"aws-ts-stackreference.team","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-stackreference.team.html","relUrl":"notes/aws-ts-stackreference.team.html"},{"doc":"Department","title":"Department","hpath":"aws-ts-stackreference.department","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-stackreference.department.html","relUrl":"notes/aws-ts-stackreference.department.html"},{"doc":"Company","title":"Company","hpath":"aws-ts-stackreference.company","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-stackreference.company.html","relUrl":"notes/aws-ts-stackreference.company.html"},{"doc":"Aws Ts Slackbot","title":"Aws Ts Slackbot","hpath":"aws-ts-slackbot","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Create a Slackbot for Posting Mention Notifications\n\nThis is an example of a simple Slackbot (called '@mentionbot') that posts a notification to a specific channel any time you're @mentioned anywhere, whether in various channels or via direct message. This bot is useful for when you need a time-ordered list of @mentions to go through at a later point.\n\nSlack users can subscribe/unsubscribe from notifications easily.  To receive notifications, add `@mentionbot` to a channel you want to be notified in.  Then send any message to `@mentionbot` to subscribe.  To stop getting messages, send a message to `@mentionbot` containing the word `unsubscribe`.\n\nThis Slackbot example contains a few useful patterns, showing you how to create a Slackbot while taking advantage of a lot of conveniences that Pulumi and the `aws` and `awsx` packages provide.\n\n1. We set up an ApiGateway API to receive push notifications from Slack whenever important events happen.\n2. Slack has strict requirements on how quickly the push endpoint must respond with `200` notifications before they consider the message as \"not received\", triggering back-off and resending of those same messages.  For this reason, our example does not process Slack `event` messages as they come in.  Instead, they are immediately added to an [AWS SNS Topic](https://aws.amazon.com/sns/) to be processed at a later point in time. This allows the ApiGateway call to return quickly, satisfying Slack's requirements.\n3. Two [AWS Lambdas](https://aws.amazon.com/lambda/) are created naturally using simple JavaScript functions.  One function is used to create the Lambda that is called when Slack pushes a notification.  The other is used to specify the Lamdba that will process the messages added to the Topic.  These JavaScript functions can easily access the other Pulumi resources created, avoiding the need to figure out ways to pass Resource ARNs/IDs/etc. to the Lambdas to ensure they can talk to the right resources.  If these resources are swapped out in the future (for example, using RDS instead of DynamoDB, or SQS instead of SNS), Pulumi will make sure that the Lambdas were updated properly.\n4. [Pulumi Secrets](https://www.pulumi.com/docs/intro/concepts/config/) provides a simple way to pass important credentials (like your Slack tokens) without having to directly embed them in your application code.\n\nFirst, we'll set up the Pulumi App.  Then, we'll go create and configure a Slack App and Bot to interact with our Pulumi App.\n\n## Deploy the App\n\n> **Note:** Some values in this example will be different from run to run.  These values are indicated\n> with `***`.\n\n### Step 1: Create a new stack\n\n```bash\n$ pulumi stack init mentionbot\n```\n\n### Step 2: Set the AWS region\n\n```\n$ pulumi config set aws:region us-east-2\n```\n\n### Step 3: Restore NPM modules\n\nRun `npm install` or `yarn install` to restore your NPM modules.\n\n### Step 4: Preview and deploy your app\n\nRun `pulumi up` to preview and deploy your AWS resources.\n\n```\n$ pulumi up\nPreviewing update (mentionbot):\n...\n\n    Do you want to perform this update? yes\n    Updating (mentionbot):\n\n         Type                                Name                          Status \n     +   pulumi:pulumi:Stack                 aws-ts-slack-mentionbot       created\n     +   ├─ aws:sns:TopicEventSubscription   processTopicMessage           created\n     +   │  ├─ aws:iam:Role                  processTopicMessage           created\n     +   │  ├─ aws:iam:RolePolicyAttachment  processTopicMessage-32be53a2  created\n     +   │  ├─ aws:lambda:Function           processTopicMessage           created\n     +   │  ├─ aws:sns:TopicSubscription     processTopicMessage           created\n     +   │  └─ aws:lambda:Permission         processTopicMessage           created\n     +   ├─ aws:apigateway:x:API             mentionbot                    created\n     +   │  ├─ aws:iam:Role                  mentionbot8e3f228c            created\n     +   │  ├─ aws:iam:RolePolicyAttachment  mentionbot8e3f228c-32be53a2   created\n     +   │  ├─ aws:lambda:Function           mentionbot8e3f228c            created\n     +   │  ├─ aws:apigateway:RestApi        mentionbot                    created\n     +   │  ├─ aws:apigateway:Deployment     mentionbot                    created\n     +   │  ├─ aws:lambda:Permission         mentionbot-89b3ba11           created\n     +   │  └─ aws:apigateway:Stage          mentionbot                    created\n     +   ├─ aws:dynamodb:Table               subscriptions                 created\n     +   └─ aws:sns:Topic                    messages                      created\n\n    Outputs:\n        url: \"https://***.execute-api.us-east-2.amazonaws.com/stage/\"\n\n    Resources:\n        + 17 created\n\n    Duration: 25s\n\n    Permalink: https://app.pulumi.com/***/mentionbot/updates/1\n```\n\n### Step 5: Create a new Slackbot\n\nTo create a new Slackbot, first go to <https://api.slack.com/apps> and create an account if necessary.  Next, click on 'Create New App' here:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648728-e7127180-5795-11e9-9ddf-849d789ea05b.png>\n</p>\n    \nPick your desired name for the app, and the Workspace the app belongs to.  Here we choose `MentionBot`:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648747-f7c2e780-5795-11e9-9f95-e715ba76b7c8.png>\n</p>\n\nOnce created, you will need to 'Add features and functionality' to your app. You'll eventually need all these configured:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648788-15904c80-5796-11e9-9c6c-27f68c900f13.png>\n</p>\n\nFirst, we'll enable 'Incoming Webhooks'.  This allows your Slack bot to post messages into Slack for you:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648806-22ad3b80-5796-11e9-8dfd-ba86b7ba9351.png>\n</p>\n\nNext, create a bot user like so:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648827-32c51b00-5796-11e9-9abc-086a3760f6af.png>\n</p>\n\nNext, we'll enable 'Event Subscriptions'.  This will tell Slack to push events to your ApiGateway endpoint when changes happen.  Note that we put the Stack-Output `url` shown above (along with the `events` suffix).  This corresponds to the specific ApiGateway Route that was defined in the Pulumi app. Note that Slack will test this endpoint to ensure it is accepting Slack notifications and responding to them in a valid manner.  We'll also setup notifications for the events we care about.  Importantly, our Slackbot will have to hear about when people mention it (for subscribing/unsubscribing), as well as hearing about all messages (so it can look for @-mentions):\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648880-58522480-5796-11e9-95fd-edfc9d12c381.png>\n<img src=https://user-images.githubusercontent.com/4564579/55648902-63a55000-5796-11e9-8cf6-8e8f4909d600.png>\n</p>\n\nNext, we'll go to 'Permissions'.  Here, we can find the OAuth tokens your Pulumi App will need.  Specifically, we'll need the 'Bot User OAuth Token' listed here:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648951-7fa8f180-5796-11e9-81ba-b45d7ebc4bb7.png>\n</p>\n\nUnderneath this, we'll set the following Scopes defining the permissions of the bot:\n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647362-55edcb80-5792-11e9-8f60-ae5261fa9c9a.png>\n</p>\n\nNow, we're almost done.  The only thing left to do is supply your Pulumi App with the appropriate secrets/tokens.  We'll need the Bot OAuth token (shown above), and the 'Verification Token' (found under 'Basic Information'): \n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647507-af55fa80-5792-11e9-80bf-b07b894d996f.png>\n</p>\n\nSupply these both like so:\n\n```\n$ pulumi config set --secret mentionbot:slackToken xoxb-...\n$ pulumi config set --secret mentionbot:verificationToken d...\n```\n\nNext, install the Slack App into your workspace:\n\n<p align=center>\n   <img src=https://user-images.githubusercontent.com/4564579/55647599-eaf0c480-5792-11e9-88c5-83daefb32580.png>\n</p>\n\nAnd we're done!\n\n### Step 6: Interact with the Slackbot\n\nFrom Slack you can now create your own private channel:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55647696-2ab7ac00-5793-11e9-8165-5672146036d3.png>\n</p>\n\nInvite the bot to the channel:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55647722-40c56c80-5793-11e9-8a97-5ce087d2bfe3.png>\n</p>\n\nThen send it a message.  Note that it may take several seconds for the bot to respond due to Slack push notification delays, SNS Topic delays, and Slack incoming message delays.\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648466-3e641200-5795-11e9-9917-e64cdf45b63e.png>\n</p>\n\nAnd you're set!  From now on when someone from your team mentions you, you'll get a little message with a direct mention in your channel like so:\n\n<p align=center>\n<img src=https://user-images.githubusercontent.com/4564579/55648631-b0d4f200-5795-11e9-886a-8ce0f932e9f1.png>\n</p>\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-slackbot.html","relUrl":"notes/aws-ts-slackbot.html"},{"doc":"Aws Ts Serverless Raw","title":"Aws Ts Serverless Raw","hpath":"aws-ts-serverless-raw","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless C# App\n\nThis example deploys a complete serverless C# application using raw `aws.apigateway.RestAPI`, `aws.lambda.Function` and\n`aws.dynamodb.Table` resources from `@pulumi/aws`.  Although this doesn't feature any of the higher-level abstractions\nfrom the `@pulumi/cloud` package, it demonstrates that you can program the raw resources directly available in AWS\nto accomplish all of the same things this higher-level package offers.\n\nThe deployed Lambda function is a simple C# application, highlighting the ability to manage existing application code\nin a Pulumi application, even if your Pulumi code is written in a different language like JavaScript or Python.\n\nThe Lambda function is a C# application using .NET Core 3.1 (a similar approach works for any other language supported by\nAWS Lambda).\n\n## Deploying and running the Pulumi App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Restore NPM modules via `npm install` or `yarn install`.\n\n3. Build the C# application.\n\n   ```bash\n   dotnet publish app\n   ```\n\n4. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-2\n   ```\n\n5. Optionally, set AWS Lambda provisioned concurrency:\n\n   ```bash\n   $ pulumi config set provisionedConcurrency 1\n   ```\n\n6. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 10 created\n   Duration: 1m 20s\n   ```\n\n7. Check the deployed GraphQL endpoint:\n\n   ```\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"Path\":\"/hello\",\"Count\":0}\n   ```\n\n8. See the logs\n\n   ```\n   $ pulumi logs -f\n   2018-03-21T18:24:52.670-07:00[    mylambda-d719650] START RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7 Version: $LATEST\n   2018-03-21T18:24:56.171-07:00[    mylambda-d719650] Getting count for '/hello'\n   2018-03-21T18:25:01.327-07:00[    mylambda-d719650] Got count 0 for '/hello'\n   2018-03-21T18:25:02.267-07:00[    mylambda-d719650] END RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7\n   2018-03-21T18:25:02.267-07:00[    mylambda-d719650] REPORT RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7   Duration: 9540.93 ms    Billed Duration: 9600 ms        Memory Size: 128 MB     Max Memory Used: 37 MB\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-raw.html","relUrl":"notes/aws-ts-serverless-raw.html"},{"doc":"App","title":"App","hpath":"aws-ts-serverless-raw.app","content":"## Imported Assets\n\n- [Functions.cs](/assets/functions.cs)\n- [app.csproj](/assets/app.csproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-raw.app.html","relUrl":"notes/aws-ts-serverless-raw.app.html"},{"doc":"Aws Ts Serverless Datawarehouse","title":"Aws Ts Serverless Datawarehouse","hpath":"aws-ts-serverless-datawarehouse","content":"# Serverless Datawarehouse\n\nA sample project that deploys a serverless data warehouse. This highly scalable data warehouse is pay as you go, scales read and write workload independently, and uses fully managed services.\n\n![Serverless Data Warehouse Architecture](architecture.png)\n\n## Deploy and run the program\n\n1. Create a new stack\n\n```sh\npulumi stack init dev\n```\n\n2. Install dependencies\n\n```sh\nnpm install\n```\n\n3. Deploy\n\n```sh\npulumi up\n```\n\n4. Open Athena in the AWS Console, and perform some queries:\n\n```sql\nselect * from analytics_dw.clicks;\n```\n\n5. Clean up the stack\n\n```\npulumi destroy\n```\n\n## Testing\n\n### Unit Tests\n\n```sh\nnpm run test:unit\n```\n\n### Integration Tests\n\nThere is an integration test that deploys a fresh stack, ingests sample data, and verifies that the data can be queried on the other end through Athena. \n\nBecause `ServerlessDataWarehouse` statically names Glue Databases, the integration test will fail with a `409 conflict` if you already have a dev stack running.\n\n```sh\n# make sure you have run a pulumi destroy against your dev stack first\nnpm run test:int\n```\n\n## API\n\n### `ServerlessDataWarehouse: class`\n\nA container for your data warehouse that creates and manages a Glue Database, an S3 Bucket to store data, and another S3 bucket for Athena query results.\n\n### Constructor\n\n#### `ServerlessDataWarehouse(name: string, args?: DataWarehouseArgs, opts?: pulumi.ComponentResourceOptions)`\n\nParameters:\n\n- `name: string`: Name of the pulumi resource. Will also be used for the Glue Database.\n- `args: DataWarehouseArgs`:\n  - `database?: aws.glue.CatalogDatabase`: optionally provide an existing Glue Database.\n  - `isDev?: boolean`: flag for development, enables force destroy on S3 buckets to simplify stack teardown. \n\n```ts\nconst dataWarehouse = new ServerlessDataWarehouse(\"analytics_dw\");\n\n// make available as pulumi stack output\nexport dwBucket = dataWarehouse.dataWarehouseBucket;\n```\n\n### Members:\n\n- `dataWarehouseBucket: aws.s3.bucket`: Bucket to store table data.\n- `queryResultsBucket: aws.s3.Bucket`: Bucket used by Athena for query output. \n- `database: aws.glue.CatalogDatabase`: Glue Database to hold all tables created through method calls.\n\n### Methods:\n\n#### `withTable: function`\n\nCreats a glue table owned by creates a Glue Table owned by `this.database` configured to read data from `${this.dataWarehouseBucket}/${name}`\n\nParameters:\n\n- `name: string`: The name of the table. The table will be configured to read data from `${this.dataWarehouseBucket}/${name}`.\n- `args: TableArgs`: \n  - `columns: input.glue.CatalogTableStorageDescriptorColumn[]`: Description of the schema.\n  - `partitionKeys?: input.glue.CatalogTablePartitionKey[]`: Partition keys to be associated with the schema. \n  - `dataFormat?: \"JSON\" | \"parquet\"`: Specifies the encoding of files written to `${this.dataWarehouseBucket}/${name}`. Defaults to parquet. Will be used to configure serializers and metadata that enable Athena and other engines to execute queries. \n\n```ts\nconst factTableName = \"facts\";\nconst factColumns = [\n    {\n        name: \"thing\",\n        type: \"string\"\n    },\n    {\n        name: \"color\",\n        type: \"string\"\n    }\n];\n\nconst factTableArgs: TableArgs = {\n    columns: factColumns,\n    dataFormat: \"JSON\"\n};\n\ndataWarehouse.withTable(\"facts\", factTableArgs);\n```\n\n#### `withStreamingBatchInputTable: function`\n\nCreates a table implements the above architecture diagram. It creates a Kinesis input stream for JSON records, a Glue Table, and Kinesis Firehose that vets JSON records against the schema, converts them to parquet, and writes files into hourly folders `${dataWarehouseBucket}/${tableName}/YYYY/MM/DD/HH`. Partitions are automatically registered for a key `inserted_at=\"YYYY/MM/DD/HH` to enable processing time queries. \n\nParameters: \n\n- `name: string`: The name of the table. The table will be configured to read data from `${this.dataWarehouseBucket}/${name}`.\n- `args: StreamingInputTableArgs`\n  - `columns: input.glue.CatalogTableStorageDescriptorColumn[]`: Description of the schema.\n  - `inputStreamShardCount: number`: Number of shards to provision for the input Kinesis steam. This is how you scale your write workload.\n  - `region: string`: region to localize resources like Kinesis and Lambda\n  - `partitionKeyName?: string`: Name of the `YYYY/MM/DD/HH` partition key. Defaulst to `inserted_at`.\n  - `partitionScheduleExpression?: string` AWS Lambda cron expression used to schedule the job that writes partition keys to Glue. Defaults to `rate(1 hour)`. Useful for development or integration testing where you want to ensure that partitions are writtin in a timely manner. \n- `fileFlushIntervalSeconds?: number`: Period in seconds that Kinesis shards flush files to S3. Defaults to the max of 900 (15 minutes). Min 60 seconds. \n\n```ts\nconst columns = [\n    {\n        name: \"id\",\n        type: \"string\"\n    },\n    {\n        name: \"session_id\",\n        type: \"string\"\n    },\n    {\n        name: \"event_time\",\n        type: \"string\"\n    }\n];\n\nconst impressionsTableName = \"impressions\";\n\nconst streamingTableArgs: StreamingInputTableArgs = {\n    columns,\n    inputStreamShardCount: 1,\n    region: \"us-west-2\",\n    partitionScheduleExpression: \"rate(1 minute)\",\n    fileFlushIntervalSeconds: 60\n};\n\n\nconst dataWarehouse = new ServerlessDataWarehouse(\"analytics_dw\", { isDev })\n    .withStreamingInputTable(\"impressions\", streamingTableArgs);\n```\n\n#### `withBatchInputTable: function`\n\nDesigned for batch loading tables on a regular cadence. Creates a Glue Table and executes the user specified function on the specified interval. Function runs inside of Lambda, and must be able to operate within the Lambda runtime constraints on memory, disk, and execution time. Runs with 3GB RAM, 500MB disk, and 15 min timeout. \n\nParameters: \n\n- `name: string`: The name of the table. The table will be configured to read data from `${this.dataWarehouseBucket}/${name}`.\n- `args: BatchInputTableArgs`:\n  - `columns: input.glue.CatalogTableStorageDescriptorColumn[]`: Description of the schema.\n  - `partitionKeys?: input.glue.CatalogTablePartitionKey[]`: Partition keys to be associated with the schema. \n  - `jobFn: (event: EventRuleEvent) => any`: Code to be executed in the lambda that will write data to `${this.dataWarehouseBucket}/${name}`.\n  - `scheduleExpression: string`: AWS Lambda cron expression that `jobFn` will execute on.\n  - `policyARNsToAttach?: pulumi.Input<ARN>[]`: List of ARNs needed by the Lambda role for `jobFn` to run successfully. (Athena access, S3 access, Glue access, etc).\n  - `dataFormat?: \"JSON\" | \"parquet\"`: Specifies the encoding of files written to `${this.dataWarehouseBucket}/${name}`. Defaults to parquet. Will be used to configure serializers and metadata that enable Athena and other engines to execute queries. \n\n```ts\nconst aggregateTableName = \"aggregates\";\n\nconst aggregateTableColumns = [\n    {\n        name: \"event_type\",\n        type: \"string\"\n    },\n    {\n        name: \"count\",\n        type: \"int\"\n    },\n    {\n        name: \"time\",\n        type: \"string\"\n    }\n];\n\n// Function reads from other tables via Athena and writes JSON to S3.\nconst aggregationFunction = async (event: EventRuleEvent) => {\n    const athena = require(\"athena-client\");\n    const bucketUri = `s3://${athenaResultsBucket.get()}`;\n    const clientConfig = {\n        bucketUri\n    };\n    const awsConfig = {\n        region\n    };\n    const athenaClient = athena.createClient(clientConfig, awsConfig);\n    let date = moment(event.time);\n    const partitionKey = date.utc().format(\"YYYY/MM/DD/HH\");\n    const getAggregateQuery = (table: string) => `select count(*) from ${databaseName.get()}.${table} where inserted_at='${partitionKey}'`;\n    const clicksPromise = athenaClient.execute(getAggregateQuery(clicksTableName)).toPromise();\n    const impressionsPromise = athenaClient.execute(getAggregateQuery(impressionsTableName)).toPromise();\n\n    const clickRows = await clicksPromise;\n    const impressionRows = await impressionsPromise;\n    const clickCount = clickRows.records[0]['_col0'];\n    const impressionsCount = impressionRows.records[0]['_col0'];\n    const data = `{ \"event_type\": \"${clicksTableName}\", \"count\": ${clickCount}, \"time\": \"${partitionKey}\" }\\n{ \"event_type\": \"${impressionsTableName}\", \"count\": ${impressionsCount}, \"time\": \"${partitionKey}\"}`;\n    const s3Client = new S3();\n    await s3Client.putObject({\n        Bucket: dwBucket.get(),\n        Key: `${aggregateTableName}/${partitionKey}/results.json`,\n        Body: data\n    }).promise();\n};\n\nconst policyARNsToAttach: pulumi.Input<ARN>[] = [\n    aws.iam.ManagedPolicies.AmazonAthenaFullAccess,\n    aws.iam.ManagedPolicies.AmazonS3FullAccess\n];\n\nconst aggregateTableArgs: BatchInputTableArgs = {\n    columns: aggregateTableColumns,\n    jobFn: aggregationFunction,\n    scheduleExpression,\n    policyARNsToAttach,\n    dataFormat: \"JSON\",\n}\n\ndataWarehouse.withBatchInputTable(aggregateTableName, aggregateTableArgs);\n```\n\n#### `getTable: function`\n\nRetrieves a table with the specified name.\n\nParameters: \n\n- `name: string` the name of the `ServerlessDataWarehouse` owned table to retrieve. \n\n#### `listTables: function`\n\nReturns an array of table names managed by this data warehouse.\n\n#### `getInputStream: function`\n\nRetrieves the input stream associated with the specified table name, if any. \n\nParameters:\n\n- `tableName: string`: Name of the table to find an associated inputStream for. \n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [architecture.png](/assets/architecture.png)\n- [index.ts](/assets/index.ts)\n- [jest.config.js](/assets/jest.js)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.html","relUrl":"notes/aws-ts-serverless-datawarehouse.html"},{"doc":"Utils","title":"Utils","hpath":"aws-ts-serverless-datawarehouse.utils","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.utils.html","relUrl":"notes/aws-ts-serverless-datawarehouse.utils.html"},{"doc":"Testing","title":"Testing","hpath":"aws-ts-serverless-datawarehouse.testing","content":"\n","url":"https://pulumi.dendron.so/notes/910b9f8d-a0c5-42bf-8eaa-dbc86a916c2c.html","relUrl":"notes/910b9f8d-a0c5-42bf-8eaa-dbc86a916c2c.html"},{"doc":"Integration","title":"Integration","hpath":"aws-ts-serverless-datawarehouse.testing.integration","content":"## Imported Assets\n\n- [execute.ts](/assets/execute.ts)\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.testing.integration.html","relUrl":"notes/aws-ts-serverless-datawarehouse.testing.integration.html"},{"doc":"Eventgenerator","title":"Eventgenerator","hpath":"aws-ts-serverless-datawarehouse.testing.eventgenerator","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.testing.eventgenerator.html","relUrl":"notes/aws-ts-serverless-datawarehouse.testing.eventgenerator.html"},{"doc":"Datawarehouse","title":"Datawarehouse","hpath":"aws-ts-serverless-datawarehouse.datawarehouse","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.datawarehouse.html","relUrl":"notes/aws-ts-serverless-datawarehouse.datawarehouse.html"},{"doc":"Partitionregistrar","title":"Partitionregistrar","hpath":"aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n- [partitionHelper.ts](/assets/partitionhelper.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar.html","relUrl":"notes/aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar.html"},{"doc":"__tests__","title":"__tests__","hpath":"aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar.__tests__","content":"## Imported Assets\n\n- [partitionHelper.unit.test.ts](/assets/partitionhelper-unit.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar.__tests__.html","relUrl":"notes/aws-ts-serverless-datawarehouse.datawarehouse.partitionregistrar.__tests__.html"},{"doc":"Lambdacron","title":"Lambdacron","hpath":"aws-ts-serverless-datawarehouse.datawarehouse.lambdacron","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.datawarehouse.lambdacron.html","relUrl":"notes/aws-ts-serverless-datawarehouse.datawarehouse.lambdacron.html"},{"doc":"Inputstream","title":"Inputstream","hpath":"aws-ts-serverless-datawarehouse.datawarehouse.inputstream","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.datawarehouse.inputstream.html","relUrl":"notes/aws-ts-serverless-datawarehouse.datawarehouse.inputstream.html"},{"doc":"__tests__","title":"__tests__","hpath":"aws-ts-serverless-datawarehouse.__tests__","content":"## Imported Assets\n\n- [serverless.integration.test.ts](/assets/serverless-integration.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-serverless-datawarehouse.__tests__.html","relUrl":"notes/aws-ts-serverless-datawarehouse.__tests__.html"},{"doc":"Aws Ts Scheduled Function","title":"Aws Ts Scheduled Function","hpath":"aws-ts-scheduled-function","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Scheduled Function on AWS\n\nA simple function in AWS that executes based on a schedule using CloudWatch.\n\nIn this example, an S3 Bucket will be created. A function will run every Friday at 11:00pm UTC\nthat will delete all of the objects it contains.\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-1\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'dev'\n   ...\n\n   Updating (dev):\n\n       Type                                          Name                           Status\n   +   pulumi:pulumi:Stack                           aws-ts-scheduled-function-dev  created\n   +   ├─ aws:cloudwatch:EventRuleEventSubscription  emptyTrash                     created\n   +   │  ├─ aws:cloudwatch:EventRule                emptyTrash                     created\n   +   │  ├─ aws:iam:Role                            emptyTrash                     created\n   +   │  ├─ aws:iam:RolePolicyAttachment            emptyTrash-32be53a2            created\n   +   │  ├─ aws:lambda:Function                     emptyTrash                     created\n   +   │  ├─ aws:cloudwatch:EventTarget              emptyTrash                     created\n   +   │  └─ aws:lambda:Permission                   emptyTrash                     created\n   +   └─ aws:s3:Bucket                              trash                          created\n\n   Outputs:\n       bucketName: \"trash-28693b6\"\n\n   Resources:\n       + 9 created\n\n   Duration: 16s\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-scheduled-function.html","relUrl":"notes/aws-ts-scheduled-function.html"},{"doc":"Aws Ts S3 Lambda Copyzip","title":"Aws Ts S3 Lambda Copyzip","hpath":"aws-ts-s3-lambda-copyzip","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless App to Copy and Zip Objects Between Amazon S3 Buckets\n\nThis example sets up two AWS S3 Buckets and a single Lambda that listens to one and, upon each new\nobject arriving in it, zips it up and copies it to the second bucket. Its architecture looks like this:\n\n![Architecture](./arch.png)\n\nThis example is also featured in the blog post [Easy Serverless Apps and Infrastructure --\nReal Events, Real Code](https://www.pulumi.com/blog/easy-serverless-apps-and-infrastructure-real-events-real-code/).\n\n## Deploying the App\n\nTo deploy your new serverless application, follow the below steps.\n\n### Prerequisites\n\n0. [Ensure you have Node.js](https://nodejs.org/en/download/)\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n0. Install Node.js dependencies, either using NPM or Yarn:\n\n   ```bash\n   $ npm install\n   ```\n\n1. Create a new Pulumi stack, which is an isolated environment for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n   This will ask you to give your stack a name; `dev` is a fine name to begin with.\n\n2. Configure the AWS region for this program -- any valid AWS region will do:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1\n   ```\n\n3. Deploy the application:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After about 20 seconds, your buckets and lambda will have been deployed. Their names are printed:\n\n   ```bash\n   Outputs:\n       tpsReportsBucket: \"tpsreports-21b7b7a\"\n       tpsZipsBucket   : \"tpszips-c869600\"\n   ```\n\n5. Now copy a file to the `tpsReportsBucket` using the AWS CLI:\n\n   ```bash\n   $ aws s3 cp ./myTpsReport001.txt s3://$(pulumi stack output tpsReportsBucket)\n   ```\n\n6. Tail the logs to see evidence the Lambda ran:\n\n   ```bash\n   $ pulumi logs -f\n   Collecting logs for stack dev since 2019-03-10T10:09:56.000-07:00...\n   2019-03-10T11:10:48.617-07:00[zipTpsReports] Zipping\n       tpsreports-96458ef/tps001.txt into tpszips-edfde11/tps001.txt.zip\n   ```\n\n7. ^C out of `pulumi logs -f`, and then download your new zipfile!\n\n   ```bash\n   $ aws s3 cp s3://$(pulumi stack output tpsZipsBucket)/myTpsReport001.txt.zip .\n   ```\n\n8. Once you're done, destroy your stack and remove it -- eliminating all traces of running:\n\n   ```bash\n   # First, delete files so we can destroy the buckets (by default, bucket content isn't auto-deleted):\n   $ aws s3 rm s3://$(pulumi stack output tpsReportsBucket)/myTpsReport001.txt\n   $ aws s3 rm s3://$(pulumi stack output tpsZipsBucket)/myTpsReport001.txt.zip\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [arch.png](/assets/arch.png)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-s3-lambda-copyzip.html","relUrl":"notes/aws-ts-s3-lambda-copyzip.html"},{"doc":"Aws Ts Ruby on Rails","title":"Aws Ts Ruby on Rails","hpath":"aws-ts-ruby-on-rails","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Ruby on Rails Server Using Amazon EC2\n\nThis is a conversion of the AWS CloudFormation Application Framework template for a basic Ruby on Rails server.\nIt creates a single EC2 virtual machine instance and uses a local MySQL database for storage. Sourced from\n<https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-appframeworks-us-west-2.html>.\n\n## Deploying the App\n\nTo deploy your Ruby on Rails application, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1\n   $ pulumi config set dbUser [your-mysql-user-here]\n   $ pulumi config set dbPassword [your-mysql-password-here] --secret\n   $ pulumi config set dbRootPassword [your-mysql-root-password-here] --secret\n   ```\n\n3. Stand up the VM, which will also install and configure Ruby on Rails and MySQL:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After several minutes, your VM will be ready, and two stack outputs are printed:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n   OUTPUT          VALUE\n   vmIP            53.40.227.82\n   websiteURL      http://ec2-53-40-227-82.us-west-2.compute.amazonaws.com/notes\n   ```\n\n5. Visit your new website by entering the websiteURL into your browser, or running:\n\n   ```bash\n   $ curl $(pulumi stack output websiteURL)\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your VM.\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [config.ts](/assets/config.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-ruby-on-rails.html","relUrl":"notes/aws-ts-ruby-on-rails.html"},{"doc":"Files","title":"Files","hpath":"aws-ts-ruby-on-rails.files","content":"## Imported Assets\n\n- [database.yml](/assets/database.yml)\n- [install_application](/assets/install_application)\n- [install_ruby](/assets/install_ruby)\n- [setup.mysql](/assets/setup.mysql)\n- [start_application](/assets/start_application)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-ruby-on-rails.files.html","relUrl":"notes/aws-ts-ruby-on-rails.files.html"},{"doc":"Aws Ts Resources","title":"Aws Ts Resources","hpath":"aws-ts-resources","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Resources\n\nA Pulumi program that demonstrates creating various AWS resources.\n\n```bash\n# Create and configure a new stack\n$ pulumi stack init aws-resources-dev\n$ pulumi config set aws:region us-east-2\n\n# Install dependencies\n$ npm install\n\n# Preview and run the deployment\n$ pulumi up\n\n# Remove the app\n$ pulumi destroy\n$ pulumi stack rm\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-resources.html","relUrl":"notes/aws-ts-resources.html"},{"doc":"Aws Ts Pulumi Webhooks","title":"Aws Ts Pulumi Webhooks","hpath":"aws-ts-pulumi-webhooks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Pulumi Webhook Handler\n\nThis example creates a Pulumi `cloud.HttpEndpoint` that will receive webhook events delivered\nby the Pulumi Service. It then echos the event to Slack.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n   - [Create an Organization](https://www.pulumi.com/docs/intro/console/accounts-and-organizations/organizations/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n## Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Install prerequisites:\n\n   ```bash\n   npm install\n   ```\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   pulumi stack init\n   ```\n\n3. Create a [Slack App](https://api.slack.com/apps):\n\n   - Give your app the [`incoming-webhook`](https://api.slack.com/scopes/incoming-webhook) scope.\n\n   - Add your Slack app to the Slack channel in which you want to post webhook events.\n\n4. Set the region for this program:\n\n   ```bash\n   pulumi config set aws:region <your-region>\n   ```\n\n5. Set the Slack webhook for your app. You can find yours by going to `Features -> Incoming Webhooks` from your Slack app's API page.\n\n   ```bash\n   pulumi config set slackWebhook --secret <webhook-url>\n   ```\n\n6. Set the Slack channel for your app. This should be the same channel in which you added your Slack app. For example, `#pulumi-events`.\n\n   ```bash\n   pulumi config set slackChannel <your-channel>\n   ```\n\n7. (Optional) Set the shared secret for your app. Webhook deliveries can optionally be signed with a shared secret token. The shared secret is given to Pulumi, and will be used to verify the contents of the message. You can find yours by going to `Settings -> Basic Information -> Signing Secret` from your Slack app's API page.\n\n   ```bash\n   pulumi config set sharedSecret --secret <your-secret>\n   ```\n\n8. Execute the Pulumi program:\n\n   ```bash\n   pulumi up\n   ```\n\n9. Retrieve our new URL:\n\n   ```bash\n   pulumi stack output url\n   ```\n\n10. Create a [Pulumi webhook](https://www.pulumi.com/docs/intro/console/extensions/webhooks/). Use the output from the previous step as the `Payload URL`.\n\n11. Ping our webhook by clicking `Ping` under `Deliveries` from your webhook's page. You should see the message `Just a friendly ping from Pulumi` in your Slack channel.\n\n12. From there, feel free to experiment. Simply making edits and running `pulumi up` will update your program.\n\n13. Afterwards, destroy your stack and remove it:\n\n    ```bash\n    pulumi destroy --yes\n    pulumi stack rm --yes\n    ```\n\n## Troubleshooting\n\n### Message Delivery\n\nIf you aren't seeing webhook deliveries in Slack, there are several places to look for more information.\n\n- The Pulumi Service. If you go to the webhook's page within the Pulumi Service, you can navigate to\n  recent webhook deliveries. If the Pulumi Service has any trouble contacting your webhook handler,\n  you will see the error there.\n- The Pulumi Stack's logs. If the webhooks are being delivered, but aren't showing up in Slack for some\n  reason, you can view the webhook handler's runtime logs by running the `pulumi logs` command.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [util.ts](/assets/util.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-pulumi-webhooks.html","relUrl":"notes/aws-ts-pulumi-webhooks.html"},{"doc":"Aws Ts Pulumi Miniflux","title":"Aws Ts Pulumi Miniflux","hpath":"aws-ts-pulumi-miniflux","content":"# Run an RSS Service with Miniflux\n\n[Miniflux](https://miniflux.app/) is an open-source RSS service written in Go and backed by PostgreSQL. This example demonstrates how to stand up a Miniflux service using AWS Fargate and RDS.\n\n[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/).\n2. [Install Node.js](https://www.pulumi.com/docs/intro/languages/javascript/).\n3. Configure your [AWS credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/).\n\n### Deploying the App\n\n1. Clone this repo, change to this directory, then create a new [stack](https://www.pulumi.com/docs/intro/concepts/stack/) for the project:\n\n   ```bash\n   pulumi stack init\n   ```\n\n2. Apply the required configuration properties, making adjustments as you like, and taking care to choose strong passwords for the database user and service administrator (which will be stored as encrypted [Pulumi secrets](https://www.pulumi.com/docs/intro/concepts/config/):\n\n   ```bash\n   pulumi config set aws:region us-west-2\n   pulumi config set db_name miniflux\n   pulumi config set db_username miniflux\n   pulumi config set db_password <YOUR_PASSWORD> --secret\n   pulumi config set admin_username admin\n   pulumi config set admin_password <YOUR_PASSWORD> --secret\n   ```\n\n3. With your configuration values applied, stand up the service:\n\n   ```bash\n   pulumi up\n   ```\n\n4. In a few minutes, your service will be up and running, with the service URL printed as a Pulumi [stack output](https://www.pulumi.com/docs/intro/concepts/stack/#outputs).\n\n   ```bash\n   ...\n   Outputs:\n       url: \"http://lb-f90d03f-5c638bd4535d4c6a.elb.us-west-2.amazonaws.com:8080\"\n   ```\n\n   Sign in using the administrative user and password you configured above, and start RSSing!\n\n5. When you're ready, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-pulumi-miniflux.html","relUrl":"notes/aws-ts-pulumi-miniflux.html"},{"doc":"Aws Ts Netlify Cms and Oauth","title":"Aws Ts Netlify Cms and Oauth","hpath":"aws-ts-netlify-cms-and-oauth","content":"\n","url":"https://pulumi.dendron.so/notes/c2ff66dd-b756-4729-a0e9-0ad284da7c4b.html","relUrl":"notes/c2ff66dd-b756-4729-a0e9-0ad284da7c4b.html"},{"doc":"Cms","title":"Cms","hpath":"aws-ts-netlify-cms-and-oauth.cms","content":"## Background Knowledges\n\nCMS stands for content management system, which facilitate creation and modification of digital content.\n\n[Netlify CMS](https://www.netlifycms.org/docs/intro/) is an [open-source](https://github.com/netlify/netlify-cms) example implements this concept.  It works closely with static site generators and provides user interface for non-technical editors of webisite to edit the website content and submit the change to various types of storaging service including Github.\n\nBackends allows Netlify CMS to communicate with a service that stores content. Backends that Netlify CMS provides includes Git Gateway (Connect with Netlify), Github, GitLab, and Bitbucket.\n\n# About CMS Project\n\nThis project is an CMS React App that using Netlify CMS as CMS provider and Github as backend. Orginally it provides a user interface for non-technical employees from Pulumi to edit [Pulumi's website](https://github.com/pulumi/docs) (powered by [Hugo static site generator](https://gohugo.io)). \nIt is a good example for how to deploy Netlify CMS as a stand-alone React web application that is reading and make changes to another organization repository and deployed on AWS instead of Netlify.\nSpecial thanks to the template provided by [@talves](https://github.com/ADARTA/netlify-cms-react-example) for converting the CMS to be a stand-alone React app that is not placed inside the target repository.\n\n## File Path\n\n- .github/workflow\n  - The implementation of Github Actions workflow\n- cms/infrastructure\n  - The infrastructure of deploying cms app on AWS using Pulumi.\n  - index.ts contain the code for the Pulumi program\n- cms/public\n  - config.yml is the Netlify CMS's configuration file\n  - favicon.ico the icon for CMS app website\n  - index.html the html for the web app to check\n- cms/Readme-Screenshots\n  - The screen shots for this README file\n- cms/src\n  - React content for this web app\n\n## Infrastructure\n\nThe infrastructure folder contain Pulumi code of deploying this CMS app onto the AWS S3, speeding up using AWS CloudFront, and certificate creation using AWS Certificate Manager. The general idea is deploy the CMS application as a static website onto the AWS. We already have a [Pulumi's static website creation example](https://github.com/pulumi/examples/tree/master/aws-ts-static-website) with explanation provided.\n\nThe infrastructure requires three stack configuration properties: `pathToWebsiteContents`, `targetDomain`, `certificateArn`.\n\n- pathToWebsiteContents\n  - The path to the builded content of this React Website app.\n  - Run a yarn build will create a build folder which contains the builded file and we should pass the directory of the build folder to this variable.\n  - Passing build folder instead of the whole folder is to put a worked version onto AWS S3 bucket for CloudFront to look for\n- targetDomain\n  - a target domain name that you wish to put into.\n  - we used a subdomain of a parent domain and the parent domain have to be alive on your AWS account's Route 53 console it would automatically create the subdomain for you\n  - this is also the site_domain you should put inside the cms/public/config.yml for Netlify CMS to read\n- certificateArn\n  - This is optional.\n  - If you have already had a certificate inside the AWS's Certificate Manager for this CMS app, then put it's arn as the value for this variable\n\n### Assume Role (Optional)\n\nIt is recommended that you use an IAM role with more permissions in the _target_ AWS using a token for an IAM user in the _source_ account. To do this, you could refer to the [aws-ts-assume-role example](https://github.com/pulumi/examples/tree/master/aws-ts-assume-role) for more information. The example is available in multiple languages in our [examples repostiory](https://github.com/pulumi/examples).\n\n## Substitution for Netlify Identity Service: OAuth Server\n\nSince we are deploying the CMS app on AWS instead of Netlify we need to provide our own server to do the OAuth [authorization code grant flow](https://oauth.net/2/grant-types/authorization-code/). So we also deployed an OAuth Server. Here's the official Netlify documentation on using [external OAuth clients](https://www.netlifycms.org/docs/external-oauth-clients/). In short, the OAuth server fetches the access token from GitHub API to use the CMS. The code for the OAuth Server is inside the `./cms-oauth` folder in the root directory of this example.\n\nAfter deploying the cms-oauth web app, we should also put the domain of the oauth-server we build in the cms/public/config.yml's base_url configuration\n\n## Code Path\n\n1. Since the CMS is implemented as a React app, the entry point is in **public/index.html** which includes multiple scripts and the div with id `root` for rendering the CMS component inside it.\n\n2. App.js then create NetlifyCMS component instance from **src/components/NetlifyCMS** folder.\n\n3. **src/components/NetlifyCMS/index.js** specify the behavior for NetlifyCMS and we could register CMS custom templates, custom widget there. \n\n4. `CMS.init()` will initialize CMS using **public/config.yml** which is the core of this app, which contains collection, backend settings, and other settings.\n\n## Development Details\n\nNow Github workflow was implemented. Directly push to master branch would automatically deploy cms.\nOpen a new branch and commit to the new branch would only do a pulumi preview until merge, which you could see from the Github Actions. For testing:\n\n### Local Development\n\n1. Specify the `repo`, `site_domain` and `base_url` in the `cms/public/config.yml`'s backend block.\n   ![First Step: change cms config](Readme-Screenshots/cms-config-setings.jpg)\n     `repo` is the target repo you would like CMS to view and make edits on\n     `site_domain` is the domain name for the CMS web application\n     `base_url` is the domain name for the OAuth server (deployed from the `cms-oauth` folder)\n\n2. To run the CMS app locally, run:\n\n```bash\nyarn start\n```\n\nIt would automatically update if you made another change to `config.yml`\n\n### \n\n1. Build the App\n\n```bash\nyarn build\n```\n\nThis would build the App and create a build folder under root directory. \n\n2. Go to infrastructure folder config the Pulumi stack\n\n```bash\n$ cd infrastructure\n$ pulumi stack init website-cms\n$ pulumi config set aws:region us-east-1\n$ pulumi config set website-cms:pathToWebsiteContents ../build\n$ pulumi config set website-cms:targetDomain https://some-cms-domain.com\n# the targetDomain have to match what you put for site_domain inside the config file ./cms/public/config.yml\n```\n\n- path to website contents would specify the folder generated by `yarn build` and upload that folder to S3\n\n- target domain is the domain for the app\n\n4. Run pulumi up\n\n```bash\n$ pulumi up\n```\n\n## CMS UI Introduction\n\n> Before you can login into the CMS app, you must complete the steps in the OAuth server to either run it locally or deploy it to the cloud.\n\n1. Open up a server with working example with\n\n   ```bash\n   $ yarn start\n   ```\n\n   it will automatically updated the page with any changes.\n\n2. Login using Github account.\n\n   ![login page](Readme-Screenshots/login.jpg)\n\n3. Click on any page you want to edit at collections page or add new page using the \"New Webinar/Event Page\" button\n\n   ![collection page](Readme-Screenshots/collection_page.jpg)\n\n   Fill in in specified field at the entry page\n\n   ![entry page](Readme-Screenshots/entery_page.jpg)\n\n4. Click **Save** button at the top of the editing page would \n\n- Create a new branch in your target repo\n- Open a pull request \n- Make initial commit to the branch\n- Adds tag to the PR that indicates that it is a \"draft\"\n- Adds a card in the drafts column on the editorial workflow page (more on the workflow UI below)\n\n5. Click the Back button to go back to the collections page and clicking the **Workflow** button would bring out the editorial workflow\n\n   ![workflow button](Readme-Screenshots/Workflow_button.jpg)\n\n   ![Editorial Workflow](Readme-Screenshots/Editorial_Workflow.jpg)\n\n6. Moving a card from the \"Drafts\" column to the \"In Review\" column will remove the \"draft\" tag and apply an \"in-review\" tag on the PR\n\n7. Similarly, moving a card from \"In Review\" to \"Ready\" columns would change the PR tag to \"ready\"\n\n8. Hover on the card in \"Ready\" column would show **Publish change** button, which would merge the PR.\n\n* * *\n\n## Imported Assets\n\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.html"},{"doc":"Src","title":"Src","hpath":"aws-ts-netlify-cms-and-oauth.cms.src","content":"## Imported Assets\n\n- [App.js](/assets/app.js)\n- [App.test.js](/assets/app.js)\n- [index.css](/assets/index.css)\n- [index.js](/assets/index.js)\n- [logo.svg](/assets/logo.svg)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.src.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.src.html"},{"doc":"Components","title":"Components","hpath":"aws-ts-netlify-cms-and-oauth.cms.src.components","content":"\n","url":"https://pulumi.dendron.so/notes/0a4e205a-0d6c-43f5-bac5-2e20b4b90503.html","relUrl":"notes/0a4e205a-0d6c-43f5-bac5-2e20b4b90503.html"},{"doc":"Netlifycms","title":"Netlifycms","hpath":"aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms","content":"## Imported Assets\n\n- [index.js](/assets/index.js)\n- [setup.js](/assets/setup.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms.html"},{"doc":"Components","title":"Components","hpath":"aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms.components","content":"## Imported Assets\n\n- [previewStyles.js](/assets/previewstyles.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms.components.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.src.components.netlifycms.components.html"},{"doc":"Readme Screenshots","title":"Readme Screenshots","hpath":"aws-ts-netlify-cms-and-oauth.cms.readme-screenshots","content":"## Imported Assets\n\n- [Editorial_Workflow.jpg](/assets/editorial_workflow.jpg)\n- [Workflow_button.jpg](/assets/workflow_button.jpg)\n- [cms-config-setings.jpg](/assets/cms-config-setings.jpg)\n- [collection_page.jpg](/assets/collection_page.jpg)\n- [entery_page.jpg](/assets/entery_page.jpg)\n- [login.jpg](/assets/login.jpg)\n- [publish_change.jpg](/assets/publish_change.jpg)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.readme-screenshots.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.readme-screenshots.html"},{"doc":"Public","title":"Public","hpath":"aws-ts-netlify-cms-and-oauth.cms.public","content":"## Imported Assets\n\n- [config.yml](/assets/config.yml)\n- [favicon.ico](/assets/favicon.ico)\n- [index.html](/assets/index.html)\n- [manifest.json](/assets/manifest.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.public.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.public.html"},{"doc":"Infrastructure","title":"Infrastructure","hpath":"aws-ts-netlify-cms-and-oauth.cms.infrastructure","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms.infrastructure.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms.infrastructure.html"},{"doc":"Cms Oauth","title":"Cms Oauth","hpath":"aws-ts-netlify-cms-and-oauth.cms-oauth","content":"# About the Project\n\nThis OAuth Server Project is connected with CMS project which deploy on AWS S3 rather than on Netlify. In this way, it requires us to create a OAuth Client Server for Netlify CMS. Netlify use the Netlify Identity Service which provides OAuth provider server. Based on [Netlify's instruction](https://www.netlifycms.org/docs/external-oauth-clients/) of customize this step we need to provide our own OAuth client.\n\nIn this example, we are using [Netlify CMS's Github backends](https://www.netlifycms.org/docs/github-backend/) for CMS, but the OAuth Provider code enabled more types of backends Bitbucket and Gitlab. If you are using these [backends](https://www.netlifycms.org/docs/backends-overview/), simply update the callback url you are register Github OAuth Applicationc (See step 1 in the Getting Started section) to be https&#x3A;//{{the domain of your OAuth App}}/bitbucket/callback or https&#x3A;//{{the domain of your OAuth App}}/gitlab/callback\n\n## References\n\nThe provider's content code is referencing to the [External OAuth Client example from Netlify CMS](https://www.netlifycms.org/docs/external-oauth-clients/). \nHere are some reference:\n\n- @igk1972 [OAuth provider](https://github.com/igk1972/netlify-cms-oauth-provider-go) Thanks to Igor Kuznetsov for writing go code for OAuth Provider and it's frontend in file main.go. We updated the code in these ways:\n  - Now we have set the [Github scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) (which variable specify what kind of access we want) to be public_repo (only permits read and write on the public repo). See line 132 of main.go for setting different scope.\n  - We also changed line 34 which fail to do JSON.stringify() the provided result\n  - We deleted \"https&#x3A;//\" when it is trying to concate with \"/auth\" because the environment variable HOST already contain \"https&#x3A;//\"\n  - We change line 158 the port that OAuth Server is listen to. Now the http is listen and serve for the port of the target group we set as Pulumi stack configuration and environment variable. The default value for the target group is 80 which is port for the local development. You could change the default port by specify the optional Pulumi config targetGroup Port.\n- pulumi's [hello fargate example](https://github.com/pulumi/examples/tree/master/aws-ts-hello-fargate) for connecting to AWS Fargate to adopt Docker setting in cloud\n- pulumi's [static website example](https://github.com/pulumi/examples/tree/master/aws-ts-static-website) for configuring certificate and obtain a subdomain for the provider server\n\n## File Structure\n\n- ./infrastructure\n  - Pulumi code with setting up AWS Fargate and the configuring certificate and domain\n- ./main.go the code for the provider itself and it's front end\n  - It is fetching the access token sent from Github API using Github's goth library. \n- .github/workflow contain code for the workflow\n\n## Infrastructure\n\nThe OAuth Client Server was deployed on AWS using Pulumi. The Pulumi code use AWS Certificate Manager to create certificate and validate it. It is using AWS ECS Fargate to read docker image and establish a Fargate Service. Then it is also creating Alias Record on Route53 for the OAuth Server.\n\n### Assume Role (Optional)\n\nIt is recommended that you use an IAM role with more permissions in the _target_ AWS using a token for an IAM user in the _source_ account. To do this, you could refer to the [aws-ts-assume-role example](https://github.com/pulumi/examples/tree/master/aws-ts-assume-role) for more information. The example is available in multiple languages in our [examples repostiory](https://github.com/pulumi/examples).\n\n# Getting Start (Replace content in {{}} with correct informations)\n\nThese steps are now automated using the Github Workflow. If you push to the master or merge a pull request, the OAuth Client Server would be automatically deployed. Open a new branch and push to the branch would only do a pulumi preview where the logs could be check on Github Actions.  \n\n### Step 1. Register OAuth Application in Github and Obtain Key and Secret\n\n- Now it is using the OAuth Application in Pulumi's Github organization account\n- Steps are provided using this link <https://docs.netlify.com/visitor-access/oauth-provider-tokens/#setup-and-settings>\n- For the Home Page Url should be link to cms's website\n- For the Authorization callback URL enter https&#x3A;//{{the domain of your OAuth App}}/github/callback\n\n### Step 2. Fill in the pulumi configuration\n\n1. Make sure you are on the root directory of this repo.\n\n2. Get into the infrastructure folder and initialize a new stack\n\n```bash\n$ cd infrastructure\n$ pulumi stack init {{oauth-provider}} # any name you want for your pulumi stack\n```\n\n3. Set AWS Region\n\n```bash\n$ pulumi config set aws:region us-east-1\n```\n\n- It has to be set as us-east-1 because ACM certificate must be in the us-east-1 region.\n\n4. Set Target Domain of OAuth Provider\n\n```bash\n$ pulumi config set netlify-cms-oauth-provider-infrastructure:targetDomain {{\"domain name of your oauth provider\"}}\n```\n\n5. Set the Github Key and Secret (only do this if you want a personal test, the Github Key and Secret is now provided by the OAuth application in pulumi Github account)\n\n- change the {YOUR_GITHUB_KEY} and {YOUR_GITHUB_SECRET} with the key and secret obtain from Step 1.\n\n```bash\n$ pulumi config set netlify-cms-oauth-provider-infrastructure:githubKey {{YOUR_GITHUB_KEY}}\n$ pulumi config set --secret netlify-cms-oauth-provider-infrastructure:githubSecret\n$ {{YOUR_GITHUB_SECRET}}\n```\n\n- `--secret` tag is used to hash the secret so on the stack configuration yaml file it won't be shown\n- Don't directly append the secret to the command like this `$ pulumi config set --secret netlify-cms-oauth-provider-infrastructure:githubKey {{YOUR_GITHUB_SECRET}}`\n  because it might cause the secret be stored inside the command memory\n  - Only specify the key without name and hit ENTER key, then you are able to type secret on next line(won't actually show the value)\n- To make sure if key and secret is right do\n\n```bash\n$ pulumi config get netlify-cms-oauth-provider-infrastructure:githubKey\n$ pulumi config get netlify-cms-oauth-provider-infrastructure:githubSecret\n```\n\n### Step 3. Running Infrastructure\n\n```bash\n$ pulumi up\n```\n\n### Step 4. Config CMS\n\nYou also need to add `base_url` to the backend section of your netlify-cms's config file. \n\nGo to the cms repo which stores resource for CMS and on file public/config.yml add the base_url line with the oauth provider url\n\n```\nbackend:\n  name: github\n  repo: user/repo   # Path to your Github repository\n  branch: master    # Branch to update\n  base_url: https://xxx # Path to ext auth provider\n```\n\nThen build use \n\n```bash\n$ yarn build\n```\n\nand go to the infrastructure folder and do pulumi up to update changes\n\n* * *\n\n## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Makefile](/assets/makefile)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms-oauth.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms-oauth.html"},{"doc":"Infrastructure","title":"Infrastructure","hpath":"aws-ts-netlify-cms-and-oauth.cms-oauth.infrastructure","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-netlify-cms-and-oauth.cms-oauth.infrastructure.html","relUrl":"notes/aws-ts-netlify-cms-and-oauth.cms-oauth.infrastructure.html"},{"doc":"Aws Ts Lambda Thumbnailer","title":"Aws Ts Lambda Thumbnailer","hpath":"aws-ts-lambda-thumbnailer","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Video Thumbnailer Using AWS Lambda\n\nA video thumbnail extractor using serverless functions. The video processing function is packaged as a Docker container.\n\nNavigate to [Running Container Images in AWS Lambda](https://www.pulumi.com/blog/aws-lambda-container-support/) for a full walkthrough.\n\n## Prerequisites\n\nTo run this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\n1. Create a new stack:\n\n   ```\n   pulumi stack init dev\n   ```\n\n2. Configure Pulumi to use an AWS region of your choice, for example:\n\n   ```\n   pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and deploy the app via `pulumi up`. The preview will take some time, as it builds a Docker container. A total of 16 resources are created.\n\n   ```\n   $ pulumi up\n   Previewing update (dev)\n\n   ...\n\n   Do you want to perform this update? yes\n   Updating (dev)\n\n        Type                                  Name                          Status      \n   +   pulumi:pulumi:Stack                   video-thumbnailer-lambda-dev  created     \n   +   ├─ awsx:ecr:Repository                sampleapp                     created     \n   +   │  ├─ aws:ecr:Repository              sampleapp                     created     \n   +   │  └─ aws:ecr:LifecyclePolicy         sampleapp                     created     \n   +   ├─ aws:s3:Bucket                      bucket                        created     \n   +   │  ├─ aws:s3:BucketEventSubscription  onNewThumbnail                created     \n   +   │  │  └─ aws:lambda:Permission        onNewThumbnail                created     \n   +   │  ├─ aws:s3:BucketEventSubscription  onNewVideo                    created     \n   +   │  │  └─ aws:lambda:Permission        onNewVideo                    created     \n   +   │  └─ aws:s3:BucketNotification       onNewVideo                    created     \n   +   ├─ aws:iam:Role                       onNewThumbnail                created     \n   +   ├─ aws:iam:Role                       thumbnailerRole               created     \n   +   ├─ aws:lambda:Function                onNewThumbnail                created     \n   +   ├─ aws:iam:RolePolicyAttachment       onNewThumbnail-32be53a2       created     \n   +   ├─ aws:iam:RolePolicyAttachment       lambdaFullAccess              created     \n   +   └─ aws:lambda:Function                thumbnailer                   created     \n\n   Outputs:\n       bucketName: \"bucket-7c6b55a\"\n\n   Resources:\n       + 16 created\n\n   Duration: 1m41s\n   ```\n\n5. View the stack outputs:\n\n   ```\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT                                           VALUE\n       bucketName                                       bucket-7c6b55a\n   ```\n\n6. Upload a video, embedding the timestamp in the filename:\n\n   ```\n   $ aws s3 cp ./sample/cat.mp4 s3://$(pulumi stack output bucketName)/cat_00-01.mp4\n   upload: sample/cat.mp4 to s3://***/cat_00-01.mp4\n   ```\n\n7. View the logs from both Lambda functions:\n\n   ````\n   $ pulumi logs -f\n   Collecting logs for stack dev since 2020-12-02T08:58:43.000+01:00.\n\n   2020-12-02T09:58:39.747+01:00[           thumbnailer-dbb2a35] START RequestId: 3ec2886e-e739-4764-be3b-a8e5a48a4986 Version: $LATEST\n   2020-12-02T09:58:39.750+01:00[           thumbnailer-dbb2a35] 2020-12-02T08:58:39.748Z\t3ec2886e-e739-4764-be3b-a8e5a48a4986\tINFO\tVideo handler called\n   2020-12-02T09:58:39.750+01:00[           thumbnailer-dbb2a35] 2020-12-02T08:58:39.750Z\t3ec2886e-e739-4764-be3b-a8e5a48a4986\tINFO\taws s3 cp s3://bucket-33b87c2/cat_00-01.mp4 /tmp/cat_00-01.mp4\n   download: s3://bucket-33b87c2/cat_00-01.mp4 to ../../tmp/cat_00-01.mp4ed 256.0 KiB/666.5 KiB (1.2 MiB/s) with 1 file(s) remaining\n   2020-12-02T09:58:53.068+01:00[           thumbnailer-dbb2a35] 2020-12-02T08:58:53.068Z\t3ec2886e-e739-4764-be3b-a8e5a48a4986\tINFO\tffmpeg -v error -i /tmp/cat_00-01.mp4 -ss 00:01 -vframes 1 -f image2 -an -y /tmp/cat.jpg\n   2020-12-02T09:59:01.701+01:00[           thumbnailer-dbb2a35] 2020-12-02T08:59:01.701Z\t3ec2886e-e739-4764-be3b-a8e5a48a4986\tINFO\taws s3 cp /tmp/cat.jpg s3://bucket-33b87c2/cat.jpg\n   upload: ../../tmp/cat.jpg to s3://bucket-33b87c2/cat.jpg          pleted 86.6 KiB/86.6 KiB (315.8 KiB/s) with 1 file(s) remaining\n   2020-12-02T09:59:11.628+01:00[           thumbnailer-dbb2a35] 2020-12-02T08:59:11.627Z\t3ec2886e-e739-4764-be3b-a8e5a48a4986\tINFO\t*** New thumbnail: file cat_00-01.mp4 was saved at 2020-12-02T08:58:33.845Z.\n   2020-12-02T09:59:11.668+01:00[           thumbnailer-dbb2a35] END RequestId: 3ec2886e-e739-4764-be3b-a8e5a48a4986\n   2020-12-02T09:59:11.668+01:00[           thumbnailer-dbb2a35] REPORT RequestId: 3ec2886e-e739-4764-be3b-a8e5a48a4986\tDuration: 31920.84 ms\tBilled Duration: 32733 ms\tMemory Size: 128 MB\tMax Memory Used: 128 MB\tInit Duration: 811.55 ms\t\n   2020-12-02T09:59:11.777+01:00[        onNewThumbnail-2f969e0] START RequestId: 07c13039-eccb-4e38-a3cf-c7fa11982b84 Version: $LATEST\n   2020-12-02T09:59:11.788+01:00[        onNewThumbnail-2f969e0] 2020-12-02T08:59:11.782Z\t07c13039-eccb-4e38-a3cf-c7fa11982b84\tINFO\tonNewThumbnail called\n   2020-12-02T09:59:11.788+01:00[        onNewThumbnail-2f969e0] 2020-12-02T08:59:11.788Z\t07c13039-eccb-4e38-a3cf-c7fa11982b84\tINFO\t*** New thumbnail: file cat.jpg was saved at 2020-12-02T08:59:06.333Z.\n   2020-12-02T09:59:11.809+01:00[        onNewThumbnail-2f969e0] END RequestId: 07c13039-eccb-4e38-a3cf-c7fa11982b84\n   2020-12-02T09:59:11.809+01:00[        onNewThumbnail-2f969e0] REPORT RequestId: 07c13039-eccb-4e38-a3cf-c7fa11982b84\tDuration: 31.96 ms\tBilled Duration: 32 ms\tMemory Size: 128 MB\tMax Memory Used: 65 MB\tInit Duration: 171.22 ms\n       ```\n\n   ````\n\n8. Download the key frame:\n\n   ```\n   $ aws s3 cp s3://$(pulumi stack output bucketName)/cat.jpg .\n   download: s3://***/cat.jpg to ./cat.jpg\n   ```\n\n## Clean up\n\nTo clean up the resources, you will first need to clear the contents of the bucket.\n\n```bash\naws s3 rm s3://$(pulumi stack output bucketName) --recursive\n```\n\nThen, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-lambda-thumbnailer.html","relUrl":"notes/aws-ts-lambda-thumbnailer.html"},{"doc":"Sample","title":"Sample","hpath":"aws-ts-lambda-thumbnailer.sample","content":"## Imported Assets\n\n- [cat.mp4](/assets/cat.mp4)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-lambda-thumbnailer.sample.html","relUrl":"notes/aws-ts-lambda-thumbnailer.sample.html"},{"doc":"Docker Ffmpeg Thumb","title":"Docker Ffmpeg Thumb","hpath":"aws-ts-lambda-thumbnailer.docker-ffmpeg-thumb","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-lambda-thumbnailer.docker-ffmpeg-thumb.html","relUrl":"notes/aws-ts-lambda-thumbnailer.docker-ffmpeg-thumb.html"},{"doc":"Aws Ts Lambda Efs","title":"Aws Ts Lambda Efs","hpath":"aws-ts-lambda-efs","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Using Amazon EFS with AWS Lambda\n\nThis example shows how to use Amazon EFS with AWS Lambda in Pulumi. See the [Using AWS Lambda with Amazon Elastic File System (EFS)](https://www.pulumi.com/blog/aws-lambda-efs) blog post for a detailed walkthrough of this example.\n\n![Architecture Diagram](./lambdaefs.png)\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your AWS account](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Deploy everything with a single `pulumi up` command. This will show you a preview of changes first, which\n   includes all of the required AWS resources (clusters, services, and the like). Don't worry if it's more than\n   you expected -- this is one of the benefits of Pulumi, it configures everything so that so you don't need to!\n\n   ```bash\n   $ pulumi up\n   ```\n\n    After being prompted and selecting \"yes\", your deployment will begin. It'll complete in a few minutes:\n\n   ```\n   Updating (demo):\n       Type                                          Name                      Status      \n   +   pulumi:pulumi:Stack                           aws-ts-lambda-efs-demo    created     \n   +   ├─ awsx:x:ec2:Vpc                             vpc                       created     \n   +   │  ├─ aws:ec2:Vpc                             vpc                       created     \n   +   │  ├─ awsx:x:ec2:Subnet                       vpc-public-0              created     \n   +   │  │  ├─ aws:ec2:Subnet                       vpc-public-0              created     \n   +   │  │  ├─ aws:ec2:RouteTable                   vpc-public-0              created     \n   +   │  │  ├─ aws:ec2:Route                        vpc-public-0-ig           created     \n   +   │  │  └─ aws:ec2:RouteTableAssociation        vpc-public-0              created     \n   +   │  ├─ awsx:x:ec2:Subnet                       vpc-public-1              created     \n   +   │  │  ├─ aws:ec2:RouteTable                   vpc-public-1              created     \n   +   │  │  ├─ aws:ec2:Subnet                       vpc-public-1              created     \n   +   │  │  ├─ aws:ec2:RouteTableAssociation        vpc-public-1              created     \n   +   │  │  └─ aws:ec2:Route                        vpc-public-1-ig           created     \n   +   │  ├─ awsx:x:ec2:NatGateway                   vpc-1                     created     \n   +   │  │  ├─ aws:ec2:Eip                          vpc-1                     created     \n   +   │  │  └─ aws:ec2:NatGateway                   vpc-1                     created     \n   +   │  ├─ awsx:x:ec2:Subnet                       vpc-private-0             created     \n   +   │  │  ├─ aws:ec2:RouteTable                   vpc-private-0             created     \n   +   │  │  ├─ aws:ec2:Subnet                       vpc-private-0             created     \n   +   │  │  ├─ aws:ec2:RouteTableAssociation        vpc-private-0             created     \n   +   │  │  └─ aws:ec2:Route                        vpc-private-0-nat-0       created     \n   +   │  ├─ awsx:x:ec2:InternetGateway              vpc                       created     \n   +   │  │  └─ aws:ec2:InternetGateway              vpc                       created     \n   +   │  ├─ awsx:x:ec2:Subnet                       vpc-private-1             created     \n   +   │  │  ├─ aws:ec2:RouteTable                   vpc-private-1             created     \n   +   │  │  ├─ aws:ec2:Subnet                       vpc-private-1             created     \n   +   │  │  ├─ aws:ec2:RouteTableAssociation        vpc-private-1             created     \n   +   │  │  └─ aws:ec2:Route                        vpc-private-1-nat-1       created     \n   +   │  └─ awsx:x:ec2:NatGateway                   vpc-0                     created     \n   +   │     ├─ aws:ec2:Eip                          vpc-0                     created     \n   +   │     └─ aws:ec2:NatGateway                   vpc-0                     created     \n   +   ├─ aws:apigateway:x:API                       api                       created     \n   +   │  ├─ aws:apigateway:RestApi                  api                       created     \n   +   │  ├─ aws:apigateway:Deployment               api                       created     \n   +   │  ├─ aws:lambda:Permission                   api-2c087c3e              created     \n   +   │  ├─ aws:lambda:Permission                   api-c171fd88              created     \n   +   │  ├─ aws:lambda:Permission                   api-7857d17d              created     \n   +   │  └─ aws:apigateway:Stage                    api                       created     \n   +   ├─ awsx:x:ecs:FargateService                  nginx                     created     \n   +   │  └─ aws:ecs:Service                         nginx                     created     \n   +   ├─ awsx:x:ecs:FargateTaskDefinition           nginx                     created     \n   +   │  ├─ aws:iam:Role                            nginx-execution           created     \n   +   │  ├─ aws:cloudwatch:LogGroup                 nginx                     created     \n   +   │  ├─ aws:iam:Role                            nginx-task                created     \n   +   │  ├─ aws:iam:RolePolicyAttachment            nginx-execution-9a42f520  created     \n   +   │  ├─ aws:iam:RolePolicyAttachment            nginx-task-32be53a2       created     \n   +   │  ├─ aws:iam:RolePolicyAttachment            nginx-task-fd1a00e5       created     \n   +   │  └─ aws:ecs:TaskDefinition                  nginx                     created     \n   +   ├─ awsx:x:ec2:SecurityGroup                   nginx-0                   created     \n   +   ├─ awsx:x:ecs:Cluster                         cluster                   created     \n   +   │  ├─ aws:ecs:Cluster                         cluster                   created     \n   +   │  └─ awsx:x:ec2:SecurityGroup                cluster                   created     \n   +   │     ├─ awsx:x:ec2:IngressSecurityGroupRule  cluster-containers        created     \n   +   │     │  └─ aws:ec2:SecurityGroupRule         cluster-containers        created     \n   +   │     ├─ awsx:x:ec2:EgressSecurityGroupRule   cluster-egress            created     \n   +   │     │  └─ aws:ec2:SecurityGroupRule         cluster-egress            created     \n   +   │     ├─ awsx:x:ec2:IngressSecurityGroupRule  cluster-ssh               created     \n   +   │     │  └─ aws:ec2:SecurityGroupRule         cluster-ssh               created     \n   +   │     └─ aws:ec2:SecurityGroup                cluster                   created     \n   +   ├─ aws:iam:Role                               getHandler                created     \n   +   ├─ aws:iam:Role                               execHandler               created     \n   +   ├─ aws:efs:FileSystem                         filesystem                created     \n   +   ├─ aws:iam:Role                               uploadHandler             created     \n   +   ├─ aws:iam:RolePolicyAttachment               execHandler-32be53a2      created     \n   +   ├─ aws:iam:RolePolicyAttachment               execHandler-23f1a522      created     \n   +   ├─ aws:iam:RolePolicyAttachment               getHandler-32be53a2       created     \n   +   ├─ aws:iam:RolePolicyAttachment               getHandler-23f1a522       created     \n   +   ├─ aws:iam:RolePolicyAttachment               uploadHandler-32be53a2    created     \n   +   ├─ aws:iam:RolePolicyAttachment               uploadHandler-23f1a522    created     \n   +   ├─ aws:efs:MountTarget                        fs-mount-1                created     \n   +   ├─ aws:efs:MountTarget                        fs-mount-0                created     \n   +   ├─ aws:efs:AccessPoint                        ap                        created     \n   +   ├─ aws:lambda:Function                        getHandler                created     \n   +   ├─ aws:lambda:Function                        uploadHandler             created     \n   +   └─ aws:lambda:Function                        execHandler               created     \n\n   Outputs:\n       url: \"https://280f2167f1.execute-api.us-east-1.amazonaws.com/stage/\"\n\n   Resources:\n       + 75 created\n\n   Duration: 5m52s\n   ```\n\n4. At this point, your app is running! The URL was published so it's easy to interact with:\n\n   ```bash\n   $ curl -X POST -d '<h1>Hello world</h1>' $(pulumi stack output url)files/index.html\n   $ curl -X GET $(pulumi stack output url)files/index.html\n   <h1>Hello world</h1>\n   ```\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [lambdaefs.png](/assets/lambdaefs.png)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-lambda-efs.html","relUrl":"notes/aws-ts-lambda-efs.html"},{"doc":"Aws Ts K8s Voting App","title":"Aws Ts K8s Voting App","hpath":"aws-ts-k8s-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes Voting App\n\nA simple voting app that uses Kubernetes.\n\nThe example shows how easy it is to deploy a containerized application to Amazon EKS. Pulumi does the following:\n\n- Builds the Docker images\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the images to the ECR instance\n- Provisions AWS EKS cluster\n- Uses the images to create Kubernetes deployments\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. [Install Docker](https://docs.docker.com/engine/installation/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-ts-k8s-voting-app\n   ```\n\n2. Set the AWS region and the usernames and passwords for a set of accounts the project uses:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set sqlAdminName <NAME>\n   $ pulumi config set sqlsqlAdminPassword <PASSWORD> --secret\n   $ pulumi config set sqlUserName <NAME>\n   $ pulumi config set sqlUserPassword <PASSWORD> --secret\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-ts-k8s-voting-app):\n       Type                                   Name                                          Status      \n   +   pulumi:pulumi:Stack                    voting-app-aws-ts-k8s-voting-app              created     \n   +   ├─ awsx:ecr:Repository                 server-side-service                           created     \n   +   │  ├─ aws:ecr:Repository               server-side-service                           created     \n   +   │  └─ aws:ecr:LifecyclePolicy          server-side-service                           created     \n   +   ├─ awsx:ecr:Repository                 client-side-service                           created     \n   +   │  ├─ aws:ecr:Repository               client-side-service                           created     \n   +   │  └─ aws:ecr:LifecyclePolicy          client-side-service                           created     \n   +   ├─ eks:index:Cluster                   eksCluster                                    created     \n   +   │  ├─ eks:index:ServiceRole            eksCluster-eksRole                            created     \n   +   │  │  ├─ aws:iam:Role                  eksCluster-eksRole-role                       created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-eksRole-4b490823                   created     \n   +   │  │  └─ aws:iam:RolePolicyAttachment  eksCluster-eksRole-90eb1c99                   created     \n   +   │  ├─ eks:index:ServiceRole            eksCluster-instanceRole                       created     \n   +   │  │  ├─ aws:iam:Role                  eksCluster-instanceRole-role                  created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-e1b295bd              created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-3eb088f2              created     \n   +   │  │  └─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-03516f97              created     \n   +   │  ├─ pulumi-nodejs:dynamic:Resource   eksCluster-cfnStackName                       created     \n   +   │  ├─ aws:ec2:SecurityGroup            eksCluster-eksClusterSecurityGroup            created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksClusterInternetEgressRule       created     \n   +   │  ├─ aws:eks:Cluster                  eksCluster-eksCluster                         created     \n   +   │  ├─ aws:iam:InstanceProfile          eksCluster-instanceProfile                    created     \n   +   │  ├─ aws:ec2:SecurityGroup            eksCluster-nodeSecurityGroup                  created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeClusterIngressRule          created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeIngressRule                 created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeInternetEgressRule          created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksClusterIngressRule              created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksExtApiServerClusterIngressRule  created     \n   +   │  ├─ aws:ec2:LaunchConfiguration      eksCluster-nodeLaunchConfiguration            created     \n   +   │  ├─ pulumi:providers:kubernetes      eksCluster-eks-k8s                            created     \n   +   │  ├─ pulumi-nodejs:dynamic:Resource   eksCluster-vpc-cni                            created     \n   +   │  ├─ kubernetes:core:ConfigMap        eksCluster-nodeAccess                         created     \n   +   │  ├─ aws:cloudformation:Stack         eksCluster-nodes                              created     \n   +   │  └─ pulumi:providers:kubernetes      eksCluster-provider                           created     \n   +   ├─ awsx:ecr:Repository                 database-side-service                         created     \n   +   │  ├─ aws:ecr:Repository               database-side-service                         created     \n   +   │  └─ aws:ecr:LifecyclePolicy          database-side-service                         created     \n   +   ├─ aws:ebs:Volume                      storage-volume                                created     \n   +   ├─ kubernetes:apps:Deployment          database-side-service                         created     \n   +   ├─ kubernetes:core:Service             database-side-listener                        created     \n   +   ├─ kubernetes:apps:Deployment          server-side-service                           created     \n   +   ├─ kubernetes:core:Service             server-side-listener                          created     \n   +   ├─ kubernetes:apps:Deployment          client-side-service                           created     \n   +   └─ kubernetes:core:Service             client-side-listener                          created     \n\n   Outputs:\n       URL       : \"ab368f798ca564be295df514dfbc7a0e-519435073.us-west-2.elb.amazonaws.com\"\n       kubeConfig: {...}\n\n   Resources:\n       + 44 created\n\n   Duration: 15m45s\n   ```\n\n5. Verify that the ECS instance exists by connecting to it on port 3000 in a browser window.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [LICENSE](/assets/license)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.html","relUrl":"notes/aws-ts-k8s-voting-app.html"},{"doc":"Serverside","title":"Serverside","hpath":"aws-ts-k8s-voting-app.serverside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.serverside.html","relUrl":"notes/aws-ts-k8s-voting-app.serverside.html"},{"doc":"Server","title":"Server","hpath":"aws-ts-k8s-voting-app.serverside.server","content":"## Imported Assets\n\n- [db.js](/assets/db.js)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [startServer.sh](/assets/startserver.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.serverside.server.html","relUrl":"notes/aws-ts-k8s-voting-app.serverside.server.html"},{"doc":"Databaseside","title":"Databaseside","hpath":"aws-ts-k8s-voting-app.databaseside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.databaseside.html","relUrl":"notes/aws-ts-k8s-voting-app.databaseside.html"},{"doc":"Database","title":"Database","hpath":"aws-ts-k8s-voting-app.databaseside.database","content":"## Imported Assets\n\n- [startDatabase.sh](/assets/startdatabase.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.databaseside.database.html","relUrl":"notes/aws-ts-k8s-voting-app.databaseside.database.html"},{"doc":"Clientside","title":"Clientside","hpath":"aws-ts-k8s-voting-app.clientside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.clientside.html","relUrl":"notes/aws-ts-k8s-voting-app.clientside.html"},{"doc":"Client","title":"Client","hpath":"aws-ts-k8s-voting-app.clientside.client","content":"## Imported Assets\n\n- [package.json](/assets/package.json)\n- [startClient.sh](/assets/startclient.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.clientside.client.html","relUrl":"notes/aws-ts-k8s-voting-app.clientside.client.html"},{"doc":"Src","title":"Src","hpath":"aws-ts-k8s-voting-app.clientside.client.src","content":"## Imported Assets\n\n- [App.css](/assets/app.css)\n- [App.js](/assets/app.js)\n- [index.css](/assets/index.css)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.clientside.client.src.html","relUrl":"notes/aws-ts-k8s-voting-app.clientside.client.src.html"},{"doc":"Components","title":"Components","hpath":"aws-ts-k8s-voting-app.clientside.client.src.components","content":"## Imported Assets\n\n- [VotingComponent.js](/assets/votingcomponent.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.clientside.client.src.components.html","relUrl":"notes/aws-ts-k8s-voting-app.clientside.client.src.components.html"},{"doc":"Public","title":"Public","hpath":"aws-ts-k8s-voting-app.clientside.client.public","content":"## Imported Assets\n\n- [favicon.ico](/assets/favicon.ico)\n- [index.html](/assets/index.html)\n- [logo192.png](/assets/logo192.png)\n- [logo512.png](/assets/logo512.png)\n- [manifest.json](/assets/manifest.json)\n- [robots.txt](/assets/robots.txt)\n- [serverParams.js](/assets/serverparams.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-voting-app.clientside.client.public.html","relUrl":"notes/aws-ts-k8s-voting-app.clientside.client.public.html"},{"doc":"Aws Ts K8s Mern Voting App","title":"Aws Ts K8s Mern Voting App","hpath":"aws-ts-k8s-mern-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Kubernetes MERN Stack Voting App\n\nA simple voting app that uses Kubernetes.\n\nThe example shows how easy it is to deploy a containerized application to Amazon EKS. Pulumi does the following:\n\n- Builds the Docker images\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the images to the ECR instance\n- Provisions AWS EKS cluster\n- Uses the images to create Kubernetes deployments\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. [Install Docker](https://docs.docker.com/engine/installation/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-ts-k8s-mern-voting-app\n   ```\n\n2. Set the AWS region and the usernames and passwords for a set of accounts the project uses:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set sqlUserName <NAME>\n   $ pulumi config set sqlUserPassword <PASSWORD> --secret\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-ts-k8s-mern-voting-app):\n       Type                                   Name                                          Status       Info\n   +   pulumi:pulumi:Stack                    voting-app-aws-ts-k8s-mern-voting-app         created     \n   +   ├─ eks:index:Cluster                   eksCluster                                    created     \n   +   │  ├─ eks:index:ServiceRole            eksCluster-eksRole                            created     \n   +   │  │  ├─ aws:iam:Role                  eksCluster-eksRole-role                       created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-eksRole-90eb1c99                   created     \n   +   │  │  └─ aws:iam:RolePolicyAttachment  eksCluster-eksRole-4b490823                   created     \n   +   │  ├─ eks:index:ServiceRole            eksCluster-instanceRole                       created     \n   +   │  │  ├─ aws:iam:Role                  eksCluster-instanceRole-role                  created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-e1b295bd              created     \n   +   │  │  ├─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-3eb088f2              created     \n   +   │  │  └─ aws:iam:RolePolicyAttachment  eksCluster-instanceRole-03516f97              created     \n   +   │  ├─ pulumi-nodejs:dynamic:Resource   eksCluster-cfnStackName                       created     \n   +   │  ├─ aws:ec2:SecurityGroup            eksCluster-eksClusterSecurityGroup            created     \n   +   │  ├─ aws:iam:InstanceProfile          eksCluster-instanceProfile                    created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksClusterInternetEgressRule       created     \n   +   │  ├─ aws:eks:Cluster                  eksCluster-eksCluster                         created     \n   +   │  ├─ aws:ec2:SecurityGroup            eksCluster-nodeSecurityGroup                  created     \n   +   │  ├─ pulumi-nodejs:dynamic:Resource   eksCluster-vpc-cni                            created     \n   +   │  ├─ pulumi:providers:kubernetes      eksCluster-eks-k8s                            created     \n   +   │  ├─ kubernetes:core:ConfigMap        eksCluster-nodeAccess                         created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksClusterIngressRule              created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksExtApiServerClusterIngressRule  created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeIngressRule                 created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeInternetEgressRule          created     \n   +   │  ├─ aws:ec2:SecurityGroupRule        eksCluster-eksNodeClusterIngressRule          created     \n   +   │  ├─ aws:ec2:LaunchConfiguration      eksCluster-nodeLaunchConfiguration            created     \n   +   │  ├─ aws:cloudformation:Stack         eksCluster-nodes                              created     \n   +   │  └─ pulumi:providers:kubernetes      eksCluster-provider                           created     \n   +   ├─ awsx:ecr:Repository                 server-side-service                           created     \n   +   │  ├─ aws:ecr:Repository               server-side-service                           created     \n   +   │  └─ aws:ecr:LifecyclePolicy          server-side-service                           created     \n   +   ├─ awsx:ecr:Repository                 client-side-service                           created     \n   +   │  ├─ aws:ecr:Repository               client-side-service                           created     \n   +   │  └─ aws:ecr:LifecyclePolicy          client-side-service                           created     \n   +   ├─ awsx:ecr:Repository                 database-side-service                         created     \n   +   │  ├─ aws:ecr:Repository               database-side-service                         created     \n   +   │  └─ aws:ecr:LifecyclePolicy          database-side-service                         created     \n   +   ├─ aws:ebs:Volume                      storage-volume                                created     \n   +   ├─ kubernetes:apps:Deployment          database-side-service                         created     \n   +   ├─ kubernetes:core:Service             database-side-listener                        created     \n   +   ├─ kubernetes:apps:Deployment          server-side-service                           created     \n   +   ├─ kubernetes:core:Service             server-side-listener                          created     \n   +   ├─ kubernetes:apps:Deployment          client-side-service                           created     \n   +   └─ kubernetes:core:Service             client-side-listener                          created     \n\n   Outputs:\n       URL       : \"ab89804d273d8484cb9e64c93975f4ad-1303584037.us-west-2.elb.amazonaws.com\"\n       kubeConfig: {...}\n\n   Resources:\n       + 44 created\n\n   Duration: 18m10s\n   ```\n\n5. Verify that the ECS instance exists by connecting to it on port 3000 in a browser window.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [LICENSE](/assets/license)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.html"},{"doc":"Serverside","title":"Serverside","hpath":"aws-ts-k8s-mern-voting-app.serverside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.serverside.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.serverside.html"},{"doc":"Server","title":"Server","hpath":"aws-ts-k8s-mern-voting-app.serverside.server","content":"## Imported Assets\n\n- [db.js](/assets/db.js)\n- [index.js](/assets/index.js)\n- [model.js](/assets/model.js)\n- [package.json](/assets/package.json)\n- [startServer.sh](/assets/startserver.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.serverside.server.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.serverside.server.html"},{"doc":"Databaseside","title":"Databaseside","hpath":"aws-ts-k8s-mern-voting-app.databaseside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.databaseside.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.databaseside.html"},{"doc":"Database","title":"Database","hpath":"aws-ts-k8s-mern-voting-app.databaseside.database","content":"## Imported Assets\n\n- [startDatabase.sh](/assets/startdatabase.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.databaseside.database.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.databaseside.database.html"},{"doc":"Clientside","title":"Clientside","hpath":"aws-ts-k8s-mern-voting-app.clientside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.clientside.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.clientside.html"},{"doc":"Client","title":"Client","hpath":"aws-ts-k8s-mern-voting-app.clientside.client","content":"## Imported Assets\n\n- [package.json](/assets/package.json)\n- [startClient.sh](/assets/startclient.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.clientside.client.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.clientside.client.html"},{"doc":"Src","title":"Src","hpath":"aws-ts-k8s-mern-voting-app.clientside.client.src","content":"## Imported Assets\n\n- [App.css](/assets/app.css)\n- [App.js](/assets/app.js)\n- [index.css](/assets/index.css)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.clientside.client.src.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.clientside.client.src.html"},{"doc":"Components","title":"Components","hpath":"aws-ts-k8s-mern-voting-app.clientside.client.src.components","content":"## Imported Assets\n\n- [VotingComponent.js](/assets/votingcomponent.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.clientside.client.src.components.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.clientside.client.src.components.html"},{"doc":"Public","title":"Public","hpath":"aws-ts-k8s-mern-voting-app.clientside.client.public","content":"## Imported Assets\n\n- [favicon.ico](/assets/favicon.ico)\n- [index.html](/assets/index.html)\n- [logo192.png](/assets/logo192.png)\n- [logo512.png](/assets/logo512.png)\n- [manifest.json](/assets/manifest.json)\n- [robots.txt](/assets/robots.txt)\n- [serverParams.js](/assets/serverparams.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-k8s-mern-voting-app.clientside.client.public.html","relUrl":"notes/aws-ts-k8s-mern-voting-app.clientside.client.public.html"},{"doc":"Aws Ts Hello Fargate","title":"Aws Ts Hello Fargate","hpath":"aws-ts-hello-fargate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Dockerized App Using ECS, ECR, and Fargate\n\nThis example, inspired by the [Docker Getting Started Tutorial](https://docs.docker.com/get-started/), builds, deploys,\nand runs a simple containerized application to a private container registry, and scales out five load balanced replicas,\nall in just a handful of lines of Node.js code, and leveraging modern and best-in-class AWS features.\n\nTo do this, we use Pulumi infrastructure as code to provision an\n[Elastic Container Service (ECS)](https://aws.amazon.com/ecs/) cluster, build our `Dockerfile` and deploy the\nresulting image to a private [Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/) repository, and then create\na scaled-out [Fargate](https://aws.amazon.com/fargate/) service behind an\n[Elastic Application Load Balancer](https://aws.amazon.com/elasticloadbalancing/) that allows traffic from the Internet\non port 80. Because this example using AWS services directly, you can mix in other resources, like S3 buckets, RDS\ndatabases, and so on.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/download/)\n- [Download and install the Pulumi CLI](https://www.pulumi.com/docs/get-started/install/)\n- [Connect Pulumi with your AWS account](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n\n## Running the Example\n\nAfter cloning this repo, `cd` into it and run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Deploy everything with a single `pulumi up` command. This will show you a preview of changes first, which\n   includes all of the required AWS resources (clusters, services, and the like). Don't worry if it's more than\n   you expected -- this is one of the benefits of Pulumi, it configures everything so that so you don't need to!\n\n   ```bash\n   $ pulumi up\n   ```\n\n    After being prompted and selecting \"yes\", your deployment will begin. It'll complete in a few minutes:\n\n   ```\n   Updating (dev):\n\n        Type                                                        Name                        Status\n    +   pulumi:pulumi:Stack                                         aws-ts-hello-fargate-dev    created\n    +   ├─ awsx:x:ecs:Cluster                                       cluster                     created\n    +   │  ├─ awsx:x:ec2:SecurityGroup                              cluster                     created\n    +   │  │  ├─ awsx:x:ec2:EgressSecurityGroupRule                 cluster-egress              created\n    +   │  │  │  └─ aws:ec2:SecurityGroupRule                       cluster-egress              created\n    +   │  │  ├─ awsx:x:ec2:IngressSecurityGroupRule                cluster-ssh                 created\n    +   │  │  │  └─ aws:ec2:SecurityGroupRule                       cluster-ssh                 created\n    +   │  │  ├─ awsx:x:ec2:IngressSecurityGroupRule                cluster-containers          created\n    +   │  │  │  └─ aws:ec2:SecurityGroupRule                       cluster-containers          created\n    +   │  │  └─ aws:ec2:SecurityGroup                              cluster                     created\n    +   │  └─ aws:ecs:Cluster                                       cluster                     created\n    +   ├─ awsx:x:elasticloadbalancingv2:ApplicationLoadBalancer    net-lb                      created\n    +   │  ├─ awsx:x:elasticloadbalancingv2:ApplicationTargetGroup  web                         created\n    +   │  │  └─ aws:elasticloadbalancingv2:TargetGroup             ca84d134                    created\n    +   │  ├─ awsx:x:elasticloadbalancingv2:ApplicationListener     web                         created\n    +   │  │  ├─ awsx:x:ec2:IngressSecurityGroupRule                web-external-0-ingress      created\n    +   │  │  │  └─ aws:ec2:SecurityGroupRule                       web-external-0-ingress      created\n    +   │  │  └─ aws:elasticloadbalancingv2:Listener                web                         created\n    +   │  └─ aws:elasticloadbalancingv2:LoadBalancer               218ffe37                    created\n    +   ├─ awsx:x:ec2:Vpc                                           default-vpc                 created\n    +   │  ├─ awsx:x:ec2:Subnet                                     default-vpc-public-0        created\n    +   │  ├─ awsx:x:ec2:Subnet                                     default-vpc-public-1        created\n    >   │  ├─ aws:ec2:Subnet                                        default-vpc-public-0        read\n    >   │  └─ aws:ec2:Subnet                                        default-vpc-public-1        read\n    +   ├─ awsx:x:ecs:FargateTaskDefinition                         app-svc                     created\n    +   │  ├─ aws:ecr:Repository                                    app-img                     created\n    +   │  ├─ aws:cloudwatch:LogGroup                               app-svc                     created\n    +   │  ├─ aws:iam:Role                                          app-svc-task                created\n    +   │  ├─ aws:iam:Role                                          app-svc-execution           created\n    +   │  ├─ aws:ecr:LifecyclePolicy                               app-img                     created\n    +   │  ├─ aws:iam:RolePolicyAttachment                          app-svc-task-32be53a2       created\n    +   │  ├─ aws:iam:RolePolicyAttachment                          app-svc-task-fd1a00e5       created\n    +   │  ├─ aws:iam:RolePolicyAttachment                          app-svc-execution-9a42f520  created\n    +   │  └─ aws:ecs:TaskDefinition                                app-svc                     created\n    +   ├─ awsx:x:ecs:FargateService                                app-svc                     created\n    +   │  └─ aws:ecs:Service                                       app-svc                     created\n    >   └─ aws:ec2:Vpc                                              default-vpc                 read\n\n   Outputs:\n       url: \"218ffe37-e8023b7-1429118690.us-east-1.elb.amazonaws.com\"\n\n   Resources:\n       + 34 created\n\n   Duration: 3m30s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-ts-hello-fargate/dev/updates/1\n   ```\n\n4. At this point, your app is running! The URL was published so it's easy to interact with:\n\n   ```bash\n   $ curl http://$(pulumi stack output url)\n   <h3>Hello World!</h3>\n   <b>Hostname:</b> ip-172-31-39-18.ec2.internal<br/>\n   <b>Visits:</b> <i>cannot connect to Redis, counter disabled</i>\n   ```\n\n   For more details on how to enable Redis or advanced options, please see the instructions in the\n   [Docker Getting Started guide](https://docs.docker.com/get-started/part6/).\n\n5. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-hello-fargate.html","relUrl":"notes/aws-ts-hello-fargate.html"},{"doc":"App","title":"App","hpath":"aws-ts-hello-fargate.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [app.py](/assets/app.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-hello-fargate.app.html","relUrl":"notes/aws-ts-hello-fargate.app.html"},{"doc":"Aws Ts Eks","title":"Aws Ts Eks","hpath":"aws-ts-eks","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Amazon EKS Cluster\n\nThis example deploys an EKS Kubernetes cluster with an EBS-backed StorageClass and deploys the Kubernetes Dashboard into the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n4. [Install `aws-iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n\nIf you'd like to follow the optional instructions in step 7 in order to deploy a Helm chart into your cluster, you'll\nalso need to set up the Helm client:\n\n1. [Install the Helm client binaries](https://docs.helm.sh/using_helm/#installing-helm)\n2. If you are using Helm v2, initialize the Helm client:\n\n   ```bash\n   $ helm init --client-only\n   ```\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n   We recommend using `us-west-2` to host your EKS cluster as other regions (notably `us-east-1`) may have capacity\n   issues that prevent EKS clusters from creating:\n\n   ```\n   Diagnostics:\n     aws:eks:Cluster: eksCluster\n       error: Plan apply failed: creating urn:pulumi:aws-ts-eks-example::aws-ts-eks::EKSCluster$aws:eks/cluster:Cluster::eksCluster: error creating EKS Cluster (eksCluster-233c968): UnsupportedAvailabilityZoneException: Cannot create cluster 'eksCluster-233c968' because us-east-1a, the targeted availability zone, does not currently have sufficient capacity to support the cluster. Retry and choose from these availability zones: us-east-1b, us-east-1c, us-east-1d\n           status code: 400, request id: 9f031e89-a0b0-11e8-96f8-534c1d26a353\n   ```\n\n    We are tracking enabling the creation of VPCs limited to specific AZs to unblock this in `us-east-1`: pulumi/pulumi-awsx#32\n\n4. Stand up the EKS cluster, which will also deploy the Kubernetes Dashboard:\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. After 10-15 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets >kubeconfig.json\n   ```\n\n    Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.json kubectl get nodes\n   ```\n\n\n6. You can now connect to the Kubernetes Dashboard by fetching an authentication token and starting the kubectl proxy.\n\n   - Fetch an authentication token:\n\n     ```bash\n     $ KUBECONFIG=./kubeconfig.json kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}'\n     eks-admin-token-b5zv4\n     $ KUBECONFIG=./kubeconfig.json kubectl -n kube-system describe secret eks-admin-token-b5zv4\n     Name:         eks-admin-token-b5zv4\n     Namespace:    kube-system\n     Labels:       <none>\n     Annotations:  kubernetes.io/service-account.name=eks-admin\n                   kubernetes.io/service-account.uid=bcfe66ac-39be-11e8-97e8-026dce96b6e8\n\n     Type:  kubernetes.io/service-account-token\n\n     Data\n     ====\n     token:      <authentication_token>\n     ca.crt:     1025 bytes\n     namespace:  11 bytes\n     ```\n\n   - Run the kubectl proxy:\n\n     ```bash\n     $ KUBECONFIG=./kubeconfig.json kubectl proxy\n     ```\n\n   - Open `http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/` in a web\n     browser.\n\n   - Choose `Token` authentication, paste the token retrieved earlier into the `Token` field, and sign in.\n\n7. From there, feel free to experiment. Make edits and run `pulumi up` to incrementally update your stack.\n   For example, in order to deploy a Helm chart into your cluster, import the `@pulumi/kubernetes/helm` package,\n   add a `Chart` resource that targets the EKS cluster to `index.ts`, and run `pulumi up`. Note that the Helm client\n   must be set up in order for the chart to deploy. For more details, see the [Prerequisites](#prerequisites) list.\n\n   ```typescript\n   import * as helm from \"@pulumi/kubernetes/helm\";\n\n   // ... existing code here ...\n\n   const myk8s = new k8s.Provider(\"myk8s\", {\n       kubeconfig: cluster.kubeconfig.apply(JSON.stringify),\n   });\n\n   const postgres = new helm.v2.Chart(\"postgres\", {\n       // stable/postgresql@0.15.0\n       repo: \"stable\",\n       chart: \"postgresql\",\n       version: \"0.15.0\",\n       values: {\n           // Use a stable password.\n           postgresPassword: \"some-password\",\n           // Expose the postgres server via a load balancer.\n           service: {\n               type: \"LoadBalancer\",\n           },\n       },\n   }, { providers: { kubernetes: myk8s } });\n   ```\n\n    Once the chart has been deployed, you can find its public, load-balanced endpoint via the Kubernetes Dashboard.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks.html","relUrl":"notes/aws-ts-eks.html"},{"doc":"Aws Ts Eks Migrate Nodegroups","title":"Aws Ts Eks Migrate Nodegroups","hpath":"aws-ts-eks-migrate-nodegroups","content":"# Zero Downtime Migration of EKS Node Groups\n\nCreates an EKS cluster with node groups and a workload, and showcases adding a\nnode group to use for workload migration with zero downtime.\n\nFor step-by-step instructions, check out the [tutorial][tutorial-migrate-nodegroups].\n\n[tutorial-migrate-nodegroups]: https://www.pulumi.com/docs/tutorials/kubernetes/eks-migrate-nodegroups/\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [echoserver.ts](/assets/echoserver.ts)\n- [iam.ts](/assets/iam.ts)\n- [index.ts](/assets/index.ts)\n- [nginx-ing-cntlr-rbac.ts](/assets/nginx-ing-cntlr-rbac.ts)\n- [nginx-ing-cntlr.ts](/assets/nginx-ing-cntlr.ts)\n- [nginx.ts](/assets/nginx.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [utils.ts](/assets/utils.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks-migrate-nodegroups.html","relUrl":"notes/aws-ts-eks-migrate-nodegroups.html"},{"doc":"Scripts","title":"Scripts","hpath":"aws-ts-eks-migrate-nodegroups.scripts","content":"## Imported Assets\n\n- [delete-t3.2xlarge-nodes.sh](/assets/delete-t3.sh)\n- [drain-t3.2xlarge-nodes.sh](/assets/drain-t3.sh)\n- [load-testing.sh](/assets/load-testing.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks-migrate-nodegroups.scripts.html","relUrl":"notes/aws-ts-eks-migrate-nodegroups.scripts.html"},{"doc":"Aws Ts Eks Hello World","title":"Aws Ts Eks Hello World","hpath":"aws-ts-eks-hello-world","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Amazon EKS Cluster: Hello World!\n\nThis example deploys an EKS Kubernetes cluster with an EBS-backed StorageClass, and deploys a Kubernetes Namespace and Deployment of NGINX into the cluster.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. Install a package manager for Node.js, such as [npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install).\n4. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n5. [Install `aws-iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   This installs the dependent packages [needed](https://www.pulumi.com/docs/intro/concepts/how-pulumi-works/) for our Pulumi program.\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   This will initialize the Pulumi program in TypeScript.\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required AWS configuration variables:\n\n   This sets configuration options and default values for our cluster.\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n4. Stand up the EKS cluster:\n\n   To preview and deploy changes, run `pulumi update` and select \"yes.\"\n\n   The `update` sub-command shows a preview of the resources that will be created\n   and prompts on whether to proceed with the deployment. Note that the stack\n   itself is counted as a resource, though it does not correspond\n   to a physical cloud resource.\n\n   You can also run `pulumi up --diff` to see and inspect the diffs of the\n   overall changes expected to take place.\n\n   Running `pulumi up` will deploy the EKS cluster. Note, provisioning a\n   new EKS cluster takes between 10-15 minutes.\n\n   ```bash\n   $ pulumi update\n   Previewing update (eks-demo):\n\n       Type                                          Name                              \tPlan\n   +   pulumi:pulumi:Stack                           eks-hello-world-eks-demo     \t\t\tcreate\n   +   ├─ eks:index:Cluster                          helloworld                          \tcreate\n   +   │  ├─ eks:index:ServiceRole                   helloworld-eksRole                  \tcreate\n   +   │  │  ├─ aws:iam:Role                         helloworld-eksRole-role             \tcreate\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-eksRole-90eb1c99         \tcreate\n   +   │  │  └─ aws:iam:RolePolicyAttachment         helloworld-eksRole-4b490823         \tcreate\n   +   │  ├─ eks:index:ServiceRole                   helloworld-instanceRole             \tcreate\n   +   │  │  ├─ aws:iam:Role                         helloworld-instanceRole-role        \tcreate\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-03516f97    \tcreate\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-e1b295bd    \tcreate\n   +   │  │  └─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-3eb088f2    \tcreate\n   +   │  ├─ pulumi-nodejs:dynamic:Resource          helloworld-cfnStackName             \tcreate\n   +   │  ├─ aws:ec2:SecurityGroup                   helloworld-eksClusterSecurityGroup  \tcreate\n   +   │  ├─ aws:iam:InstanceProfile                 helloworld-instanceProfile          \tcreate\n   +   │  ├─ aws:eks:Cluster                         helloworld-eksCluster               \tcreate\n   +   │  ├─ pulumi-nodejs:dynamic:Resource          helloworld-vpc-cni                  \tcreate\n   +   │  ├─ pulumi:providers:kubernetes             helloworld-eks-k8s                  \tcreate\n   +   │  ├─ aws:ec2:SecurityGroup                   helloworld-nodeSecurityGroup        \tcreate\n   +   │  ├─ kubernetes:core:ConfigMap               helloworld-nodeAccess               \tcreate\n   +   │  ├─ kubernetes:storage.k8s.io:StorageClass  helloworld-gp2                      \tcreate\n   +   │  ├─ aws:ec2:SecurityGroupRule               helloworld-eksClusterIngressRule    \tcreate\n   +   │  ├─ aws:ec2:LaunchConfiguration             helloworld-nodeLaunchConfiguration  \tcreate\n   +   │  ├─ aws:cloudformation:Stack                helloworld-nodes                    \tcreate\n   +   │  └─ pulumi:providers:kubernetes             helloworld-provider                 \tcreate\n   +   └─ aws-infra:network:Network                  vpc                               \tcreate\n   +      ├─ aws:ec2:Vpc                             vpc                               \tcreate\n   +      ├─ aws:ec2:Eip                             vpc-nat-0                         \tcreate\n   +      ├─ aws:ec2:Eip                             vpc-nat-1                         \tcreate\n   +      ├─ aws:ec2:InternetGateway                 vpc                               \tcreate\n   +      ├─ aws:ec2:Subnet                          vpc-nat-1                         \tcreate\n   +      ├─ aws:ec2:Subnet                          vpc-0                             \tcreate\n   +      ├─ aws:ec2:Subnet                          vpc-nat-0                         \tcreate\n   +      ├─ aws:ec2:Subnet                          vpc-1                             \tcreate\n   +      ├─ aws:ec2:RouteTable                      vpc                               \tcreate\n   +      ├─ aws:ec2:NatGateway                      vpc-nat-1                         \tcreate\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-nat-1                         \tcreate\n   +      ├─ aws:ec2:NatGateway                      vpc-nat-0                         \tcreate\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-nat-0                         \tcreate\n   +      ├─ aws:ec2:RouteTable                      vpc-nat-1                         \tcreate\n   +      ├─ aws:ec2:RouteTable                      vpc-nat-0                         \tcreate\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-1                             \tcreate\n   +      └─ aws:ec2:RouteTableAssociation           vpc-0                             \tcreate\n\n   Resources:\n       + 42 to create\n\n   clusterng (eks-demo):\n\n       Type                                          Name                              \tStatus      Info\n   +   pulumi:pulumi:Stack                           eks-hello-world-eks-demo     \t\t\tcreated\n   +   ├─ eks:index:Cluster                          helloworld                          \tcreated\n   +   │  ├─ eks:index:ServiceRole                   helloworld-eksRole                  \tcreated\n   +   │  │  ├─ aws:iam:Role                         helloworld-eksRole-role             \tcreated\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-eksRole-90eb1c99         \tcreated\n   +   │  │  └─ aws:iam:RolePolicyAttachment         helloworld-eksRole-4b490823         \tcreated\n   +   │  ├─ eks:index:ServiceRole                   helloworld-instanceRole             \tcreated\n   +   │  │  ├─ aws:iam:Role                         helloworld-instanceRole-role        \tcreated\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-3eb088f2    \tcreated\n   +   │  │  ├─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-03516f97    \tcreated\n   +   │  │  └─ aws:iam:RolePolicyAttachment         helloworld-instanceRole-e1b295bd    \tcreated\n   +   │  ├─ pulumi-nodejs:dynamic:Resource          helloworld-cfnStackName             \tcreated\n   +   │  ├─ aws:iam:InstanceProfile                 helloworld-instanceProfile          \tcreated\n   +   │  ├─ aws:ec2:SecurityGroup                   helloworld-eksClusterSecurityGroup  \tcreated\n   +   │  ├─ aws:eks:Cluster                         helloworld-eksCluster               \tcreated\n   +   │  ├─ pulumi:providers:kubernetes             helloworld-eks-k8s                  \tcreated\n   +   │  ├─ pulumi-nodejs:dynamic:Resource          helloworld-vpc-cni                  \tcreated\n   +   │  ├─ aws:ec2:SecurityGroup                   helloworld-nodeSecurityGroup        \tcreated\n   +   │  ├─ kubernetes:core:ConfigMap               helloworld-nodeAccess               \tcreated\n   +   │  ├─ kubernetes:storage.k8s.io:StorageClass  helloworld-gp2                      \tcreated\n   +   │  ├─ aws:ec2:SecurityGroupRule               helloworld-eksClusterIngressRule    \tcreated\n   +   │  ├─ aws:ec2:LaunchConfiguration             helloworld-nodeLaunchConfiguration  \tcreated\n   +   │  ├─ aws:cloudformation:Stack                helloworld-nodes                    \tcreated\n   +   │  └─ pulumi:providers:kubernetes             helloworld-provider                 \tcreated\n   +   └─ aws-infra:network:Network                  vpc                               \tcreated\n   +      ├─ aws:ec2:Vpc                             vpc                               \tcreated\n   +      ├─ aws:ec2:Eip                             vpc-nat-0                         \tcreated\n   +      ├─ aws:ec2:Eip                             vpc-nat-1                         \tcreated\n   +      ├─ aws:ec2:InternetGateway                 vpc                               \tcreated\n   +      ├─ aws:ec2:Subnet                          vpc-nat-1                         \tcreated\n   +      ├─ aws:ec2:Subnet                          vpc-0                             \tcreated\n   +      ├─ aws:ec2:Subnet                          vpc-nat-0                         \tcreated\n   +      ├─ aws:ec2:Subnet                          vpc-1                             \tcreated\n   +      ├─ aws:ec2:RouteTable                      vpc                               \tcreated\n   +      ├─ aws:ec2:NatGateway                      vpc-nat-1                         \tcreated\n   +      ├─ aws:ec2:NatGateway                      vpc-nat-0                         \tcreated\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-nat-0                         \tcreated\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-nat-1                         \tcreated\n   +      ├─ aws:ec2:RouteTable                      vpc-nat-1                         \tcreated\n   +      ├─ aws:ec2:RouteTableAssociation           vpc-1                             \tcreated\n   +      ├─ aws:ec2:RouteTable                      vpc-nat-0                         \tcreated\n   +      └─ aws:ec2:RouteTableAssociation           vpc-0                             \tcreated\n\n   Diagnostics:\n   pulumi:pulumi:Stack (eks-hello-world-eks-demo):\n\n   Outputs:\n       kubeconfig: {\n           apiVersion     : \"v1\"\n           clusters       : [\n               [0]: {\n                   cluster: {\n                       certificate-authority-data: \"<CERT_DATA>\"\n                       server                    : \"https://<SERVER_ADDR>.us-west-2.eks.amazonaws.com\"\n                   }\n                   name   : \"kubernetes\"\n               }\n           ]\n           contexts       : [\n               [0]: {\n                   context: {\n                       cluster: \"kubernetes\"\n                       user   : \"aws\"\n                   }\n                   name   : \"aws\"\n               }\n           ]\n           current-context: \"aws\"\n           kind           : \"Config\"\n           users          : [\n               [0]: {\n                   name: \"aws\"\n                   user: {\n                       exec: {\n                           apiVersion: \"client.authentication.k8s.io/v1alpha1\"\n                           args      : [\n                               [0]: \"token\"\n                               [1]: \"-i\"\n                               [2]: \"helloworld-eksCluster-e9e1711\"\n                           ]\n                           command   : \"aws-iam-authenticator\"\n                       }\n                   }\n               }\n           ]\n       }\n\n   Resources:\n       + 42 created\n\n   Duration: 13m7s\n   ```\n\n5. After 10-15 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output.\n\n    As part of the update, you'll see some new objects in the output: a\n    `Namespace` in Kubernetes to deploy into, a `Deployment` resource for\n    the NGINX app, and a LoadBalancer `Service` to publicly access NGINX.\n\n    Pulumi understands which changes to a given cloud resource can be made\n    in place, and which require replacement, and computes\n    the minimally disruptive change to achieve the desired state.\n\n   > **Note:** Pulumi auto-generates a suffix for all objects.\n   > See the [Pulumi Programming Model](https://www.pulumi.com/docs/intro/concepts/resources/#autonaming) for more info.\n   >\n   > ```\n   > deploymentName : \"helloworld-58jkmc7c\"\n   > ...\n   > namespaceName  : \"helloworld-xaldhgca\"\n   > serviceHostname: \"a71f5ab3f2a6e11e3ac39200f4a9ad5d-1297981966.us-west-2.elb.amazonaws.com\"\n   > serviceName    : \"helloworld-3fc2uhh7\"\n   > ```\n\n    If you visit the FQDN listed in `serviceHostname` you should land on the\n    NGINX welcome page. Note that it may take a minute or so for the\n    LoadBalancer to become active on AWS.\n\n6. Access the Kubernetes Cluster using `kubectl`\n\n   To access your new Kubernetes cluster using `kubectl`, we need to set up the\n   `kubeconfig` file and download `kubectl`. We can leverage the Pulumi\n   stack output in the CLI, as Pulumi facilitates exporting these objects for us.\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets > kubeconfig\n   $ export KUBECONFIG=$PWD/kubeconfig\n   $ export KUBERNETES_VERSION=1.11.5 && sudo curl -s -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && sudo chmod +x /usr/local/bin/kubectl\n\n   $ kubectl version\n   $ kubectl cluster-info\n   $ kubectl get nodes\n   ```\n\n   We can also use the stack output to query the cluster for our newly created Deployment:\n\n   ```bash\n   $ kubectl get deployment $(pulumi stack output deploymentName) --namespace=$(pulumi stack output namespaceName)\n   $ kubectl get service $(pulumi stack output serviceName) --namespace=$(pulumi stack output namespaceName)\n   ```\n\n   We can also create another NGINX Deployment into the `default` namespace using\n   `kubectl` natively:\n\n   ```bash\n   $ kubectl create deployment my-nginx --image=nginx\n   $ kubectl get pods\n   $ kubectl delete deployment my-nginx\n   ```\n\n   By deploying the NGINX image in this way, it is outside of Pulumi's control. But this is simply to show that we can control our cluster via the CLI as well.\n\n7. Experimentation\n\n   From here on, feel free to experiment. Make edits and run `pulumi up` afterwards to incrementally update your stack.\n\n   ### Running Off-the-Shelf Guestbook YAML\n\n   For example, if you wish to pull existing Kubernetes YAML manifests into\n   Pulumi to aid in your transition, append the following code block to the existing\n   `index.ts` file and run `pulumi up`.\n\n   This is an example of how to create the standard Kubernetes Guestbook manifests in\n   Pulumi using the Guestbook YAML manifests. We take the additional steps of transforming\n   its properties to use the same Namespace and metadata labels that\n   the NGINX stack uses, and also make its frontend service use a\n   LoadBalancer typed Service to expose it publicly.\n\n   ```typescript\n   // Create resources for the Kubernetes Guestbook from its YAML manifests\n   const guestbook = new k8s.yaml.ConfigFile(\"guestbook\",\n       {\n           file: \"https://raw.githubusercontent.com/pulumi/pulumi-kubernetes/master/tests/sdk/nodejs/examples/yaml-guestbook/yaml/guestbook.yaml\",\n           transformations: [\n               (obj: any) => {\n                   // Do transformations on the YAML to use the same namespace and\n                   // labels as the NGINX stack above\n                   if (obj.metadata.labels) {\n                       obj.metadata.labels['appClass'] = namespaceName\n                   } else {\n                       obj.metadata.labels = appLabels\n                   }\n\n                   // Make the 'frontend' Service public by setting it to be of type\n                   // LoadBalancer\n                   if (obj.kind == \"Service\" && obj.metadata.name == \"frontend\") {\n                       if (obj.spec) {\n                           obj.spec.type = \"LoadBalancer\"\n                       }\n                   }\n               }\n           ],\n       },\n       {\n           providers: { \"kubernetes\": clusterProvider },\n       },\n   );\n\n   // Export the Guestbook public LoadBalancer endpoint\n   export const guestbookPublicIP =\n       guestbook.getResourceProperty(\"v1/Service\", \"frontend\", \"status\").apply(s => s.loadBalancer.ingress[0].ip);\n   ```\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks-hello-world.html","relUrl":"notes/aws-ts-eks-hello-world.html"},{"doc":"Aws Ts Eks Distro","title":"Aws Ts Eks Distro","hpath":"aws-ts-eks-distro","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Amazon EKS Distro Cluster\n\nThis example deploys an Amazon EKS Distro cluster using a [dynamic provider](https://www.pulumi.com/docs/intro/concepts/resources/#dynamicproviders) which utilizes [kops](https://github.com/kubernetes/kops)\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Node.js](https://nodejs.org/en/download/)\n3. [Install Kops](https://kops.sigs.k8s.io/getting_started/install/)\n4. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n5. [Install `aws-iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Install the required Node.js packages:\n\n   ```bash\n   $ npm install\n   ```\n\n2. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n4. Stand up the EKS cluster, which will also deploy the Kubernetes Dashboard:\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. After 10-15 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets >kubeconfig.json\n   ```\n\n    Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.json kubectl get nodes\n   ```\n\n\n7. From there, feel free to experiment. Make edits and run `pulumi up` to incrementally update your stack.\n   For example, in order to deploy a Helm chart into your cluster, import the `@pulumi/kubernetes/helm` package,\n   add a `Chart` resource that targets the EKS cluster to `index.ts`, and run `pulumi up`. Note that the Helm client\n   must be set up in order for the chart to deploy. For more details, see the [Prerequisites](#prerequisites) list.\n\n   ```typescript\n   import * as helm from \"@pulumi/kubernetes/helm\";\n\n   // ... existing code here ...\n\n   const myk8s = new k8s.Provider(\"myk8s\", {\n       kubeconfig: cluster.kubeconfig.apply(JSON.stringify),\n   });\n\n   const postgres = new helm.v2.Chart(\"postgres\", {\n       // stable/postgresql@0.15.0\n       repo: \"stable\",\n       chart: \"postgresql\",\n       version: \"0.15.0\",\n       values: {\n           // Use a stable password.\n           postgresPassword: \"some-password\",\n           // Expose the postgres server via a load balancer.\n           service: {\n               type: \"LoadBalancer\",\n           },\n       },\n   }, { providers: { kubernetes: myk8s } });\n   ```\n\n    Once the chart has been deployed, you can find its public, load-balanced endpoint via the Kubernetes Dashboard.\n\n8. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks-distro.html","relUrl":"notes/aws-ts-eks-distro.html"},{"doc":"Eksdistro","title":"Eksdistro","hpath":"aws-ts-eks-distro.eksdistro","content":"## Imported Assets\n\n- [aws-iam-authenticator.yaml](/assets/aws-iam-authenticator.yaml)\n- [cluster.yaml](/assets/cluster.yaml)\n- [index.ts](/assets/index.ts)\n- [kops.sh](/assets/kops.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-eks-distro.eksdistro.html","relUrl":"notes/aws-ts-eks-distro.eksdistro.html"},{"doc":"Aws Ts Ec2 Provisioners","title":"Aws Ts Ec2 Provisioners","hpath":"aws-ts-ec2-provisioners","content":"# AWS WebServer with Manual Provisioning\n\nThis demonstrates using Pulumi dynamic providers to accomplish post-provisioning configuration steps.\n\nUsing these building blocks, one can accomplish much of the same as Terraform provisioners.\n\n<https://github.com/pulumi/pulumi/issues/1691> tracks designing and developing a complete replacement for provisioners.\n\n## Running the Example\n\nFirst, create a stack, using `pulumi stack init`.\n\nNow, we need to ensure that our dependencies are installed:\n\n```\n$ npm install\n```\n\nNext, generate an OpenSSH keypair for use with your server - as per the AWS [Requirements][1]\n\n```\n$ ssh-keygen -t rsa -f rsa -m PEM\n```\n\nThis will output two files, `rsa` and `rsa.pub`, in the current directory. Be sure not to commit these files!\n\nWe then need to configure our stack so that the public key is used by our EC2 instance, and the private key used\nfor subsequent SCP and SSH steps that will configure our server after it is stood up.\n\n```\n$ cat rsa.pub | pulumi config set publicKey --\n$ cat rsa | pulumi config set privateKey --secret --\n```\n\nIf your key is protected by a passphrase, add that too:\n\n```\n$ pulumi config set privateKeyPassphrase --secret [yourPassphraseHere]\n```\n\nNotice that we've used `--secret` for both `privateKey` and `privateKeyPassphrase`. This ensures their are\nstored in encrypted form in the Pulumi secrets system.\n\nAlso set your desired AWS region:\n\n```\n$ pulumi config set aws:region us-west-2\n```\n\nFrom there, you can run `pulumi up` and all resources will be provisioned and configured.\n\n[1]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [myapp.conf](/assets/myapp.conf)\n- [package.json](/assets/package.json)\n- [util.ts](/assets/util.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-ec2-provisioners.html","relUrl":"notes/aws-ts-ec2-provisioners.html"},{"doc":"Provisioners","title":"Provisioners","hpath":"aws-ts-ec2-provisioners.provisioners","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n- [provisioner.ts](/assets/provisioner.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-ec2-provisioners.provisioners.html","relUrl":"notes/aws-ts-ec2-provisioners.provisioners.html"},{"doc":"Aws Ts Containers","title":"Aws Ts Containers","hpath":"aws-ts-containers","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Easy container example\n\nCompanion to the tutorial [Provision containers on AWS](https://www.pulumi.com/docs/tutorials/aws/ecs-fargate/).\n\n## Prerequisites\n\nTo run this example, make sure [Docker](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Running the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init containers-dev\n   ```\n\n2. Configure Pulumi to use an AWS region that supports Fargate. This is currently only available in `us-east-1`, `us-east-2`, `us-west-2`, and `eu-west-1`:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Preview and deploy the app via `pulumi up`. The preview will take a few minutes, as it builds a Docker container. A total of 19 resources are created.\n\n   ```\n   $ pulumi up\n   ```\n\n5. View the endpoint URL, and run curl:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1)\n       OUTPUT                  VALUE\n       hostname                http://***.elb.us-west-2.amazonaws.com\n\n   $ curl $(pulumi stack output hostname)\n   <html>\n       <head><meta charset=\"UTF-8\">\n       <title>Hello, Pulumi!</title></head>\n   <body>\n       <p>Hello, S3!</p>\n       <p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n   </body></html>\n   ```\n\n6. To view the runtime logs from the container, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n   ```\n   $ pulumi logs --follow\n   Collecting logs for stack container-quickstart-dev since 2018-05-22T14:25:46.000-07:00.\n   2018-05-22T15:33:22.057-07:00[                  pulumi-nginx] 172.31.13.248 - - [22/May/2018:22:33:22 +0000] \"GET / HTTP/1.1\" 200 189 \"-\" \"curl/7.54.0\" \"-\"\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-containers.html","relUrl":"notes/aws-ts-containers.html"},{"doc":"App","title":"App","hpath":"aws-ts-containers.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-containers.app.html","relUrl":"notes/aws-ts-containers.app.html"},{"doc":"Content","title":"Content","hpath":"aws-ts-containers.app.content","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-containers.app.content.html","relUrl":"notes/aws-ts-containers.app.content.html"},{"doc":"Aws Ts Assume Role","title":"Aws Ts Assume Role","hpath":"aws-ts-assume-role","content":"\n","url":"https://pulumi.dendron.so/notes/96d16b7a-8e03-4426-8213-4a3e4dc65b2a.html","relUrl":"notes/96d16b7a-8e03-4426-8213-4a3e4dc65b2a.html"},{"doc":"Create Role","title":"Create Role","hpath":"aws-ts-assume-role.create-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-assume-role.create-role.html","relUrl":"notes/aws-ts-assume-role.create-role.html"},{"doc":"Assume Role","title":"Assume Role","hpath":"aws-ts-assume-role.assume-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-assume-role.assume-role.html","relUrl":"notes/aws-ts-assume-role.assume-role.html"},{"doc":"Aws Ts Appsync","title":"Aws Ts Appsync","hpath":"aws-ts-appsync","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# GraphQL Endpoint in AWS AppSync\n\nThis example shows how to set up a basic GraphQL endpoint in AWS AppSync. The endpoint contains one query and one mutation that get and put items to a Dynamo DB table.\n\n## Deploying and running the Pulumi App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 10 created\n   Duration: 20s\n   ```\n\n5. Check the deployed GraphQL endpoint:\n\n   ```\n   $ pulumi stack output endpoint\n   https://***.appsync-api.us-east-2.amazonaws.com/graphql\n   $ pulumi stack output key\n   ***sensitivekey***\n   $ curl -XPOST -H \"Content-Type:application/graphql\" -H \"x-api-key:$(pulumi stack output key)\" -d '{ \"query\": \"mutation AddTenant { addTenant(id: \\\"123\\\", name: \\\"FirstCorp\\\") { id name } }\" }' \"$(pulumi stack output endpoint)\" \n   {\n       \"data\": {\n           \"addTenant\": {\n               \"id\": \"123\",\n               \"name\": \"FirstCorp\"\n           }\n       }\n   }\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [iam.ts](/assets/iam.ts)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-appsync.html","relUrl":"notes/aws-ts-appsync.html"},{"doc":"Aws Ts Apigatewayv2 HTTP API","title":"Aws Ts Apigatewayv2 HTTP API","hpath":"aws-ts-apigatewayv2-http-api","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS API Gateway V2 HTTP API\n\nSet up a HTTP API using AWS API Gateway V2, complete with a route, stage and integration.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init http-api\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (http-api)\n   ...\n\n   Updating (http-api)\n\n        Type                             Name                                   Status\n    +   pulumi:pulumi:Stack              aws-ts-apigatewayv2-http-api-http-api  created\n    +   ├─ aws:apigatewayv2:Api          httpApiGateway                         created\n    +   ├─ aws:iam:Role                  lambdaRole                             created\n    +   ├─ aws:lambda:Function           lambdaFunction                         created\n    +   ├─ aws:iam:RolePolicyAttachment  lambdaRoleAttachment                   created\n    +   ├─ aws:lambda:Permission         lambdaPermission                       created\n    +   ├─ aws:apigatewayv2:Integration  lambdaIntegration                      created\n    +   ├─ aws:apigatewayv2:Route        apiRoute                               created\n    +   └─ aws:apigatewayv2:Stage        apiStage                               created\n\n   Outputs:\n       endpoint: \"https://****.execute-api.us-east-2.amazonaws.com/http-api\"\n\n   Resources:\n       + 9 created\n\n   Duration: 33s\n   ```\n\n5. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.execute-api.us-east-2.amazonaws.com/http-api\n\n   $ curl $(pulumi stack output endpoint)\n   Hello, Pulumi!\n   ```\n\n6. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigatewayv2-http-api.html","relUrl":"notes/aws-ts-apigatewayv2-http-api.html"},{"doc":"App","title":"App","hpath":"aws-ts-apigatewayv2-http-api.app","content":"## Imported Assets\n\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigatewayv2-http-api.app.html","relUrl":"notes/aws-ts-apigatewayv2-http-api.app.html"},{"doc":"Aws Ts Apigatewayv2 HTTP API Quickcreate","title":"Aws Ts Apigatewayv2 HTTP API Quickcreate","hpath":"aws-ts-apigatewayv2-http-api-quickcreate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS API Gateway V2 HTTP API Quickstart\n\nSet up a simple HTTP API using AWS API Gateway V2 \n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init http-api\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (http-api)\n   ...\n\n   Updating (http-api)\n\n       Type                             Name                                     Status\n   +   pulumi:pulumi:Stack              aws-ts-apigatewayv2-quickstart-http-api  created\n   +   ├─ aws:iam:Role                  lambdaRole                               created\n   +   ├─ aws:lambda:Function           lambdaFunction                           created\n   +   ├─ aws:iam:RolePolicyAttachment  lambdaRoleAttachment                     created\n   +   ├─ aws:apigatewayv2:Api          httpApiGateway                           created\n   +   └─ aws:lambda:Permission         lambdapermission                         created\n\n   Outputs:\n       endpoint: \"https://****.execute-api.us-east-2.amazonaws.com\"\n\n   Resources:\n       + 6 created\n\n   Duration: 22s\n   ```\n\n5. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.execute-api.us-east-2.amazonaws.com\n\n   $ curl $(pulumi stack output endpoint)\n   Hello, Pulumi!\n   ```\n\n6. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigatewayv2-http-api-quickcreate.html","relUrl":"notes/aws-ts-apigatewayv2-http-api-quickcreate.html"},{"doc":"App","title":"App","hpath":"aws-ts-apigatewayv2-http-api-quickcreate.app","content":"## Imported Assets\n\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigatewayv2-http-api-quickcreate.app.html","relUrl":"notes/aws-ts-apigatewayv2-http-api-quickcreate.app.html"},{"doc":"Aws Ts Apigateway","title":"Aws Ts Apigateway","hpath":"aws-ts-apigateway","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless REST API\n\nA simple REST API that counts the number of times a route has been hit. For a detailed walkthrough of this example, see the article [Create a Serverless REST API](https://www.pulumi.com/docs/tutorials/aws/rest-api/).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init count-api-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update of stack 'count-api-testing'\n   ...\n\n   Updating (count-api-testing):\n\n        Type                                Name                                 Status      \n    +   pulumi:pulumi:Stack                 aws-ts-apigateway-count-api-testing  created     \n    +   ├─ aws:apigateway:x:API             hello-world                          created     \n    +   │  ├─ aws:iam:Role                  hello-world4fcc7b60                  created     \n    +   │  ├─ aws:iam:RolePolicyAttachment  hello-world4fcc7b60-32be53a2         created     \n    +   │  ├─ aws:lambda:Function           hello-world4fcc7b60                  created     \n    +   │  ├─ aws:apigateway:RestApi        hello-world                          created     \n    +   │  ├─ aws:apigateway:Deployment     hello-world                          created     \n    +   │  ├─ aws:lambda:Permission         hello-world-a552609d                 created     \n    +   │  └─ aws:apigateway:Stage          hello-world                          created     \n    +   └─ aws:dynamodb:Table               counterTable                         created     \n\n   Outputs:\n       endpoint: \"https://***execute-api.us-east-2.amazonaws.com/stage/\"\n\n   Resources:\n       + 10 created\n\n   Duration: 24s\n   ```\n\n5. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.us-east-2.amazonaws.com/stage/\n\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"hello\",\"count\":1}\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"route\":\"hello\",\"count\":2}\n   $ curl $(pulumi stack output endpoint)/woohoo\n   {\"route\":\"woohoo\",\"count\":1}\n   ```\n\n6. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigateway.html","relUrl":"notes/aws-ts-apigateway.html"},{"doc":"Aws Ts Apigateway Auth0","title":"Aws Ts Apigateway Auth0","hpath":"aws-ts-apigateway-auth0","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Secure Serverless REST API Using Auth0\n\nA simple REST API that is protected by a custom AWS Lambda Authorizer. The Authorizer uses [Auth0](https://auth0.com/) to authorize requests.\n\nThis example is similar to Auth0's tutorial: [Secure AWS API Gateway Endpoints Using Custom Authorizers](https://auth0.com/docs/integrations/aws-api-gateway/custom-authorizers), but uses Pulumi to create the Serverless app and Custom Authorizer.\n\n## Set Up Auth0\n\nYou can follow the steps below or alternatively you can follow [Auth0's Part 1: Create an Auth0 API](https://auth0.com/docs/integrations/aws-api-gateway/custom-authorizers/part-1).\n\n1. [Sign up](https://auth0.com/signup) for an Auth0 account or login if you already have one.\n\n2. Click on `APIs` in the left-hand menu.\n\n3. Click `Create API`.\n\n   - Enter a name and Identifier for you New API.\n   - Select RS256 as the Signing Algorithm.\n   - Click `Create`.\n\n4. Under the `Quick Start` tab, the Node.js example will show you the values for `jwksUri`, `audience` and `issuer` you will need in the next section.\n\n## Deploying and Running the Program\n\n1. Create a new stack:\n\n   ```bash\n   pulumi stack init auth0-api-testing\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   pulumi config set aws:region us-east-2\n   ```\n\n3. Set up the Auth0 configuration values as secrets in Pulumi:\n\n   Run the following commands after replacing `<jwksUri>`, `<audience>` and `<issuer>` with the appropriate values.\n\n   ```bash\n   pulumi config set --secret jwksUri <jwksUri>\n   pulumi config set --secret audience <audience>\n   pulumi config set --secret issuer <issuer>\n   ```\n\n4. Restore NPM modules via `npm install` or `yarn install`.\n\n5. Run `pulumi up` to preview and deploy changes:\n\n```bash\n$ pulumi up\nPreviewing update (dev):\n\n...\n\nUpdating (dev):\n\n     Type                                Name                                         Status      Info\n +   pulumi:pulumi:Stack                 lambda-authorizer-dev                        created     1 message\n +   ├─ aws:apigateway:x:API             myapi                                        created\n +   │  ├─ aws:iam:Role                  myapi70a45a97                                created\n +   │  ├─ aws:iam:RolePolicyAttachment  myapi70a45a97-32be53a2                       created\n +   │  ├─ aws:lambda:Function           myapi70a45a97                                created\n +   │  ├─ aws:apigateway:RestApi        myapi                                        created\n +   │  ├─ aws:apigateway:Deployment     myapi                                        created\n +   │  ├─ aws:lambda:Permission         myapi-31a4e902                               created\n +   │  └─ aws:apigateway:Stage          myapi                                        created\n +   ├─ aws:iam:Role                     jwt-rsa-custom-authorizer                    created\n +   ├─ aws:iam:Role                     jwt-rsa-custom-authorizer-authorizer-role    created\n +   ├─ aws:iam:RolePolicyAttachment     jwt-rsa-custom-authorizer-32be53a2           created\n +   ├─ aws:lambda:Function              jwt-rsa-custom-authorizer                    created\n +   └─ aws:iam:RolePolicy               jwt-rsa-custom-authorizer-invocation-policy  created\n\nOutputs:\n    url: \"https://***.execute-api.us-east-2.amazonaws.com/stage/\"\n\nResources:\n    + 14 created\n\nDuration: 18s\n```\n\n## Testing Our API\n\nWe can now use cURL to test out our new endpoint. If we cURL without a token, we should get a 401 Unauthorized response.\n\n```bash\n$ curl $(pulumi stack output url)hello\n{\"message\":\"Unauthorized\"}\n```\n\nWe can curl our endpoint with an invalid token and should once again get a 401 Unauthorized response.\n\n```bash\n$ curl $(pulumi stack output url)hello -H \"Authorization: Bearer invalid\"\n{\"message\":\"Unauthorized\"}\n```\n\nFinally, we expect a 200 response when we obtain a token from Auth0 and use it to call our API. We can get a token by visiting the API Details page for our API and clicking the Test tab. Using the provided access token and the API a 200 response: Hello world!\n\n```bash\n$ curl $(pulumi stack output url)hello -H \"Authorization: Bearer <VALID_TOKEN>\"\n<h1>Hello world!</h1>\n```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-apigateway-auth0.html","relUrl":"notes/aws-ts-apigateway-auth0.html"},{"doc":"Aws Ts Airflow","title":"Aws Ts Airflow","hpath":"aws-ts-airflow","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# RDS Postgres and Containerized Airflow\n\nA Pulumi program to deploy an RDS Postgres instance and containerized Airflow.\n\n## Deploying and running the program\n\nFor more information on how to run this example, see: <https://www.pulumi.com/docs/> and <https://www.pulumi.com/docs/get-started/>\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init airflow\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-1\n   ```\n\n3. Set the desired RDS password with:\n\n   ```\n   $ pulumi config set --secret airflow:dbPassword DESIREDPASSWORD\n   ```\n\n4. Restore NPM modules via `yarn install`.\n\n5. Run `pulumi up` to preview and deploy changes.  After the preview is shown you will be\n   prompted if you want to continue or not.\n\n```\nPreviewing update of stack 'airflow'\nPreviewing changes:\n\n     Type                                           Name                              Plan       Info\n +   pulumi:pulumi:Stack                            airflow                           create\n...\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-airflow.html","relUrl":"notes/aws-ts-airflow.html"},{"doc":"Airflow Container","title":"Airflow Container","hpath":"aws-ts-airflow.airflow-container","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-airflow.airflow-container.html","relUrl":"notes/aws-ts-airflow.airflow-container.html"},{"doc":"Dags","title":"Dags","hpath":"aws-ts-airflow.airflow-container.dags","content":"## Imported Assets\n\n- [example.py](/assets/example.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-ts-airflow.airflow-container.dags.html","relUrl":"notes/aws-ts-airflow.airflow-container.dags.html"},{"doc":"Aws Stackreference Architecture","title":"Aws Stackreference Architecture","hpath":"aws-stackreference-architecture","content":"\n","url":"https://pulumi.dendron.so/notes/26830c48-6129-4986-bac1-dc4a23fcd5fa.html","relUrl":"notes/26830c48-6129-4986-bac1-dc4a23fcd5fa.html"},{"doc":"Networking","title":"Networking","hpath":"aws-stackreference-architecture.networking","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [tslint.json](/assets/tslint.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.networking.html","relUrl":"notes/aws-stackreference-architecture.networking.html"},{"doc":"Src","title":"Src","hpath":"aws-stackreference-architecture.networking.src","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n- [vpc.ts](/assets/vpc.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.networking.src.html","relUrl":"notes/aws-stackreference-architecture.networking.src.html"},{"doc":"Database","title":"Database","hpath":"aws-stackreference-architecture.database","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [tslint.json](/assets/tslint.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.database.html","relUrl":"notes/aws-stackreference-architecture.database.html"},{"doc":"Src","title":"Src","hpath":"aws-stackreference-architecture.database.src","content":"## Imported Assets\n\n- [database.ts](/assets/database.ts)\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.database.src.html","relUrl":"notes/aws-stackreference-architecture.database.src.html"},{"doc":"Application","title":"Application","hpath":"aws-stackreference-architecture.application","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n- [tslint.json](/assets/tslint.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.application.html","relUrl":"notes/aws-stackreference-architecture.application.html"},{"doc":"Src","title":"Src","hpath":"aws-stackreference-architecture.application.src","content":"## Imported Assets\n\n- [application.ts](/assets/application.ts)\n- [index.ts](/assets/index.ts)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.application.src.html","relUrl":"notes/aws-stackreference-architecture.application.src.html"},{"doc":"Backend","title":"Backend","hpath":"aws-stackreference-architecture.application.src.backend","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [env](/assets/env)\n- [helloworld.py](/assets/helloworld.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-stackreference-architecture.application.src.backend.html","relUrl":"notes/aws-stackreference-architecture.application.src.backend.html"},{"doc":"Aws Py WordPress Fargate Rds","title":"Aws Py WordPress Fargate Rds","hpath":"aws-py-wordpress-fargate-rds","content":"# WordPress Site in AWS Fargate with RDS DB Backend\n\nThis example serves a WordPress site in AWS ECS Fargate using an RDS MySQL Backend.\n\nIt leverages the following Pulumi concepts/constructs:\n\n- [Component Resources](https://www.pulumi.com/docs/intro/concepts/programming-model/#components): Allows one to create custom resources that encapsulate one's best practices. In this example, component resource is used to define a \"VPC\" custom resource, a \"Backend\" custom resource that sets up the RDS DB, and a \"Frontend\" resource that sets up the ECS cluster and load balancer and tasks.\n- [Other Providers](https://www.pulumi.com/docs/reference/pkg/): Beyond the providers for the various clouds and Kubernetes, etc, Pulumi allows one to create and manage non-cloud resources. In this case, the program uses the Random provider to create a random password if necessary.\n\nThis sample uses the following AWS products (and related Pulumi providers):\n\n- [Amazon VPC](https://aws.amazon.com/vpc): Used to set up a new virtual network in which the system is deployed.\n- [Amazon RDS](https://aws.amazon.com/rds): A managed DB service used to provide the MySQL backend for WordPress.\n- [Amazon ECS Fargate](https://aws.amazon.com/fargate): A container service used to run the WordPress frontend.\n\n## Getting Started\n\nThere are no required configuration parameters for this project since the code will use defaults or generate values as needed - see the beginning of `__main__.py` to see the defaults.\nHowever, you can override these defaults by using `pulumi config` to set the following values (e.g. `pulumi config set service_name my-wp-demo`).\n\n- `service_name` - This is used as a prefix for resources created by the Pulumi program.\n- `db_name` - The name of the MySQL DB created in RDS.\n- `db_user` - The user created with access to the MySQL DB.\n- `db_password` - The password for the DB user. Be sure to use `--secret` if creating this config value (e.g. `pulumi config set db_password --secret`).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init lamp-test\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes. After the preview is shown you will be\n   prompted if you want to continue or not. Note: If you set the `db_password` in the configuration as described above, you will not see the `RandomPassword` resource below.\n\n   ```bash\n   $ pulumi up\n    +   pulumi:pulumi:Stack                  lamp-rds-wordpress-testing        create\n    +   ├─ custom:resource:VPC               wp-example-net                    create\n    +   │  ├─ aws:ec2:Vpc                    wp-example-net-vpc                create\n    +   pulumi:pulumi:Stack                  lamp-rds-wordpress-testing        create.\n    +   pulumi:pulumi:Stack                  lamp-rds-wordpress-testing        create\n    +   │  ├─ aws:ec2:Subnet                 wp-example-net-subnet-us-west-2a  create\n    +   │  ├─ aws:ec2:Subnet                 wp-example-net-subnet-us-west-2b  create\n    +   │  ├─ aws:ec2:SecurityGroup          wp-example-net-rds-sg             create\n    +   │  ├─ aws:ec2:SecurityGroup          wp-example-net-fe-sg              create\n    +   │  ├─ aws:ec2:RouteTableAssociation  vpc-route-table-assoc-us-west-2a  create\n    +   │  └─ aws:ec2:RouteTableAssociation  vpc-route-table-assoc-us-west-2b  create\n    +   ├─ random:index:RandomPassword       db_password                       create\n    +   ├─ custom:resource:Backend           wp-example-be                     create\n    +   │  ├─ aws:rds:SubnetGroup            wp-example-be-sng                 create\n    +   │  └─ aws:rds:Instance               wp-example-be-rds                 create\n    +   └─ custom:resource:Frontend          wp-example-fe                     create\n    +      ├─ aws:ecs:Cluster                wp-example-fe-ecs                 create\n    +      ├─ aws:iam:Role                   wp-example-fe-task-role           create\n    +      ├─ aws:lb:TargetGroup             wp-example-fe-app-tg              create\n    +      ├─ aws:iam:RolePolicyAttachment   wp-example-fe-task-policy         create\n    +      ├─ aws:lb:LoadBalancer            wp-example-fe-alb                 create\n    +      ├─ aws:lb:Listener                wp-example-fe-listener            create\n    +      └─ aws:ecs:Service                wp-example-fe-app-svc             create\n\n   ```\n\n4. The program outputs the following values:\n\n- `DB Endpoint`: This is the RDS DB endpoint. By default, the DB is deployed to disallow public access. This can be overriden in the resource declaration for the backend.\n- `DB Password`: This is managed as a secret. To see the value, you can use `pulumi stack output --show-secrets`\n- `DB User Name`: The user name for access the DB.\n- `ECS Cluster Name`: The name of the ECS cluster created by the stack.\n- `Web Service URL`: This is a link to the load balancer fronting the WordPress container. Note: It may take a few minutes for AWS to complete deploying the service and so you may see a 503 error initially.\n\n1. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n## Troubleshooting\n\n### 503 Error for the Web Service\n\nAWS can take a few minutes to complete deploying the WordPress container and connect the load balancer to the service. So you may see a 503 error for a few minutes right after launching the stack. You can see the status of the service by looking at the cluster in AWS.\n\n## Deployment Speed\n\nSince the stack creates an RDS instance, ECS cluster, load balancer, ECS service, as well as other elements, the stack can take about 4-5 minutes to launch and become ready.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [backend.py](/assets/backend.py)\n- [frontend.py](/assets/frontend.py)\n- [network.py](/assets/network.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-wordpress-fargate-rds.html","relUrl":"notes/aws-py-wordpress-fargate-rds.html"},{"doc":"Aws Py Webserver","title":"Aws Py Webserver","hpath":"aws-py-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Amazon EC2\n\nAn example based on the Amazon sample at:\n<http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/deploying.applications.html>. The example deploys an EC2 instance and opens port 80. \n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init python-webserver-testing\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing stack 'python-webserver-testing'\n   Previewing changes:\n   ...\n\n   Do you want to proceed? yes\n   Updating stack 'python-webserver-testing'\n   Performing changes:\n\n   #: Resource Type          Name                                   Status     Extra Info\n   1: pulumi:pulumi:Stack    webserver-py-python-webserver-testing  + created  \n   2: aws:ec2:SecurityGroup  web-secgrp                             + created  \n   3: aws:ec2:Instance       web-server-www                         + created  \n\n   info: 3 changes performed:\n       + 3 resources created\n   Update duration: 26.470339302s\n\n   Permalink: https://pulumi.com/lindydonna/examples/webserver-py/python-webserver-testing/updates/1\n   ```\n\n4. View the host name and IP address of the instance via `stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT                                           VALUE\n       public_dns                                       ec2-34-217-176-141.us-west-2.compute.amazonaws.com\n       public_ip                                        34.217.176.141\n   ```\n\n5. Verify that the EC2 instance exists, by either using the AWS Console or running `aws ec2 describe-instances`.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-webserver.html","relUrl":"notes/aws-py-webserver.html"},{"doc":"Aws Py Voting App","title":"Aws Py Voting App","hpath":"aws-py-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Voting app Using Redis and Flask\n\nA simple voting app that uses Redis for a data store and a Python Flask app for the frontend. The example has been ported from <https://github.com/Azure-Samples/azure-voting-app-redis>.\n\nThe example shows how easy it is to deploy containers into production and to connect them to one another. Since the example defines a custom container, Pulumi does the following:\n\n- Builds the Docker image\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the image to the ECR instance\n- Creates a new ECS task definition, pointing to the ECR image definition\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. [Install Docker](https://docs.docker.com/engine/installation/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-py-voting-app\n   ```\n\n2. Set the AWS region and Redis password:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set redis-password <PASSWORD> --secret\n   ```\n\n3. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-py-voting-app):\n       Type                                  Name                            Status      Info\n   +   pulumi:pulumi:Stack                   webserver-py-aws-py-voting-app  created     \n   +   ├─ docker:image:Image                 flask-dockerimage               created     \n   +   ├─ aws:ec2:Vpc                        app-vpc                         created     \n   +   ├─ aws:ecs:Cluster                    app-cluster                     created     \n   +   ├─ aws:iam:Role                       app-exec-role                   created     \n   +   ├─ aws:iam:Role                       app-task-role                   created     \n   +   ├─ aws:ecr:Repository                 app-ecr-repo                    created     \n   +   ├─ aws:ecr:LifecyclePolicy            app-lifecycle-policy            created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-exec-policy                 created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-access-policy               created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-lambda-policy               created     \n   +   ├─ aws:ecs:TaskDefinition             redis-task-definition           created     \n   +   ├─ aws:ec2:InternetGateway            app-gateway                     created     \n   +   ├─ aws:ec2:SecurityGroup              security-group                  created     \n   +   ├─ aws:ec2:Subnet                     app-vpc-subnet                  created     \n   +   ├─ aws:lb:TargetGroup                 redis-targetgroup               created     \n   +   ├─ aws:lb:TargetGroup                 flask-targetgroup               created     \n   +   ├─ aws:ec2:RouteTable                 app-routetable                  created     \n   +   ├─ aws:lb:LoadBalancer                redis-balancer                  created     \n   +   ├─ aws:lb:LoadBalancer                flask-balancer                  created     \n   +   ├─ aws:ec2:MainRouteTableAssociation  app_routetable_association      created     \n   +   ├─ aws:lb:Listener                    flask-listener                  created     \n   +   ├─ aws:lb:Listener                    redis-listener                  created     \n   +   ├─ aws:ecs:TaskDefinition             flask-task-definition           created     \n   +   ├─ aws:ecs:Service                    redis-service                   created     \n   +   └─ aws:ecs:Service                    flask-service                   created     \n\n   Outputs:\n       app-url: \"flask-balancer-3987b84-b596c9ee2027f152.elb.us-west-2.amazonaws.com\"\n\n   Resources:\n       + 26 created\n\n   Duration: 3m10s\n   ```\n\n4. View the DNS address of the instance via `stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT   VALUE\n       app-url  flask-balancer-3987b84-b596c9ee2027f152.elb.us-west-2.amazonaws.com\n\n   ```\n\n5. Verify that the EC2 instance exists, by connecting to it in a browser window.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-voting-app.html","relUrl":"notes/aws-py-voting-app.html"},{"doc":"Frontend","title":"Frontend","hpath":"aws-py-voting-app.frontend","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [LICENSE](/assets/license)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-voting-app.frontend.html","relUrl":"notes/aws-py-voting-app.frontend.html"},{"doc":"App","title":"App","hpath":"aws-py-voting-app.frontend.app","content":"## Imported Assets\n\n- [config_file.cfg](/assets/config_file.cfg)\n- [main.py](/assets/main.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-voting-app.frontend.app.html","relUrl":"notes/aws-py-voting-app.frontend.app.html"},{"doc":"Templates","title":"Templates","hpath":"aws-py-voting-app.frontend.app.templates","content":"## Imported Assets\n\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-voting-app.frontend.app.templates.html","relUrl":"notes/aws-py-voting-app.frontend.app.templates.html"},{"doc":"Static","title":"Static","hpath":"aws-py-voting-app.frontend.app.static","content":"## Imported Assets\n\n- [default.css](/assets/default.css)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-voting-app.frontend.app.static.html","relUrl":"notes/aws-py-voting-app.frontend.app.static.html"},{"doc":"Aws Py Stepfunctions","title":"Aws Py Stepfunctions","hpath":"aws-py-stepfunctions","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Step Functions\n\nA basic example that demonstrates using AWS Step Functions with a Lambda function, written in Python.\n\n```bash\n# Create and configure a new stack\npulumi stack init stepfunctions-dev\npulumi config set aws:region us-east-2\n\n# Preview and run the deployment\npulumi up\n\n# Start execution using the AWS CLI (or from the console at https://console.aws.amazon.com/states)\naws stepfunctions start-execution --state-machine-arn $(pulumi stack output state_machine_arn)\n\n# Remove the app and its stack\npulumi destroy && pulumi stack rm -y\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [iam.py](/assets/iam.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-stepfunctions.html","relUrl":"notes/aws-py-stepfunctions.html"},{"doc":"Step_hello","title":"Step_hello","hpath":"aws-py-stepfunctions.step_hello","content":"## Imported Assets\n\n- [hello.py](/assets/hello.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-stepfunctions.step_hello.html","relUrl":"notes/aws-py-stepfunctions.step_hello.html"},{"doc":"Aws Py Static Website","title":"Aws Py Static Website","hpath":"aws-py-static-website","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Secure Static Website Using Amazon S3, CloudFront, Route53, and Certificate Manager\n\nThis example serves a static website using Python and AWS.\n\nThis sample uses the following AWS products:\n\n- [Amazon S3](https://aws.amazon.com/s3/) is used to store the website's contents.\n- [Amazon CloudFront](https://aws.amazon.com/cloudfront/) is the CDN serving content.\n- [Amazon Route53](https://aws.amazon.com/route53/) is used to set up the DNS for the website.\n- [Amazon Certificate Manager](https://aws.amazon.com/certificate-manager/) is used for securing things via HTTPS.\n\n## Getting Started\n\nConfigure the Pulumi program. There are several configuration settings that need to be\nset:\n\n- `targetDomain` - The domain to serve the website at (e.g. [www.example.com](http://www.example.com)). It is assumed that\n  the parent domain (example.com) is a Route53 Hosted Zone in the AWS account you are running the\n  Pulumi program in.\n- `pathToWebsiteContents` - Directory of the website's contents. e.g. the `./www` folder.\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-testing\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.  After the preview is shown you will be\n   prompted if you want to continue or not.\n\n   ```bash\n   $ pulumi up\n   Previewing update (example):\n       Type                              Name                                      Plan\n   +   pulumi:pulumi:Stack               static-website-example                    create\n   +   ├─ pulumi:providers:aws           east                                      create\n   +   ├─ aws:s3:Bucket                  requestLogs                               create\n   +   ├─ aws:s3:Bucket                  contentBucket                             create\n   +   │  ├─ aws:s3:BucketObject         404.html                                  create\n   +   │  └─ aws:s3:BucketObject         index.html                                create\n   +   ├─ aws:acm:Certificate            certificate                               create\n   +   ├─ aws:route53:Record             ***-validation                            create\n   +   ├─ aws:acm:CertificateValidation  certificateValidation                     create\n   +   ├─ aws:cloudfront:Distribution    cdn                                       create\n   +   └─ aws:route53:Record             ***                                       create\n   ```\n\n4. To see the resources that were created, run `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (4):\n       OUTPUT                           VALUE\n       cloudfront_domain                ***.cloudfront.net\n       content_bucket_url               s3://***\n       content_bucket_website_endpoint  ***.s3-website-us-west-2.amazonaws.com\n       target_domain_endpoint           https://***/\n   ```\n\n5. To see that the S3 objects exist, you can either use the AWS Console or the AWS CLI:\n\n   ```bash\n   $ aws s3 ls $(pulumi stack output content_bucket_url)\n   2020-02-21 16:58:48        262 404.html\n   2020-02-21 16:58:48        394 index.html\n   ```\n\n6. Open a browser to the target domain endpoint from above to see your beautiful static website. (Since we don't wait for the CloudFront distribution to completely sync, you may have to wait a few minutes)\n\n7. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n## Troubleshooting\n\n### Scary HTTPS Warning\n\nWhen you create an S3 bucket and CloudFront distribution shortly after one another, you'll see\nwhat looks to be HTTPS configuration issues. This has to do with the replication delay between\nS3, CloudFront, and the world-wide DNS system.\n\nJust wait 15 minutes or so, and the error will go away. Be sure to refresh in an incognito\nwindow, which will avoid any local caches your browser might have.\n\n### \"PreconditionFailed: The request failed because it didn't meet the preconditions\"\n\nSometimes updating the CloudFront distribution will fail with:\n\n```text\n\"PreconditionFailed: The request failed because it didn't meet the preconditions in one or more\nrequest-header fields.\"\n```\n\nThis is caused by CloudFront confirming the ETag of the resource before applying any updates.\nETag is essentially a \"version\", and AWS is rejecting any requests that are trying to update\nany version but the \"latest\".\n\nThis error will occur when the state of the ETag gets out of sync between the Pulumi Service\nand AWS. (Which can happen when inspecting the CloudFront distribution in the AWS console.)\n\nYou can fix this by running `pulumi refresh` to pickup the newer ETag values.\n\n## Deployment Speed\n\nThis example creates an `aws.S3.BucketObject` for every file served from the website. When deploying\nlarge websites, that can lead to very long updates as every individual file is checked for any\nchanges.\n\nIt may be more efficient to not manage individual files using Pulumi and instead just use the\nAWS CLI to sync local files with the S3 bucket directly.\n\nRemove the call to `crawlDirectory` and run `pulumi up`. Pulumi will then delete the contents\nof the S3 bucket, and no longer manage their contents. Then do a bulk upload outside of Pulumi\nusing the AWS CLI.\n\n```bash\naws s3 sync ./www/ s3://example-bucket/\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-static-website.html","relUrl":"notes/aws-py-static-website.html"},{"doc":"Www","title":"Www","hpath":"aws-py-static-website.www","content":"## Imported Assets\n\n- [404.html](/assets/404.html)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-static-website.www.html","relUrl":"notes/aws-py-static-website.www.html"},{"doc":"Aws Py Stackreference","title":"Aws Py Stackreference","hpath":"aws-py-stackreference","content":"\n","url":"https://pulumi.dendron.so/notes/1653df69-8325-43ca-9f5e-a4225bd4ee47.html","relUrl":"notes/1653df69-8325-43ca-9f5e-a4225bd4ee47.html"},{"doc":"Team","title":"Team","hpath":"aws-py-stackreference.team","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-stackreference.team.html","relUrl":"notes/aws-py-stackreference.team.html"},{"doc":"Department","title":"Department","hpath":"aws-py-stackreference.department","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-stackreference.department.html","relUrl":"notes/aws-py-stackreference.department.html"},{"doc":"Company","title":"Company","hpath":"aws-py-stackreference.company","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-stackreference.company.html","relUrl":"notes/aws-py-stackreference.company.html"},{"doc":"Aws Py Serverless Raw","title":"Aws Py Serverless Raw","hpath":"aws-py-serverless-raw","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Serverless C# App\n\nThis example deploys a complete serverless C# application using raw `aws.apigateway.RestApi`, `aws.lambda_.Function` and\n`aws.dynamodb.Table` resources from `pulumi_aws`.  Although this doesn't feature any of the higher-level abstractions\nfrom the `pulumi_cloud` package, it demonstrates that you can program the raw resources directly available in AWS\nto accomplish all of the same things this higher-level package offers.\n\nThe deployed Lambda function is a simple C# application, highlighting the ability to manage existing application code\nin a Pulumi application, even if your Pulumi code is written in a different language like JavaScript or Python.\n\nThe Lambda function is a C# application using .NET Core 3.1 (a similar approach works for any other language supported by\nAWS Lambda).\n\n## Deploying and running the Pulumi App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Build the C# application.\n\n   ```bash\n   dotnet publish app\n   ```\n\n3. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-2\n   ```\n\n4. Optionally, set AWS Lambda provisioned concurrency:\n\n   ```bash\n   $ pulumi config set provisionedConcurrency 1\n   ```\n\n5. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 10 created\n   Duration: 1m 20s\n   ```\n\n6. Check the deployed GraphQL endpoint:\n\n   ```\n   $ curl $(pulumi stack output endpoint)/hello\n   {\"Path\":\"/hello\",\"Count\":0}\n   ```\n\n7. See the logs\n\n   ```\n   $ pulumi logs -f\n   2018-03-21T18:24:52.670-07:00[    mylambda-d719650] START RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7 Version: $LATEST\n   2018-03-21T18:24:56.171-07:00[    mylambda-d719650] Getting count for '/hello'\n   2018-03-21T18:25:01.327-07:00[    mylambda-d719650] Got count 0 for '/hello'\n   2018-03-21T18:25:02.267-07:00[    mylambda-d719650] END RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7\n   2018-03-21T18:25:02.267-07:00[    mylambda-d719650] REPORT RequestId: d1e95652-2d6f-11e8-93f6-2921c8ae65e7   Duration: 9540.93 ms    Billed Duration: 9600 ms        Memory Size: 128 MB     Max Memory Used: 37 MB\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-serverless-raw.html","relUrl":"notes/aws-py-serverless-raw.html"},{"doc":"App","title":"App","hpath":"aws-py-serverless-raw.app","content":"## Imported Assets\n\n- [Functions.cs](/assets/functions.cs)\n- [app.csproj](/assets/app.csproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-serverless-raw.app.html","relUrl":"notes/aws-py-serverless-raw.app.html"},{"doc":"Aws Py S3 Folder","title":"Aws Py S3 Folder","hpath":"aws-py-s3-folder","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Host a Static Website on Amazon S3\n\nA static website that uses [S3's website support](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).\nFor a detailed walkthrough of this example, see the tutorial [Static Website on AWS S3](https://www.pulumi.com/docs/tutorials/aws/s3-website/).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-testing\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.  After the preview is shown you will be\n   prompted if you want to continue or not.\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n\n       Type                    Name                  Plan       \n   +   pulumi:pulumi:Stack     aws-py-s3-folder-dev  create     \n   +   ├─ aws:s3:Bucket        s3-website-bucket     create     \n   +   ├─ aws:s3:BucketObject  index.html            create     \n   +   ├─ aws:s3:BucketObject  python.png            create     \n   +   ├─ aws:s3:BucketObject  favicon.png           create     \n   +   └─ aws:s3:BucketPolicy  bucket-policy         create     \n\n   Resources:\n       + 6 to create\n\n   Do you want to perform this update?\n   > yes\n     no\n     details\n   ```\n\n4. To see the resources that were created, run `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT                                           VALUE\n       bucket_name                                      s3-website-bucket-***\n       website_url                                      ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n5. To see that the S3 objects exist, you can either use the AWS Console or the AWS CLI:\n\n   ```bash\n   $ aws s3 ls $(pulumi stack output bucket_name)\n   2018-04-17 15:40:47      13731 favicon.png\n   2018-04-17 15:40:48        249 index.html\n   ```\n\n6. Open the site URL in a browser to see both the rendered HTML, the favicon, and Python splash image:\n\n   ```bash\n   $ pulumi stack output website_url\n   ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n7. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-s3-folder.html","relUrl":"notes/aws-py-s3-folder.html"},{"doc":"Www","title":"Www","hpath":"aws-py-s3-folder.www","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n- [python.png](/assets/python.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-s3-folder.www.html","relUrl":"notes/aws-py-s3-folder.www.html"},{"doc":"Aws Py Resources","title":"Aws Py Resources","hpath":"aws-py-resources","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Resources\n\nA Pulumi program that demonstrates creating various AWS resources in Python\n\n```bash\n# Create and configure a new stack\n$ pulumi stack init dev\n$ pulumi config set aws:region us-east-2\n\n# Preview and run the deployment\n$ pulumi up\n\n# Remove the app\n$ pulumi destroy\n$ pulumi stack rm\n```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-resources.html","relUrl":"notes/aws-py-resources.html"},{"doc":"Aws Py Fargate","title":"Aws Py Fargate","hpath":"aws-py-fargate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# NGINX on AWS ECS Fargate using Python\n\nThis example shows authoring Infrastructure as Code in Python. It\nprovisions a full [Amazon Elastic Container Service (ECS) \"Fargate\"](https://aws.amazon.com/ecs) cluster and\nrelated infrastructure, running a load-balanced NGINX web server accessible over the Internet on port 80.\nThis example is inspired by [Docker's Getting Started Tutorial](https://docs.docker.com/get-started/).\n\n## Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n\n## Running the Example\n\nClone [the examples repo](https://github.com/pulumi/examples/tree/master/aws-py-fargate) and `cd` into it.\n\nNext, to deploy the application and its infrastructure, follow these steps:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Deploy everything with a single `pulumi up` command. This will show you a preview of changes first, which\n   includes all of the required AWS resources (clusters, services, and the like). Don't worry if it's more than\n   you expected -- this is one of the benefits of Pulumi, it configures everything so that so you don't need to!\n\n   ```bash\n   $ pulumi up\n   ```\n\n    After being prompted and selecting \"yes\", your deployment will begin. It'll complete in a few minutes:\n\n   ```bash\n   Updating (dev):\n        Type                             Name                Status\n    +   pulumi:pulumi:Stack              aws-py-fargate-dev  created\n    +   ├─ aws:ecs:Cluster               cluster             created\n    +   ├─ aws:ec2:SecurityGroup         web-secgrp          created\n    +   ├─ aws:iam:Role                  task-exec-role      created\n    +   ├─ aws:lb:TargetGroup            app-tg              created\n    +   ├─ aws:ecs:TaskDefinition        app-task            created\n    +   ├─ aws:iam:RolePolicyAttachment  task-exec-policy    created\n    +   ├─ aws:lb:LoadBalancer           app-lb              created\n    +   ├─ aws:lb:Listener               web                 created\n    +   └─ aws:ecs:Service               app-svc             created\n\n   Outputs:\n       url: \"app-lb-ad43707-1433933240.us-west-2.elb.amazonaws.com\"\n\n   Resources:\n       + 10 created\n\n   Duration: 2m56s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-python-fargate/dev/updates/1\n   ```\n\n   Notice that the automatically assigned load-balancer URL is printed as a stack output.\n\n4. At this point, your app is running -- let's curl it. The CLI makes it easy to grab the URL:\n\n   ```bash\n   $ curl http://$(pulumi stack output url)\n   <!DOCTYPE html>\n   <html>\n   <head>\n   <title>Welcome to nginx!</title>\n   <style>\n       body {\n           width: 35em;\n           margin: 0 auto;\n           font-family: Tahoma, Verdana, Arial, sans-serif;\n       }\n   </style>\n   </head>\n   <body>\n   <h1>Welcome to nginx!</h1>\n   <p>If you see this page, the nginx web server is successfully installed and\n   working. Further configuration is required.</p>\n\n   <p>For online documentation and support please refer to\n   <a href=\"http://nginx.org/\">nginx.org</a>.<br/>\n   Commercial support is available at\n   <a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n   <p><em>Thank you for using nginx.</em></p>\n   </body>\n   </html>\n   ```\n\n**Please Note**: It may take a few minutes for the app to start up. Until that point, you may receive a 503 error response code.\n\n1. Try making some changes, and rerunning `pulumi up`. For example, let's scale up to 3 instances:\n\n   Running `pulumi up` will show you the delta and then, after confirming, will deploy just those changes:\n\n   ```bash\n   $ pulumi up\n   ```\n\n   Notice that `pulumi up` redeploys just the parts of the application/infrastructure that you've edited.\n\n   ```bash\n       Updating (dev):\n\n        Type                 Name                Status      Info\n        pulumi:pulumi:Stack  aws-py-fargate-dev\n    ~   └─ aws:ecs:Service   app-svc             updated     [diff: ~desiredCount]\n\n   Outputs:\n       url: \"app-lb-ad43707-1433933240.us-west-2.elb.amazonaws.com\"\n\n   Resources:\n       ~ 1 updated\n       9 unchanged\n\n   Duration: 14s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-python-fargate/dev/updates/2\n   ```\n\n2. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-fargate.html","relUrl":"notes/aws-py-fargate.html"},{"doc":"Aws Py Eks","title":"Aws Py Eks","hpath":"aws-py-eks","content":"# Amazon EKS Cluster\n\nThis example deploys an EKS Kubernetes cluster inside a AWS VPC with proper NodeGroup and Networking Configured\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. _Optional for K8 Auth_ [Install `iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init python-eks-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n       Previewing stack 'python-eks-testing'\n       Previewing changes:\n       ...\n\n       Do you want to perform this update? yes\n       Updating (python-eks-testing):\n\n           Type                              Name                                Status\n       +   pulumi:pulumi:Stack               aws-py-eks-python-eks-testing       created\n       +   ├─ aws:iam:Role                   ec2-nodegroup-iam-role              created\n       +   ├─ aws:iam:Role                   eks-iam-role                        created\n       +   ├─ aws:ec2:Vpc                    eks-vpc                             created\n       +   ├─ aws:iam:RolePolicyAttachment   eks-workernode-policy-attachment    created\n       +   ├─ aws:iam:RolePolicyAttachment   eks-cni-policy-attachment           created\n       +   ├─ aws:iam:RolePolicyAttachment   ec2-container-ro-policy-attachment  created\n       +   ├─ aws:iam:RolePolicyAttachment   eks-service-policy-attachment       created\n       +   ├─ aws:iam:RolePolicyAttachment   eks-cluster-policy-attachment       created\n       +   ├─ aws:ec2:InternetGateway        vpc-ig                              created\n       +   ├─ aws:ec2:Subnet                 vpc-sn-1                            created\n       +   ├─ aws:ec2:Subnet                 vpc-sn-2                            created\n       +   ├─ aws:ec2:SecurityGroup          eks-cluster-sg                      created\n       +   ├─ aws:ec2:RouteTable             vpc-route-table                     created\n       +   ├─ aws:eks:Cluster                eks-cluster                         created\n       +   ├─ aws:ec2:RouteTableAssociation  vpc-1-route-table-assoc             created\n       +   ├─ aws:ec2:RouteTableAssociation  vpc-2-route-table-assoc             created\n       +   └─ aws:eks:NodeGroup              eks-node-group                      created\n\n       Outputs:\n           cluster-name: \"eks-cluster-96b87e8\"\n\n       Resources:\n           + 18 created\n\n       Duration: 14m15s\n\n   ```\n\n4. View the cluster name via `stack output`:\n\n   ```\n   $ pulumi stack output\n       Current stack outputs (1):\n       OUTPUT                   VALUE\n       cluster-name  eks-cluster-96b87e8\n   ```\n\n5. Verify that the EKS cluster exists, by either using the AWS Console or running `aws eks list-clusters`.\n\n6. Update your KubeConfig, Authenticate to your Kubernetes Cluster and verify you have API access and nodes running.\n\n```\n$ aws eks --region us-east-2 update-kubeconfig --name $(pulumi stack output cluster-name)\n\n    Added new context arn:aws:eks:us-east-2:account:cluster/eks-cluster-96b87e8\n```\n\n```\n$ kubectl get nodes\n\n    NAME                                         STATUS   ROLES    AGE   VERSION\n    ip-10-100-0-182.us-east-2.compute.internal   Ready    <none>   10m   v1.14.7-eks-1861c5\n    ip-10-100-1-174.us-east-2.compute.internal   Ready    <none>   10m   v1.14.7-eks-1861c5\n```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [iam.py](/assets/iam.py)\n- [requirements.txt](/assets/requirements.txt)\n- [utils.py](/assets/utils.py)\n- [vpc.py](/assets/vpc.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-eks.html","relUrl":"notes/aws-py-eks.html"},{"doc":"Aws Py Ecs Instances Autoapi","title":"Aws Py Ecs Instances Autoapi","hpath":"aws-py-ecs-instances-autoapi","content":"\n","url":"https://pulumi.dendron.so/notes/a99ccc24-99d8-473a-8088-f1c7cca1c846.html","relUrl":"notes/a99ccc24-99d8-473a-8088-f1c7cca1c846.html"},{"doc":"Py Ecs Instance","title":"Py Ecs Instance","hpath":"aws-py-ecs-instances-autoapi.py-ecs-instance","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-ecs-instances-autoapi.py-ecs-instance.html","relUrl":"notes/aws-py-ecs-instances-autoapi.py-ecs-instance.html"},{"doc":"Automation","title":"Automation","hpath":"aws-py-ecs-instances-autoapi.automation","content":"## Imported Assets\n\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-ecs-instances-autoapi.automation.html","relUrl":"notes/aws-py-ecs-instances-autoapi.automation.html"},{"doc":"Aws Py Ec2 Provisioners","title":"Aws Py Ec2 Provisioners","hpath":"aws-py-ec2-provisioners","content":"# AWS WebServer with Manual Provisioning (in Python)\n\nThis demonstrates using Pulumi dynamic providers to accomplish post-provisioning configuration steps.\n\nUsing these building blocks, one can accomplish much of the same as Terraform provisioners.\n\n<https://github.com/pulumi/pulumi/issues/1691> tracks designing and developing a complete replacement for provisioners.\n\n## Running the Example\n\nFirst, create a stack, using `pulumi stack init`.\n\nNext, generate an OpenSSH keypair for use with your server - as per the AWS [Requirements][1]\n\n```\n$ ssh-keygen -t rsa -f rsa -b 4096 -m PEM\n```\n\nThis will output two files, `rsa` and `rsa.pub`, in the current directory. Be sure not to commit these files!\n\nWe then need to configure our stack so that the public key is used by our EC2 instance, and the private key used\nfor subsequent SCP and SSH steps that will configure our server after it is stood up.\n\n```\n$ cat rsa.pub | pulumi config set publicKey --\n$ cat rsa | pulumi config set privateKey --secret --\n```\n\nIf your key is protected by a passphrase, add that too:\n\n```\n$ pulumi config set privateKeyPassphrase --secret [yourPassphraseHere]\n```\n\nNotice that we've used `--secret` for both `privateKey` and `privateKeyPassphrase`. This ensures their are\nstored in encrypted form in the Pulumi secrets system.\n\nAlso set your desired AWS region:\n\n```\n$ pulumi config set aws:region us-west-2\n```\n\nFrom there, you can run `pulumi up` and all resources will be provisioned and configured.\n\n[1]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [myapp.conf](/assets/myapp.conf)\n- [provisioners.py](/assets/provisioners.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-ec2-provisioners.html","relUrl":"notes/aws-py-ec2-provisioners.html"},{"doc":"Aws Py Dynamicresource","title":"Aws Py Dynamicresource","hpath":"aws-py-dynamicresource","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Pulumi Python Dynamic Resource demonstration\n\nA simple example demonstrating how to write Dynamic Providers using Pulumi.\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-py-dynamicresource\n   ```\n\n2. Set the AWS region and the names and passwords for admin and user:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set sql-admin-name <NAME>\n   $ pulumi config set sql-admin-password <PASSWORD> --secret\n   $ pulumi config set sql-user-name <NAME>\n   $ pulumi config set sql-user-password <PASSWORD> --secret\n   ```\n\n3. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-py-dynamicresource):\n       Type                                  Name                                           Status      \n   +   pulumi:pulumi:Stack                   aws-py-dynamicresource-aws-py-dynamicresource  created     \n   +   ├─ aws:ec2:Vpc                        app-vpc                                        created     \n   +   ├─ aws:ec2:InternetGateway            app-gateway                                    created     \n   +   ├─ aws:ec2:SecurityGroup              security-group                                 created     \n   +   ├─ aws:ec2:Subnet                     app-vpc-subnet                                 created     \n   +   ├─ aws:ec2:Subnet                     extra-rds-subnet                               created     \n   +   ├─ aws:ec2:RouteTable                 app-routetable                                 created     \n   +   ├─ aws:rds:SubnetGroup                app-database-subnetgroup                       created     \n   +   ├─ aws:ec2:MainRouteTableAssociation  app_routetable_association                     created     \n   +   ├─ aws:rds:Instance                   mysql-server                                   created     \n   +   ├─ pulumi:providers:mysql             mysql-provider                                 created     \n   +   ├─ mysql:index:Database               mysql-database                                 created     \n   +   ├─ mysql:index:User                   mysql-standard-user                            created     \n   +   ├─ mysql:index:Grant                  mysql-access-grant                             created     \n   +   └─ pulumi-python:dynamic:Resource     mysql_votes_table                              created     \n\n   Outputs:\n       dynamic-resource-id: \"schema-44462d37c8e04c18be08cbf05670a328\"\n\n   Resources:\n       + 15 created\n\n   Duration: 3m31s\n   ```\n\n4. View the ID of the dynamic resource via `stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT               VALUE\n       dynamic-resource-id  schema-44462d37c8e04c18be08cbf05670a328\n   ```\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [mysql_dynamic_provider.py](/assets/mysql_dynamic_provider.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-dynamicresource.html","relUrl":"notes/aws-py-dynamicresource.html"},{"doc":"Aws Py Assume Role","title":"Aws Py Assume Role","hpath":"aws-py-assume-role","content":"\n","url":"https://pulumi.dendron.so/notes/a79e1b0c-aca6-4a38-8d6c-70eaa24c4f97.html","relUrl":"notes/a79e1b0c-aca6-4a38-8d6c-70eaa24c4f97.html"},{"doc":"Create Role","title":"Create Role","hpath":"aws-py-assume-role.create-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-assume-role.create-role.html","relUrl":"notes/aws-py-assume-role.create-role.html"},{"doc":"Assume Role","title":"Assume Role","hpath":"aws-py-assume-role.assume-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-assume-role.assume-role.html","relUrl":"notes/aws-py-assume-role.assume-role.html"},{"doc":"Aws Py Appsync","title":"Aws Py Appsync","hpath":"aws-py-appsync","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# GraphQL Endpoint in AWS AppSync\n\nThis example shows how to setup a basic GraphQL endpoint in AWS AppSync. The endpoint contains one query and one mutation that get and put items to a Dynamo DB table.\n\n## Deploying and running the Pulumi App\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 10 created\n   Duration: 20s\n   ```\n\n4. Check the deployed GraphQL endpoint:\n\n   ```bash\n   $ pulumi stack output endpoint\n   https://***.appsync-api.us-east-2.amazonaws.com/graphql\n   $ pulumi stack output key\n   ***sensitivekey***\n   $ curl -XPOST -H \"Content-Type:application/graphql\" -H \"x-api-key:$(pulumi stack output key)\" -d '{ \"query\": \"mutation AddTenant { addTenant(id: \\\"123\\\", name: \\\"FirstCorp\\\") { id name } }\" }' \"$(pulumi stack output endpoint)\" \n   {\n       \"data\": {\n           \"addTenant\": {\n               \"id\": \"123\",\n               \"name\": \"FirstCorp\"\n           }\n       }\n   }\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-appsync.html","relUrl":"notes/aws-py-appsync.html"},{"doc":"Aws Py Apigatewayv2 HTTP API Quickcreate","title":"Aws Py Apigatewayv2 HTTP API Quickcreate","hpath":"aws-py-apigatewayv2-http-api-quickcreate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS API Gateway V2 HTTP API Quickstart\n\nSet up a simple HTTP API using AWS API Gateway V2. The API executes a simple Lambda function \nfound in `/app/index.js`.\n\n## Prerequisites\n\n1. Install [Pulumi](https://www.pulumi.com/docs/get-started/install/).\n2. Configure [Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/).\n3. Install [Python](https://www.pulumi.com/docs/intro/languages/python).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init http-api\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-east-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing update (http-api)\n   ...\n\n   Updating (http-api)\n\n       Type                             Name                                     Status\n   +   pulumi:pulumi:Stack              aws-py-apigatewayv2-quickstart-http-api  created\n   +   ├─ aws:iam:Role                  lambdaRole                               created\n   +   ├─ aws:lambda:Function           lambdaFunction                           created\n   +   ├─ aws:iam:RolePolicyAttachment  lambdaRoleAttachment                     created\n   +   ├─ aws:apigatewayv2:Api          httpApiGateway                           created\n   +   └─ aws:lambda:Permission         lambdapermission                         created\n\n   Outputs:\n       endpoint: \"https://***.execute-api.us-east-2.amazonaws.com\"\n\n   Resources:\n       + 6 created\n\n   Duration: 22s\n   ```\n\n   Note: this command will create a virtual environment and restore dependencies automatically as\n   described in [Pulumi docs](https://www.pulumi.com/docs/intro/languages/python/#virtual-environments).\n\n4. View the endpoint URL and curl a few routes:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT            VALUE\n       endpoint          https://***.execute-api.us-east-2.amazonaws.com\n\n   $ curl $(pulumi stack output endpoint)\n   Hello, Pulumi!\n   ```\n\n5. To view the runtime logs of the Lambda function, use the `pulumi logs` command. To get a log stream, use `pulumi logs --follow`.\n\n6. At this point, you have a running HTTP API. Feel free to modify your program, and run `pulumi up`\n   to redeploy changes. The Pulumi CLI automatically detects what has changed and makes the minimal \n   edits necessary to accomplish these changes. This could be altering the function used by the Lambda,\n   or anything else you'd like!\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-apigatewayv2-http-api-quickcreate.html","relUrl":"notes/aws-py-apigatewayv2-http-api-quickcreate.html"},{"doc":"App","title":"App","hpath":"aws-py-apigatewayv2-http-api-quickcreate.app","content":"## Imported Assets\n\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-py-apigatewayv2-http-api-quickcreate.app.html","relUrl":"notes/aws-py-apigatewayv2-http-api-quickcreate.app.html"},{"doc":"Aws Pern Voting App","title":"Aws Pern Voting App","hpath":"aws-pern-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# PERN Stack Voting App\n\nA simple voting app that uses React, Express, PostgreSQL, and NodeJS.\n\nThe example shows how easy it is to deploy containers into production and to connect them to one another. Since the example defines a custom container, Pulumi does the following:\n\n- Builds the Docker image\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the image to the ECR instance\n- Creates a new ECS task definition, pointing to the ECR image definition\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. [Install Docker](https://docs.docker.com/engine/installation/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-pern-voting-app\n   ```\n\n2. Set the AWS region and the usernames and passwords for a set of accounts the project uses:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set sqlAdminName <NAME>\n   $ pulumi config set sqlsqlAdminPassword <PASSWORD> --secret\n   $ pulumi config set sqlUserName <NAME>\n   $ pulumi config set sqlUserPassword <PASSWORD> --secret\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-pern-voting-app):\n       Type                                          Name                                    Status       Info\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   ├─ awsx:x:ecs:FargateTaskDefinition           server-side-service                     created\n   +   ├─ awsx:x:ecs:FargateTaskDefinition           server-side-service                     created \n   +   │  ├─ aws:iam:Role                            server-side-service-execution           created      \n   +   ├─ awsx:x:ecs:FargateTaskDefinition           server-side-service                     created\n   +   │  ├─ aws:cloudwatch:LogGroup                 server-side-service                     created      \n   +   │  ├─ aws:iam:RolePolicyAttachment            server-side-service-task-fd1a00e5       created      \n   +   ├─ awsx:x:ecs:FargateTaskDefinition           server-side-service                     created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   pulumi:pulumi:Stack                           voting-app-aws-pern-voting-app          created\n   +   │  ├─ aws:iam:Role                            client-side-service-execution           created      \n   +   │  ├─ aws:iam:Role                            client-side-service-execution           created      \n   +   │  ├─ aws:iam:Role                            client-side-service-execution           created      \n   +   │  ├─ aws:ecr:LifecyclePolicy                 client-side-service                     created      \n   +   │  ├─ aws:iam:RolePolicyAttachment            client-side-service-task-fd1a00e5       created     \n   +   │  ├─ aws:iam:RolePolicyAttachment            client-side-service-task-32be53a2       created     \n   +   │  ├─ aws:iam:RolePolicyAttachment            client-side-service-execution-9a42f520  created     \n   +   │  └─ aws:ecs:TaskDefinition                  client-side-service                     created     \n   +   ├─ awsx:lb:NetworkLoadBalancer                client-side-listener                    created     \n   +   │  ├─ awsx:lb:NetworkTargetGroup              client-side-listener                    created     \n   +   │  │  └─ aws:lb:TargetGroup                   client-side-listener                    created     \n   +   │  ├─ awsx:lb:NetworkListener                 client-side-listener                    created     \n   +   │  │  └─ aws:lb:Listener                      client-side-listener                    created     \n   +   │  └─ aws:lb:LoadBalancer                     client-side-listener                    created     \n   +   ├─ awsx:lb:NetworkLoadBalancer                server-side-listener                    created     \n   +   │  ├─ awsx:lb:NetworkTargetGroup              server-side-listener                    created     \n   +   │  │  └─ aws:lb:TargetGroup                   server-side-listener                    created     \n   +   │  ├─ awsx:lb:NetworkListener                 server-side-listener                    created     \n   +   │  │  └─ aws:lb:Listener                      server-side-listener                    created     \n   +   │  └─ aws:lb:LoadBalancer                     server-side-listener                    created     \n   +   ├─ awsx:x:ecs:FargateService                  client-side-service                     created     \n   +   │  └─ aws:ecs:Service                         client-side-service                     created     \n   +   ├─ awsx:x:ecs:Cluster                         default-cluster                         created     \n   +   │  ├─ awsx:x:ec2:SecurityGroup                default-cluster                         created     \n   +   │  │  ├─ awsx:x:ec2:EgressSecurityGroupRule   default-cluster-egress                  created     \n   +   │  │  │  └─ aws:ec2:SecurityGroupRule         default-cluster-egress                  created     \n   +   │  │  ├─ awsx:x:ec2:IngressSecurityGroupRule  default-cluster-ssh                     created     \n   +   │  │  │  └─ aws:ec2:SecurityGroupRule         default-cluster-ssh                     created     \n   +   │  │  ├─ awsx:x:ec2:IngressSecurityGroupRule  default-cluster-containers              created     \n   +   │  │  │  └─ aws:ec2:SecurityGroupRule         default-cluster-containers              created     \n   +   │  │  └─ aws:ec2:SecurityGroup                default-cluster                         created     \n   +   │  └─ aws:ecs:Cluster                         default-cluster                         created     \n   +   ├─ aws:ec2:Vpc                                app-vpc                                 created     \n   +   ├─ awsx:x:ec2:Vpc                             default-vpc                             created     \n   +   │  ├─ awsx:x:ec2:Subnet                       default-vpc-public-1                    created     \n   +   │  └─ awsx:x:ec2:Subnet                       default-vpc-public-0                    created     \n   +   ├─ aws:ec2:Subnet                             second-rds-subnet                       created     \n   +   ├─ aws:ec2:Subnet                             first-rds-subnet                        created     \n   +   ├─ aws:ec2:InternetGateway                    app-gateway                             created     \n   +   ├─ aws:ec2:SecurityGroup                      rds-security-group                      created     \n   +   ├─ aws:rds:SubnetGroup                        rds-subnet-group                        created     \n   +   ├─ aws:ec2:RouteTable                         app-routetable                          created     \n   +   ├─ aws:ec2:MainRouteTableAssociation          app-routetable-association              created     \n   +   ├─ aws:rds:Instance                           postgresql-rds-server                   created     \n   +   ├─ pulumi:providers:postgresql                postgresql-provider                     created     \n   +   ├─ postgresql:index:Database                  postgresql-database                     created     \n   +   ├─ postgresql:index:Role                      postgres-standard-role                  created     \n   +   └─ pulumi-nodejs:dynamic:Resource             postgresql-votes-schema                 created     \n\n   Outputs:\n       URL: \"client-side-listener-086d27d-bb5f264d141c31b7.elb.us-west-2.amazonaws.com\"\n\n   Resources:\n       + 63 created\n\n   Duration: 4m2s\n   ```\n\n5. View the DNS address of the instance via `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT   VALUE\n       URL  client-side-listener-086d27d-bb5f264d141c31b7.elb.us-west-2.amazonaws.com\n   ```\n\n6. Verify that the ECS instance exists by connecting to it in a browser window.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [LICENSE](/assets/license)\n- [PostgreSqlDynamicProvider.ts](/assets/postgresqldynamicprovider.ts)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.ts](/assets/index.ts)\n- [package.json](/assets/package.json)\n- [tsconfig.json](/assets/tsconfig.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.html","relUrl":"notes/aws-pern-voting-app.html"},{"doc":"Serverside","title":"Serverside","hpath":"aws-pern-voting-app.serverside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.serverside.html","relUrl":"notes/aws-pern-voting-app.serverside.html"},{"doc":"Server","title":"Server","hpath":"aws-pern-voting-app.serverside.server","content":"## Imported Assets\n\n- [db.js](/assets/db.js)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [startServer.sh](/assets/startserver.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.serverside.server.html","relUrl":"notes/aws-pern-voting-app.serverside.server.html"},{"doc":"Clientside","title":"Clientside","hpath":"aws-pern-voting-app.clientside","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.clientside.html","relUrl":"notes/aws-pern-voting-app.clientside.html"},{"doc":"Client","title":"Client","hpath":"aws-pern-voting-app.clientside.client","content":"## Imported Assets\n\n- [package.json](/assets/package.json)\n- [startClient.sh](/assets/startclient.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.clientside.client.html","relUrl":"notes/aws-pern-voting-app.clientside.client.html"},{"doc":"Src","title":"Src","hpath":"aws-pern-voting-app.clientside.client.src","content":"## Imported Assets\n\n- [App.css](/assets/app.css)\n- [App.js](/assets/app.js)\n- [index.css](/assets/index.css)\n- [index.js](/assets/index.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.clientside.client.src.html","relUrl":"notes/aws-pern-voting-app.clientside.client.src.html"},{"doc":"Components","title":"Components","hpath":"aws-pern-voting-app.clientside.client.src.components","content":"## Imported Assets\n\n- [VotingComponent.js](/assets/votingcomponent.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.clientside.client.src.components.html","relUrl":"notes/aws-pern-voting-app.clientside.client.src.components.html"},{"doc":"Public","title":"Public","hpath":"aws-pern-voting-app.clientside.client.public","content":"## Imported Assets\n\n- [favicon.ico](/assets/favicon.ico)\n- [index.html](/assets/index.html)\n- [logo192.png](/assets/logo192.png)\n- [logo512.png](/assets/logo512.png)\n- [manifest.json](/assets/manifest.json)\n- [robots.txt](/assets/robots.txt)\n- [serverParams.js](/assets/serverparams.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-pern-voting-app.clientside.client.public.html","relUrl":"notes/aws-pern-voting-app.clientside.client.public.html"},{"doc":"Aws JS Webserver","title":"Aws JS Webserver","hpath":"aws-js-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Amazon EC2\n\nThis example deploys a simple AWS EC2 virtual machine running a Python web server.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1\n   ```\n\n3. Stand up the VM, which will also boot up your Python web server on port 80:\n\n   ```bash\n   $ pulumi up\n   ```\n\n4. After a couple minutes, your VM will be ready, and two stack outputs are printed:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n   OUTPUT          VALUE\n   publicIp        53.40.227.82\n   ```\n\n5. Thanks to the security group making port 80 accessible to the 0.0.0.0/0 CIDR block, we can curl it:\n\n   ```bash\n   $ curl $(pulumi stack output publicIp)\n   Hello, World!\n   ```\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your VM.\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-webserver.html","relUrl":"notes/aws-js-webserver.html"},{"doc":"Aws JS Webserver Component","title":"Aws JS Webserver Component","hpath":"aws-js-webserver-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Web Server Component\n\nDeploy an EC2 instance with the `@pulumi/aws` package, using a common module for creating an instance. We define a function, `createInstance`, in [webserver.js](webserver.js) and use it in the main program, [index.js](index.js).\n\nFor a walkthrough of the main example, see [Simple Web Server Using Amazon EC2](https://www.pulumi.com/docs/tutorials/aws/ec2-webserver/).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [webserver.js](/assets/webserver.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-webserver-component.html","relUrl":"notes/aws-js-webserver-component.html"},{"doc":"Aws JS Sqs Slack","title":"Aws JS Sqs Slack","hpath":"aws-js-sqs-slack","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Post AWS SQS Messages to Slack using Serverless Lambdas\n\nThis example wires up a serverless AWS Lambda to an AWS SQS queue and demonstrates posting a\nmessage to Slack.  This program provisions resources using Pulumi's deployment system, but lets\nyou write serverless code as ordinary JavaScript functions.\n\n## Prerequisites\n\nThis program requires the Pulumi CLI.  If you don't have it installed already,\n[get it here](https://www.pulumi.com/docs/get-started/install/) or simply run `curl -fsSL https://get.pulumi.com | sh`.\n\nAfter that, you'll need to [configure your AWS credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) so that Pulumi can\ndeploy into your account.  If your AWS CLI is already configured, everything should just work.\n\nSince this example uses Slack, you'll also need\n[an access token](https://get.slack.help/hc/en-us/articles/215770388-Create-and-regenerate-API-tokens).\n\n## Running the Program\n\nAfter installing the CLI and cloning the repo, `cd` into the directory, and run these commands:\n\n1. Install NPM modules using `npm install` (or `yarn install` if you prefer Yarn).\n\n2. Create a new stack:\n\n   ```\n   $ pulumi stack init sqs-slack-dev\n   ```\n\n3. Configure the required variables:\n\n   ```\n   # Set the AWS region to deploy into:\n   $ pulumi config set aws:region us-west-2\n   # Configure the Slack channel and access token to use:\n   $ pulumi config set slackChannel \"#general\"\n   $ pulumi config set slackToken xoxb-123456789012-Xw937qtWSXJss1lFaKeqFAKE --secret\n   ```\n\n4. Deploy your program to AWS using the `pulumi up` command:\n\n   ```\n   $ pulumi up\n   ```\n\n   This command  will show you the changes before it makes them.  As soon as you select `yes`, it will begin\n   provisioning resources, uploading your lambda, etc.  After it completes, your program is live!\n\n5. To test this out, push a message into your SQS queue using the AWS CLI:\n\n   ```\n   $ aws sqs send-message --queue-url $(pulumi stack output queueURL) --message-body \"Pulumi+AWS rocks :boom:\"\n   ```\n\n   If you've done everything right, you'll see a message posted to your Slack channel!\n\n   ![SQS Slack](./sqs_slack.png)\n\n   Notice we've used the `pulumi stack output` command to read the SQS queue URL that was provisioned.\n\n6. Run the `pulumi logs --follow` command to follow the logs.  After a short while, you should see `console.log`\n   output that your message was posted to Slack.\n\n   ```\n   $ pulumi logs --follow\n   2018-07-05T16:46:03.708-07:00[mySlackPoster-queue-subscripti] 2018-07-05T23:46:03.708Z\t68b50931-a005-5e85-b5c4-5a890fee5519\tPosted SQS message 3caa4069-f549-44d7-8534-6d61840d3420 to Slack channel #general\n   ```\n\n7. If you'd like to make some edits, try changing the `index.js` file, and then just run `pulumi up` again.\n   Pulumi will detect the minimal set of edits needed to deploy your code.\n\n8. After you're done playing around, you can destroy your program and stack by simply running two commands:\n\n   ```\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n## Learning More\n\nTo learn more about Pulumi, try checking out the [Get Started](https://www.pulumi.com/docs/get-started/) guide and\n[Docs](https://www.pulumi.com/docs/).\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [config.js](/assets/config.js)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [sqs_slack.png](/assets/sqs_slack.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-sqs-slack.html","relUrl":"notes/aws-js-sqs-slack.html"},{"doc":"Aws JS S3 Folder","title":"Aws JS S3 Folder","hpath":"aws-js-s3-folder","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Host a Static Website on Amazon S3\n\nA static website that uses [S3's website support](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).\nFor a detailed walkthrough of this example, see the tutorial [Static Website on AWS S3](https://www.pulumi.com/docs/tutorials/aws/s3-website/).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes.  After the preview is shown you will be\n   prompted if you want to continue or not.\n\n   ```bash\n   $ pulumi up\n   Previewing update of stack 'website-testing'\n   Previewing changes:\n   ...\n\n   Updating stack 'website-testing'\n   Performing changes:\n\n       Type                    Name                                   Status      Info\n   +   pulumi:pulumi:Stack     aws-js-s3-folder-website-testing  created\n   +   ├─ aws:s3:Bucket        s3-website-bucket                      created\n   +   ├─ aws:s3:BucketPolicy  bucketPolicy                           created\n   +   ├─ aws:s3:BucketObject  favicon.png                            created\n   +   └─ aws:s3:BucketObject  index.html                             created\n\n   info: 5 changes performed:\n       + 5 resources created\n   Update duration: ***\n\n   Permalink: https://app.pulumi.com/***\n   ```\n\n5. To see the resources that were created, run `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT                                           VALUE\n       bucketName                                       s3-website-bucket-***\n       websiteUrl                                       ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n6. To see that the S3 objects exist, you can either use the AWS Console or the AWS CLI:\n\n   ```bash\n   $ aws s3 ls $(pulumi stack output bucketName)\n   2018-04-17 15:40:47      13731 favicon.png\n   2018-04-17 15:40:48        249 index.html\n   ```\n\n7. Open the site URL in a browser to see both the rendered HTML and the favicon:\n\n   ```bash\n   $ pulumi stack output websiteUrl\n   ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n   ![Hello S3 example](images/part2-website.png)\n\n8. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-s3-folder.html","relUrl":"notes/aws-js-s3-folder.html"},{"doc":"Www","title":"Www","hpath":"aws-js-s3-folder.www","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-s3-folder.www.html","relUrl":"notes/aws-js-s3-folder.www.html"},{"doc":"Images","title":"Images","hpath":"aws-js-s3-folder.images","content":"## Imported Assets\n\n- [part2-website.png](/assets/part2-website.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-s3-folder.images.html","relUrl":"notes/aws-js-s3-folder.images.html"},{"doc":"Aws JS S3 Folder Component","title":"Aws JS S3 Folder Component","hpath":"aws-js-s3-folder-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website Hosted on AWS S3\n\nThe component version of [aws-js-s3-folder](../aws-js-s3-folder/). For a detailed walkthrough of this example, see [Tutorial: Pulumi Components](https://www.pulumi.com/docs/tutorials/aws/s3-folder-component/).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-component-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Restore NPM modules via `npm install` or `yarn install`.\n\n4. Run `pulumi up` to preview and deploy changes.  After the preview is shown you will be\n   prompted if you want to continue or not.\n\n   ```bash\n   $ pulumi up\n   Previewing update of stack 'website-component-testing'\n   Previewing changes:\n   ...\n\n   Updating stack 'website-component-testing'\n   Performing changes:\n\n       Type                       Name                                                  Status      Info\n   +   pulumi:pulumi:Stack        aws-js-s3-folder-component-website-component-testing  created\n   +   └─ examples:S3Folder       pulumi-static-site                                    created\n   +      ├─ aws:s3:Bucket        pulumi-static-site                                    created\n   +      ├─ aws:s3:BucketPolicy  bucketPolicy                                          created\n   +      ├─ aws:s3:BucketObject  favicon.png                                           created\n   +      └─ aws:s3:BucketObject  index.html                                            created\n\n   ---outputs:---\n   info: 6 changes performed:\n       + 6 resources created\n   Update duration: ***\n\n   Permalink: https://app.pulumi.com/***\n   ```\n\n5. To see the resources that were created, run `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT                                           VALUE\n       bucketName                                       s3-website-bucket-***\n       websiteUrl                                       ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n6. To see that the S3 objects exist, you can either use the AWS Console or the AWS CLI:\n\n   ```bash\n   $ aws s3 ls $(pulumi stack output bucketName)\n   2018-04-17 15:40:47      13731 favicon.png\n   2018-04-17 15:40:48        249 index.html\n   ```\n\n7. Open the site URL in a browser to see both the rendered HTML and the favicon:\n\n   ```bash\n   $ pulumi stack output websiteUrl\n   ***.s3-website-us-west-2.amazonaws.com\n   ```\n\n8. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n- [s3folder.js](/assets/s3folder.js)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-s3-folder-component.html","relUrl":"notes/aws-js-s3-folder-component.html"},{"doc":"Www","title":"Www","hpath":"aws-js-s3-folder-component.www","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-s3-folder-component.www.html","relUrl":"notes/aws-js-s3-folder-component.www.html"},{"doc":"Aws JS Containers","title":"Aws JS Containers","hpath":"aws-js-containers","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# ECS Fargate Containers\n\nCompanion to the tutorial [Provision containers on AWS](https://www.pulumi.com/docs/tutorials/aws/ecs-fargate/).\n\n## Prerequisites\n\nTo run this example, make sure [Docker Engine - Community](https://docs.docker.com/engine/installation/) is installed and running.\n\n## Deploy the App\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n### Step 1:  Create a new stack\n\n````\n```\n$ pulumi stack init containers-dev\n```\n````\n\n### Step 2:  Configure AWS region for Pulumi\n\nFor this example, you need to set an AWS region that supports Fargate. Refer to the [AWS Region Table](https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/) for product availability.\n\n````\n```\n$ pulumi config set aws:region us-west-2\n```\n````\n\n### Step 3: Restore NPM modules\n\nYou can do this via `npm install` or `yarn install`.\n\n### Step 4:.  Preview and deploy the app\n\nRun the following command:\n\n````\n```\n$ pulumi up\n```\n````\n\nThe preview will take a few minutes, as it builds a Docker container. A total of 19 resources are created.\n\n### Step 5:  View the endpoint URL\n\nRun [`pulumi stack output`](https://www.pulumi.com/docs/reference/cli/pulumi_stack_output/) to view your stack's output properties, and then `curl` the command to view the resulting page. `$(pulumi stack output url)` evaluates to the load balancer’s URL.\n\n````\n```bash\n$ pulumi stack output\nCurrent stack outputs (1)\n    OUTPUT                  VALUE\n    hostname                http://***.elb.us-west-2.amazonaws.com\n\n$ curl $(pulumi stack output hostname)\n<html>\n    <head><meta charset=\"UTF-8\">\n    <title>Hello, Pulumi!</title></head>\n<body>\n    <p>Hello, S3!</p>\n    <p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n</body></html>\n```\n````\n\n### Step 6: View runtime logs from the container\n\nUse the [`pulumi logs`](https://www.pulumi.com/docs/reference/cli/pulumi_logs/) command. To get a log stream, use `pulumi logs --follow`.\n\n````\n```\n$ pulumi logs --follow\nCollecting logs for stack container-quickstart-dev since 2018-05-22T14:25:46.000-07:00.\n2018-05-22T15:33:22.057-07:00[                  pulumi-nginx] 172.31.13.248 - - [22/May/2018:22:33:22 +0000] \"GET / HTTP/1.1\" 200 189 \"-\" \"curl/7.54.0\" \"-\"\n```\n````\n\n## Clean Up\n\nTo clean up resources, run [`pulumi destroy`](https://www.pulumi.com/docs/reference/cli/pulumi_destroy/) to avoid incurring any costs. Select `yes` on the confirmation prompt so Pulumi will remove all of the resources that you've created. To delete the stack itself, run [`pulumi stack rm`](https://www.pulumi.com/docs/reference/cli/pulumi_stack_rm/). Note that this command deletes all deployment history from the Pulumi Console, unless you've explicitly [chosen a different backend](https://www.pulumi.com/docs/intro/concepts/state/) for storing your infrastructure state.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [index.js](/assets/index.js)\n- [package.json](/assets/package.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-containers.html","relUrl":"notes/aws-js-containers.html"},{"doc":"App","title":"App","hpath":"aws-js-containers.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-containers.app.html","relUrl":"notes/aws-js-containers.app.html"},{"doc":"Content","title":"Content","hpath":"aws-js-containers.app.content","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-js-containers.app.content.html","relUrl":"notes/aws-js-containers.app.content.html"},{"doc":"Aws Go Webserver","title":"Aws Go Webserver","hpath":"aws-go-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Amazon EC2 (in Go)\n\nThis example deploys a simple AWS EC2 virtual machine running a Python web server. It uses Go as its infrastructure as\ncode language.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Go](https://golang.org/doc/install)\n2. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n2. Next, create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1\n   ```\n\n4. Stand up the VM, which will also boot up your Python web server on port 80:\n\n   ```bash\n   $ pulumi up\n   ```\n\n5. After a couple minutes, your VM will be ready, and two stack outputs are printed:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n   OUTPUT          VALUE\n   publicIp        53.40.227.82\n   ```\n\n6. Thanks to the security group making port 80 accessible to the 0.0.0.0/0 CIDR block, we can curl it:\n\n   ```bash\n   $ curl $(pulumi stack output publicIp)\n   Hello, World!\n   ```\n\n7. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your VM.\n\n8. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-webserver.html","relUrl":"notes/aws-go-webserver.html"},{"doc":"Aws Go S3 Folder","title":"Aws Go S3 Folder","hpath":"aws-go-s3-folder","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Host a Static Website on Amazon S3\n\nA static website that uses [S3's website support](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).\nFor a detailed walkthrough of this example, see the tutorial [Static Website on AWS S3](https://www.pulumi.com/docs/tutorials/aws/s3-website/).\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.\n\n   ```bash\n   $ pulumi up\n   Previewing stack 'website-testing'\n   Previewing changes:\n   ...\n\n   Performing changes:\n\n   #: Resource Type        Name                              Status     Extra Inf\n   1: pulumi:pulumi:Stack  website-testing  + created  \n   2: aws:s3:Bucket        s3-website-bucket                 + created  \n   3: aws:s3:BucketPolicy  bucketPolicy                      + created  \n   4: aws:s3:BucketObject  favicon.png                       + created  \n   5: aws:s3:BucketObject  index.html                        + created  \n\n   info: 5 changes performed:\n       + 5 resources created\n   Update duration: 8.827698762s\n   ```\n\n4. To see the resources that were created, run `pulumi stack`:\n\n   ```bash\n   $ pulumi stack\n   Current stack is go-website-testing:\n       Managed by https://api.pulumi.com\n       Owner: swgillespie\n       Last updated: 13 minutes ago (2018-06-15 14:19:06.856631155 -0700 PDT)\n       Pulumi version: v0.14.0-rc1\n       Plugin go [language] version: 0.14.0-rc1\n       Plugin aws [resource] version: 0.14.0-rc1\n\n   Current stack resources (5):\n       TYPE                                             NAME\n       pulumi:pulumi:Stack                              website-testing\n       aws:s3/bucket:Bucket                             s3-website-bucket\n       aws:s3/bucketPolicy:BucketPolicy                 bucketPolicy\n       aws:s3/bucketObject:BucketObject                 www/index.html\n       aws:s3/bucketObject:BucketObject                 www/favicon.png\n   ```\n\n5. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder.html","relUrl":"notes/aws-go-s3-folder.html"},{"doc":"Www","title":"Www","hpath":"aws-go-s3-folder.www","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder.www.html","relUrl":"notes/aws-go-s3-folder.www.html"},{"doc":"Images","title":"Images","hpath":"aws-go-s3-folder.images","content":"## Imported Assets\n\n- [part2-website.png](/assets/part2-website.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder.images.html","relUrl":"notes/aws-go-s3-folder.images.html"},{"doc":"Aws Go S3 Folder Component","title":"Aws Go S3 Folder Component","hpath":"aws-go-s3-folder-component","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Static Website on Amazon S3\n\nThe component version of [aws-go-s3-folder](../aws-go-s3-folder/). For a detailed walkthrough of this example, see [Tutorial: Pulumi Components](https://www.pulumi.com/docs/tutorials/aws/s3-folder-component/).\n\n## Deploying and running the program\n\nNote: some values in this example will be different from run to run.  These values are indicated\nwith `***`.\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init website-component-testing\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.  After showing the preview you will be \n   prompted if you want to continue or not.\n\n   ```bash\n   $ pulumi up\n   Previewing stack 'website-component-testing'\n   Previewing changes:\n   ...\n\n   Updating stack 'website-component-testing'\n   Performing changes:\n\n       Type                        Name                                                  Status\n   +   pulumi:pulumi:Stack         aws-go-s3-folder-component-website-component-testing  created\n   +   └─ pulumi:example:S3Folder  pulumi-static-site                                     created\n   +      ├─ aws:s3:Bucket         pulumi-static-site                                     created\n   +      ├─ aws:s3:BucketPolicy   bucketPolicy                                          created\n   +      ├─ aws:s3:BucketObject   index.html                                            created\n   +      └─ aws:s3:BucketObject   favicon.png                                           created\n\n   Outputs:\n       bucketName: \"pulumi-static-site-***\"\n       websiteUrl: \"pulumi-static-site-***.s3-website-us-west-2.amazonaws.com\"\n\n   Resources:\n       + 6 created\n\n   Duration: 14s\n\n   Permalink: ***\n   ```\n\n4. To see the resources that were created, run `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT      VALUE\n       bucketName  pulumi-static-site-***\n       websiteUrl  pulumi-static-site-***.s3-website-us-west-2.amazonaws.com\n   ```\n\n5. To see that the S3 objects exist, you can either use the AWS Console or the AWS CLI:\n\n   ```bash\n   $ aws s3 ls $(pulumi stack output bucketName)\n   2020-04-20 22:52:15      13731 favicon.png\n   2020-04-20 22:52:15        249 index.html    \n   ```\n\n6. Open the site URL in a browser to see both the rendered HTML and the favicon:\n\n   ```bash\n   $ pulumi stack output websiteUrl\n   pulumi-static-site-***.s3-website-us-west-2.amazonaws.com\n   ```\n\n7. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n- [s3folder.go](/assets/s3folder.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder-component.html","relUrl":"notes/aws-go-s3-folder-component.html"},{"doc":"Www","title":"Www","hpath":"aws-go-s3-folder-component.www","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder-component.www.html","relUrl":"notes/aws-go-s3-folder-component.www.html"},{"doc":"Images","title":"Images","hpath":"aws-go-s3-folder-component.images","content":"## Imported Assets\n\n- [part2-website.png](/assets/part2-website.png)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-s3-folder-component.images.html","relUrl":"notes/aws-go-s3-folder-component.images.html"},{"doc":"Aws Go Resources","title":"Aws Go Resources","hpath":"aws-go-resources","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# AWS Resources (in Go)\n\nA Pulumi program that demonstrates creating various AWS resources in Golang\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Go](https://golang.org/doc/install)\n2. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Next, create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init\n   ```\n\n2. Set the required configuration variables for this program:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 28 created\n   Duration: 44s\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-resources.html","relUrl":"notes/aws-go-resources.html"},{"doc":"Aws Go Lambda","title":"Aws Go Lambda","hpath":"aws-go-lambda","content":"# AWS Golang Lambda\n\nThis example creates an AWS Lambda function that does a simple `ToUpper` on the string input and returns it.\n\n## Deploying the App\n\n To deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Clone aws-go-lambda](https://github.com/aws/aws-lambda-go)\n\n### Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Build the handler:\n\n   - For developers on Linux and macOS:\n\n     ```bash\n     make build\n     ```\n   - For developers on Windows:\n\n     - Get the `build-lambda-zip` tool:\n\n       ```bash\n       set GO111MODULE=on\n       go.exe get -u github.com/aws/aws-lambda-go/cmd/build-lambda-zip\n       ```\n\n     - Use the tool from your GOPATH:\n       ```bash\n       set GOOS=linux\n       set GOARCH=amd64\n       set CGO_ENABLED=0\n       go build -o handler\\handler handler\\handler.go\n       %USERPROFILE%\\Go\\bin\\build-lambda-zip.exe -o handler\\handler.zip handler\\handler\n       ```\n\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   pulumi config set aws:region us-east-1\n   ```\n\n4. Execute the Pulumi program to create our lambda:\n\n   ```bash\n   pulumi up\n   ```\n\n5. Call our Lambda function from the AWS CLI with \"foo\" as the payload:\n\n   ```bash\n   aws lambda invoke \\\n   --function-name $(pulumi stack output lambda) \\\n   --region $(pulumi config get aws:region) \\\n   --cli-binary-format raw-in-base64-out \\\n   --payload '\"foo\"' \\\n   output.json\n\n   cat output.json # view the output file with your tool of choice\n   # \"FOO\"\n   ```\n\n6. From there, feel free to experiment. Simply making edits, rebuilding your handler, and running `pulumi up` will update your function.\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Makefile](/assets/makefile)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-lambda.html","relUrl":"notes/aws-go-lambda.html"},{"doc":"Handler","title":"Handler","hpath":"aws-go-lambda.handler","content":"## Imported Assets\n\n- [handler.go](/assets/handler.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-lambda.handler.html","relUrl":"notes/aws-go-lambda.handler.html"},{"doc":"Aws Go Lambda Gateway","title":"Aws Go Lambda Gateway","hpath":"aws-go-lambda-gateway","content":"# AWS Golang Lambda With API Gateway\n\nThis example creates a lambda that does a simple `ToUpper` on the path input of an API request and returns it.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Clone aws-go-lambda](https://github.com/aws/aws-lambda-go)\n\n### Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Build the handler:\n\n   - For developers on Linux and macOS:\n\n     ```bash\n     make build\n     ```\n   - For developers on Windows:\n\n     - Get the `build-lambda-zip` tool:\n\n       ```bash\n       set GO111MODULE=on\n       go.exe get -u github.com/aws/aws-lambda-go/cmd/build-lambda-zip\n       ```\n\n     - Use the tool from your GOPATH:\n       ```bash\n       set GOOS=linux\n       set GOARCH=amd64\n       set CGO_ENABLED=0\n       go build -o handler\\handler handler\\handler.go\n       %USERPROFILE%\\Go\\bin\\build-lambda-zip.exe -o handler\\handler.zip handler\\handler\n       ```\n\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n4. Execute the Pulumi program to create our lambda:\n\n   ```bash\n   $ pulumi up                              \n   Previewing update (dev):\n   \tType                           Name               Plan       \n   +   pulumi:pulumi:Stack            go-lambda-dev      create     \n   +   ├─ aws:apigateway:RestApi      UpperCaseGateway   create     \n   +   ├─ aws:iam:Role                task-exec-role     create     \n   +   ├─ aws:apigateway:Resource     UpperAPI           create     \n   +   ├─ aws:iam:RolePolicy          lambda-log-policy  create     \n   +   ├─ aws:apigateway:Method       AnyMethod          create     \n   +   ├─ aws:lambda:Function         basicLambda        create     \n   +   ├─ aws:lambda:Permission       APIPermission      create     \n   +   ├─ aws:apigateway:Integration  LambdaIntegration  create     \n   +   └─ aws:apigateway:Deployment   APIDeployment      create     \n\n   Resources:\n   \t+ 10 to create\n\n   Do you want to perform this update? yes\n   Updating (dev):\n   \tType                           Name               Status      \n   +   pulumi:pulumi:Stack            go-lambda-dev      created     \n   +   ├─ aws:apigateway:RestApi      UpperCaseGateway   created     \n   +   ├─ aws:iam:Role                task-exec-role     created     \n   +   ├─ aws:apigateway:Resource     UpperAPI           created     \n   +   ├─ aws:iam:RolePolicy          lambda-log-policy  created     \n   +   ├─ aws:apigateway:Method       AnyMethod          created     \n   +   ├─ aws:lambda:Function         basicLambda        created     \n   +   ├─ aws:apigateway:Integration  LambdaIntegration  created     \n   +   ├─ aws:lambda:Permission       APIPermission      created     \n   +   └─ aws:apigateway:Deployment   APIDeployment      created     \n\n   Outputs:\n   \tinvocation URL: \"https://<gateway-id>.execute-api.us-west-2.amazonaws.com/prod/{message}\"\n   \tlambda        : \"arn:aws:lambda:us-west-2:ACCOUNTID:function:basicLambda-75711af\"\n\n   Resources:\n   \t+ 10 created\n\n   Duration: 29s\n   ```\n\n5. Call our lambda function from the cli:\n\n   ```bash\n   curl https://<gateway-id>.execute-api.us-west-2.amazonaws.com/prod/helloworld   \n   HELLOWORLD% \n   ```\n\n6. From there, feel free to experiment. Simply making edits, rebuilding your handler, and running `pulumi up` will update your lambda.\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Makefile](/assets/makefile)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-lambda-gateway.html","relUrl":"notes/aws-go-lambda-gateway.html"},{"doc":"Handler","title":"Handler","hpath":"aws-go-lambda-gateway.handler","content":"## Imported Assets\n\n- [handler.go](/assets/handler.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-lambda-gateway.handler.html","relUrl":"notes/aws-go-lambda-gateway.handler.html"},{"doc":"Aws Go Fargate","title":"Aws Go Fargate","hpath":"aws-go-fargate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# NGINX on AWS ECS Fargate using Go IaC\n\nThis example shows authoring Infrastructure as Code in the [Go programming language](https://golang.org). It\nprovisions a full [Amazon Elastic Container Service (ECS) \"Fargate\"](https://aws.amazon.com/ecs) cluster and\nrelated infrastructure, building a docker image, pushing it to ECR, and using it to run a web server accessible over the Internet on port 80.\nThis example is inspired by [Docker's Getting Started Tutorial](https://docs.docker.com/get-started/).\n\n## Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n- [Install Go](https://golang.org/doc/install)\n\n## Running the Example\n\nClone this repo and `cd` into it.\n\nNext, to deploy the application and its infrastructure, follow these steps:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Deploy everything with a single `pulumi up` command. This will show you a preview of changes first, which\n   includes all of the required AWS resources (clusters, services, and the like). Don't worry if it's more than\n   you expected -- this is one of the benefits of Pulumi, it configures everything so that so you don't need to!\n\n   ```bash\n   $ pulumi up\n   ```\n\n    After being prompted and selecting \"yes\", your deployment will begin. It'll complete in a few minutes:\n\n   ```\n   Updating (dev):\n        Type                                        Name                Status\n    +   pulumi:pulumi:Stack                         aws-go-fargate-dev  created\n    +   ├─ aws:ec2:SecurityGroup                    web-sg              created\n    +   ├─ aws:ecs:Cluster                          app-cluster         created\n    +   ├─ aws:iam:Role                             task-exec-role      created\n    +   ├─ aws:elasticloadbalancingv2:TargetGroup   web-tg              created\n    +   ├─ aws:ecr:Repository                       app-repo            created\n    +   ├─ docker:image:Image                       app-img             created\n    +   ├─ aws:iam:RolePolicyAttachment             task-exec-policy    created\n    +   ├─ aws:ecs:TaskDefinition                   app-task            created\n    +   ├─ aws:elasticloadbalancingv2:LoadBalancer  web-lb              created\n    +   └─ aws:ecs:Service                          app-svc             created\n\n   Outputs:\n       url: \"web-lb-651d804-400248986.us-west-2.elb.amazonaws.com\"\n\n   Resources:\n       + 11 created\n\n   Duration: 3m41s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-go-fargate/dev/updates/1\n   ```\n\n   Notice that the automatically assigned load-balancer URL is printed as a stack output.\n\n4. At this point, your app is running -- let's curl it. The CLI makes it easy to grab the URL:\n\n   ```bash\n   $ curl http://$(pulumi stack output url)\n   42\n   $ curl http://$(pulumi stack output url)\n   19\n   $ curl http://$(pulumi stack output url)\n   88\n   ```\n\n5. Try making some changes, rebuilding, and rerunning `pulumi up`. For example, let's scale up to 5 instances:\n\n   ```diff\n   -                       DesiredCount:   pulumi.Int(3),\n   +                       DesiredCount:   pulumi.Int(5),\n   ```\n\n   Running `pulumi up` will show you the delta and then, after confirming, will deploy just those changes:\n\n   ```bash\n   $ pulumi up\n   ```\n\n   Notice that `pulumi up` redeploys just the parts of the application/infrastructure that you've edited.\n\n   ```\n   Updating (dev):\n\n        Type                 Name                Status      Info\n        pulumi:pulumi:Stack  aws-go-fargate-dev\n    ~   └─ aws:ecs:Service   app-svc             updated     [diff: ~desiredCount]\n\n   Outputs:\n       url: \"web-lb-651d804-400248986.us-west-2.elb.amazonaws.com\"\n\n   Resources:\n       ~ 1 updated\n       9 unchanged\n\n   Duration: 5s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-go-fargate/dev/updates/2\n   ```\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-fargate.html","relUrl":"notes/aws-go-fargate.html"},{"doc":"App","title":"App","hpath":"aws-go-fargate.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-fargate.app.html","relUrl":"notes/aws-go-fargate.app.html"},{"doc":"Aws Go Eks","title":"Aws Go Eks","hpath":"aws-go-eks","content":"# AWS Golang EKS Cluster\n\nThis example creates an AWS EKS Cluster and deploys a sample container application to it\n\n## Deploying the App\n\n To deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install Go 1.13](https://golang.org/doc/install)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n4. [Install `aws-iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n5. [Install `kubectl`](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n\n### Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Execute the Pulumi program to create our EKS Cluster:\n\n   ```bash\n   pulumi up\n   ```\n\n4. After 10-15 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets >kubeconfig.json\n   ```\n\n    Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.json kubectl get nodes\n   ```\n\n5. Ensure that the application is running as expected:\n\n   ```bash\n   $ curl $(pulumi stack output url) \n   ```\n\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-eks.html","relUrl":"notes/aws-go-eks.html"},{"doc":"Aws Go Console Slack Notification","title":"Aws Go Console Slack Notification","hpath":"aws-go-console-slack-notification","content":"# AWS Console Change Slack Notifier in Go\n\nThis example deploys a Lambda function and relevant CloudTrail and CloudWatch resources to send a \nSlack notification for any resource operation that is performed via the AWS Console.\n\nNote: This application sets up the necessary infrastructure across _each_ AWS region in your \naccount that is `opt-in-not-required` or `opted-in`. The Pulumi application uses the \n[DescribeRegions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html) API\nvia [aws-sdk-go](https://github.com/aws/aws-sdk-go) to query for available regions.\n\n## Deploying the App\n\n To deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Build the handler:\n\n   - For developers on Linux and macOS:\n\n     ```bash\n     make\n     ```\n   - For developers on Windows:\n\n     - Get the `build-lambda-zip` tool:\n\n       ```bash\n       set GO111MODULE=on\n       go.exe get -u github.com/aws/aws-lambda-go/cmd/build-lambda-zip\n       ```\n\n     - Use the tool from your GOPATH:\n       ```bash\n       set GOOS=linux\n       set GOARCH=amd64\n       set CGO_ENABLED=0\n       go build -o handler\\dist\\handler handler\\handler.go\n       %USERPROFILE%\\Go\\bin\\build-lambda-zip.exe -o handler\\dist\\handler.zip handler\\dist\\handler\n       ```\n\n2. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   pulumi stack init\n   ```\n\n3. Set the required configuration variables for this program:\n\n   ```bash\n   pulumi config set slackWebhookURL 'YOUR_SLACK_WEBHOOK_URL'\n   ```\n\n4. Execute the Pulumi program to create our lambda:\n\n   ```bash\n   pulumi up\n   ```\n\n5. Perform a change in the AWS Console and look for a notification in your Slack channel. Note: you \n   must perform a _write_ such as adding or removing tags from a resource, launching an instance, or \n   deleting a resource.\n\n6. From there, feel free to experiment. Simply making edits, rebuilding your handler, and running \n   `pulumi up` will update your lambda. Customize the Slack message username or text with the following \n   configuration values:\n\n   ````\n   ```bash\n   pulumi config set slackMessageUsername 'Console Change Monitor'\n   pulumi config set slackMessageText ':warning: Somebody made a change in the console!'\n   ```\n   ````\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Makefile](/assets/makefile)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-console-slack-notification.html","relUrl":"notes/aws-go-console-slack-notification.html"},{"doc":"Handler","title":"Handler","hpath":"aws-go-console-slack-notification.handler","content":"## Imported Assets\n\n- [handler.go](/assets/handler.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-console-slack-notification.handler.html","relUrl":"notes/aws-go-console-slack-notification.handler.html"},{"doc":"Aws Go Assume Role","title":"Aws Go Assume Role","hpath":"aws-go-assume-role","content":"\n","url":"https://pulumi.dendron.so/notes/a2bfd137-68bc-4a3c-aedc-fdf79e6b76d3.html","relUrl":"notes/a2bfd137-68bc-4a3c-aedc-fdf79e6b76d3.html"},{"doc":"Create Role","title":"Create Role","hpath":"aws-go-assume-role.create-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-assume-role.create-role.html","relUrl":"notes/aws-go-assume-role.create-role.html"},{"doc":"Assume Role","title":"Assume Role","hpath":"aws-go-assume-role.assume-role","content":"## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-assume-role.assume-role.html","relUrl":"notes/aws-go-assume-role.assume-role.html"},{"doc":"Aws Go Appsync","title":"Aws Go Appsync","hpath":"aws-go-appsync","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# GraphQL Endpoint in AWS AppSync (in Go)\n\nThis example shows how to setup a basic GraphQL endpoint in AWS AppSync. The endpoint contains one query and one mutation that get and put items to a Dynamo DB table.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Go](https://golang.org/doc/install)\n2. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n\n### Steps\n\nAfter cloning this repo, from this working directory, run these commands:\n\n1. Create a new Pulumi stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the required configuration variables for this program (AWS Region):\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` up to preview and deploy changes:\n\n   ```bash\n   $ pulumi up\n   Previewing update (dev):\n   ...\n\n   Updating (dev):\n   ...\n   Resources:\n       + 10 created\n   Duration: 20s\n   ```\n\n4. Check the deployed GraphQL endpoint:\n\n   ```bash\n   $ pulumi stack output endpoint\n   https://***.appsync-api.us-west-2.amazonaws.com/graphql\n   $ pulumi stack output key\n   ***sensitivekey***\n   $ curl -XPOST -H \"Content-Type:application/graphql\" -H \"x-api-key:$(pulumi stack output key)\" -d '{ \"query\": \"mutation AddTenant { addTenant(id: \\\"123\\\", name: \\\"FirstCorp\\\") { id name } }\" }' \"$(pulumi stack output endpoint)\" \n   {\n       \"data\": {\n           \"addTenant\": {\n               \"id\": \"123\",\n               \"name\": \"FirstCorp\"\n           }\n       }\n   }\n   ```\n\n## Clean up\n\n1. Run `pulumi destroy` to tear down all resources.\n\n2. To delete the stack itself, run `pulumi stack rm`. Note that this command deletes all deployment history from the Pulumi Console.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [go.mod](/assets/go.mod)\n- [go.sum](/assets/go.sum)\n- [main.go](/assets/main.go)\n\n","url":"https://pulumi.dendron.so/notes/aws-go-appsync.html","relUrl":"notes/aws-go-appsync.html"},{"doc":"Aws Fs S3 Folder","title":"Aws Fs S3 Folder","hpath":"aws-fs-s3-folder","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Host a Static Website on Amazon S3\n\nA static website that uses [S3's website support](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.\n\n   ```bash\n   Previewing update (dev):\n       Type                       Name                  Plan       \n   +   pulumi:pulumi:Stack        aws-cs-s3-folder-dev  create     \n   +   └─ aws:s3:Bucket           my-bucket             create     \n   +      ├─ aws:s3:BucketObject  index.html            create     \n   +      └─ aws:s3:BucketObject  favicon.png           create     \n\n   Resources:\n       + 4 to create\n\n   Do you want to perform this update? yes\n   Updating (dev):\n       Type                       Name                  Status      \n   +   pulumi:pulumi:Stack        aws-cs-s3-folder-dev  created     \n   +   └─ aws:s3:Bucket           my-bucket             created     \n   +      ├─ aws:s3:BucketObject  index.html            created     \n   +      └─ aws:s3:BucketObject  favicon.png           created     \n\n   Outputs:\n       endpoint: \"http://my-bucket-1234567.s3-website.us-west-2.amazonaws.com\"\n   ```\n\n4. Navigate to the website URL:\n\n   ```bash\n   $ curl $(pulumi stack output endpoint)\n   <html><head>\n       <title>Hello S3</title><meta charset=\"UTF-8\">\n       <link rel=\"shortcut icon\" href=\"/favicon.png\" type=\"image/png\">\n   </head>\n   <body><p>Hello, world!</p><p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n   </body></html>\n   ```\n\n5. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Program.fs](/assets/program.fs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [aws-cs-s3-folder.fsproj](/assets/aws-cs-s3-folder.fsproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-fs-s3-folder.html","relUrl":"notes/aws-fs-s3-folder.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"aws-fs-s3-folder.wwwroot","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-fs-s3-folder.wwwroot.html","relUrl":"notes/aws-fs-s3-folder.wwwroot.html"},{"doc":"Aws Fs Lambda Webserver","title":"Aws Fs Lambda Webserver","hpath":"aws-fs-lambda-webserver","content":"\n","url":"https://pulumi.dendron.so/notes/e6e94c6e-6404-4fb2-94df-b7c741646f2b.html","relUrl":"notes/e6e94c6e-6404-4fb2-94df-b7c741646f2b.html"},{"doc":"Pulumi","title":"Pulumi","hpath":"aws-fs-lambda-webserver.pulumi","content":"## Imported Assets\n\n- [Aws.LambdaWebServer.fsproj](/assets/aws.fsproj)\n- [Program.fs](/assets/program.fs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/aws-fs-lambda-webserver.pulumi.html","relUrl":"notes/aws-fs-lambda-webserver.pulumi.html"},{"doc":"Lambdawebserver","title":"Lambdawebserver","hpath":"aws-fs-lambda-webserver.lambdawebserver","content":"# Giraffe Serverless Application\n\nThis project shows how to run a [Giraffe](https://github.com/giraffe-fsharp/Giraffe) project as an AWS Lambda exposed through Amazon API Gateway. The NuGet package [Amazon.Lambda.AspNetCoreServer](https://www.nuget.org/packages/Amazon.Lambda.AspNetCoreServer) contains a Lambda function that is used to translate requests from API Gateway into the ASP.NET Core framework and then the responses from ASP.NET Core back to API Gateway.\n\n### Project Files\n\n- serverless.template - an AWS CloudFormation Serverless Application Model template file for declaring your Serverless functions and other AWS resources\n- aws-lambda-tools-defaults.json - default argument settings for use with Visual Studio and command line deployment tools for AWS\n- Setup.fs - Code file that contains the bootstrap for configuring ASP.NET Core and Giraffe. It contains a main function for local development and the LambdaEntryPoint type for executing from Lambda. The LambdaEntryPoint type inherits from **Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction** which contains the logic of converting requests and response back and forth between API Gateway and ASP.NET Core.\n- AppHandlers.fs - Code file that defines the HTTP handler functions and routing function.\n- web.config - used for local development.\n\nYou may also have a test project depending on the options selected.\n\n* * *\n\n## Imported Assets\n\n- [AppHandlers.fs](/assets/apphandlers.fs)\n- [LambdaWebServer.fsproj](/assets/lambdawebserver.fsproj)\n- [Setup.fs](/assets/setup.fs)\n- [appsettings.json](/assets/appsettings.json)\n- [web.config](/assets/web.config)\n\n","url":"https://pulumi.dendron.so/notes/aws-fs-lambda-webserver.lambdawebserver.html","relUrl":"notes/aws-fs-lambda-webserver.lambdawebserver.html"},{"doc":"Aws Django Voting App","title":"Aws Django Voting App","hpath":"aws-django-voting-app","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Voting app Using Django and MySQL\n\nA simple voting app that uses MySQL for data storage and a Python Django app for the frontend. \n\nThe example shows how easy it is to deploy containers into production and to connect them to one another. Since the example defines a custom container, Pulumi does the following:\n\n- Builds the Docker image\n- Provisions AWS Container Registry (ECR) instance\n- Pushes the image to the ECR instance\n- Creates a new ECS task definition, pointing to the ECR image definition\n\n## Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Configure Pulumi for Python](https://www.pulumi.com/docs/intro/languages/python/)\n4. [Install Docker](https://docs.docker.com/engine/installation/)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init aws-django-voting-app\n   ```\n\n2. Set the AWS region, the usernames and passwords for a set of accounts the project uses, and a random 50-character string to serve as Django's secret key:\n\n   ```bash\n   $ pulumi config set aws:region us-west-2\n   $ pulumi config set sql-admin-name <NAME>\n   $ pulumi config set sql-admin-password <PASSWORD> --secret\n   $ pulumi config set sql-user-name <NAME>\n   $ pulumi config set sql-user-password <PASSWORD> --secret\n   $ pulumi config set django-admin-name <NAME>\n   $ pulumi config set django-admin-password <PASSWORD> --secret\n   $ pulumi config set django-secret-key <VALUE> --secret\n   ```\n\n3. Run `pulumi up -y` to deploy changes:\n\n   ```bash\n   Updating (aws-django-voting-app):\n       Type                                  Name                              Status      Info\n   +   pulumi:pulumi:Stack                   voting-app-aws-django-voting-app  created     \n   +   ├─ docker:image:Image                 django-dockerimage                created     1 warning\n   +   ├─ aws:ec2:Vpc                        app-vpc                           created     \n   +   ├─ aws:ecs:Cluster                    app-cluster                       created     \n   +   ├─ aws:iam:Role                       app-exec-role                     created     \n   +   ├─ aws:iam:Role                       app-task-role                     created     \n   +   ├─ aws:ecr:Repository                 app-ecr-repo                      created     \n   +   ├─ aws:cloudwatch:LogGroup            django-log-group                  created     \n   +   ├─ aws:ecr:LifecyclePolicy            app-lifecycle-policy              created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-exec-policy                   created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-access-policy                 created     \n   +   ├─ aws:iam:RolePolicyAttachment       app-lambda-policy                 created     \n   +   ├─ aws:ec2:InternetGateway            app-gateway                       created     \n   +   ├─ aws:ec2:SecurityGroup              security-group                    created     \n   +   ├─ aws:ec2:Subnet                     app-vpc-subnet                    created     \n   +   ├─ aws:ec2:Subnet                     extra-rds-subnet                  created     \n   +   ├─ aws:lb:TargetGroup                 django-targetgroup                created     \n   +   ├─ aws:lb:LoadBalancer                django-balancer                   created     \n   +   ├─ aws:ec2:RouteTable                 app-routetable                    created     \n   +   ├─ aws:rds:SubnetGroup                app-database-subnetgroup          created     \n   +   ├─ aws:ec2:MainRouteTableAssociation  app_routetable_association        created     \n   +   ├─ aws:rds:Instance                   mysql-server                      created     \n   +   ├─ aws:lb:Listener                    django-listener                   created     \n   +   ├─ pulumi:providers:mysql             mysql-provider                    created     \n   +   ├─ mysql:index:Database               mysql-database                    created     \n   +   ├─ mysql:index:User                   mysql-standard-user               created     \n   +   ├─ mysql:index:Grant                  mysql-access-grant                created     \n   +   ├─ aws:ecs:TaskDefinition             django-site-task-definition       created     \n   +   ├─ aws:ecs:TaskDefinition             django-database-task-definition   created     \n   +   ├─ aws:ecs:Service                    django-site-service               created     \n   +   └─ aws:ecs:Service                    django-database-service           created     \n\n   Outputs:\n       app-url: \"django-balancer-2f4f9fe-c6e6893a1972a811.elb.us-west-2.amazonaws.com\"\n\n   Resources:\n       + 31 created\n\n   Duration: 4m16s\n   ```\n\n4. View the DNS address of the instance via `pulumi stack output`:\n\n   ```bash\n   $ pulumi stack output\n   Current stack outputs (1):\n       OUTPUT   VALUE\n       app-url  django-balancer-2f4f9fe-c6e6893a1972a811.elb.us-west-2.amazonaws.com\n   ```\n\n5. Verify that the ECS instance exists by connecting to it in a browser window.\n\n## Clean up\n\nTo clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [**main**.py](/assets/__main__.py)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.html","relUrl":"notes/aws-django-voting-app.html"},{"doc":"Frontend","title":"Frontend","hpath":"aws-django-voting-app.frontend","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [requirements.txt](/assets/requirements.txt)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.html","relUrl":"notes/aws-django-voting-app.frontend.html"},{"doc":"Mysite","title":"Mysite","hpath":"aws-django-voting-app.frontend.mysite","content":"## Imported Assets\n\n- [manage.py](/assets/manage.py)\n- [setupDatabase.sh](/assets/setupdatabase.sh)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.mysite.html","relUrl":"notes/aws-django-voting-app.frontend.mysite.html"},{"doc":"Polls","title":"Polls","hpath":"aws-django-voting-app.frontend.mysite.polls","content":"## Imported Assets\n\n- [**init**.py](/assets/__init__.py)\n- [admin.py](/assets/admin.py)\n- [apps.py](/assets/apps.py)\n- [models.py](/assets/models.py)\n- [tests.py](/assets/tests.py)\n- [urls.py](/assets/urls.py)\n- [views.py](/assets/views.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.mysite.polls.html","relUrl":"notes/aws-django-voting-app.frontend.mysite.polls.html"},{"doc":"Templates","title":"Templates","hpath":"aws-django-voting-app.frontend.mysite.polls.templates","content":"\n","url":"https://pulumi.dendron.so/notes/95f9ee53-7c2e-4e23-a6ea-5bce0a88c657.html","relUrl":"notes/95f9ee53-7c2e-4e23-a6ea-5bce0a88c657.html"},{"doc":"Polls","title":"Polls","hpath":"aws-django-voting-app.frontend.mysite.polls.templates.polls","content":"## Imported Assets\n\n- [detail.html](/assets/detail.html)\n- [index.html](/assets/index.html)\n- [results.html](/assets/results.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.mysite.polls.templates.polls.html","relUrl":"notes/aws-django-voting-app.frontend.mysite.polls.templates.polls.html"},{"doc":"Migrations","title":"Migrations","hpath":"aws-django-voting-app.frontend.mysite.polls.migrations","content":"## Imported Assets\n\n- [0001_initial.py](/assets/0001_initial.py)\n- [**init**.py](/assets/__init__.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.mysite.polls.migrations.html","relUrl":"notes/aws-django-voting-app.frontend.mysite.polls.migrations.html"},{"doc":"Mysite","title":"Mysite","hpath":"aws-django-voting-app.frontend.mysite.mysite","content":"## Imported Assets\n\n- [**init**.py](/assets/__init__.py)\n- [asgi.py](/assets/asgi.py)\n- [settings.py](/assets/settings.py)\n- [urls.py](/assets/urls.py)\n- [wsgi.py](/assets/wsgi.py)\n\n","url":"https://pulumi.dendron.so/notes/aws-django-voting-app.frontend.mysite.mysite.html","relUrl":"notes/aws-django-voting-app.frontend.mysite.mysite.html"},{"doc":"Aws Cs Webserver","title":"Aws Cs Webserver","hpath":"aws-cs-webserver","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Web Server Using Amazon EC2\n\nAn example based on the Amazon sample at:\n<http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/deploying.applications.html>. The example deploys an EC2 instance and opens port 80.\n\n## Deploying the App\n\nTo deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Configure Pulumi for AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n3. [Install .NET Core 3.0+](https://dotnet.microsoft.com/download)\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes:\n\n   ```\n   $ pulumi up\n   Previewing changes:\n   ...\n\n   Performing changes:\n   ...\n   info: 10 changes performed:\n       + 10 resources created\n   Update duration: 26.470339302s\n   ```\n\n4. View the host name and IP address of the instance via `stack output`:\n\n   ```\n   $ pulumi stack output\n   Current stack outputs (2):\n       OUTPUT          VALUE\n       PublicDns       ec2-34-217-176-141.us-west-2.compute.amazonaws.com\n       PublicIp        34.217.176.141\n   ```\n\n5. Verify that the EC2 instance exists, by either using the AWS Console or running `aws ec2 describe-instances`.\n\n6. From there, feel free to experiment. Simply making edits and running `pulumi up` will incrementally update your stack.\n\n7. Once you've finished experimenting, tear down your stack's resources by destroying and removing it:\n\n   ```bash\n   $ pulumi destroy --yes\n   $ pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Aws.WebServer.csproj](/assets/aws.csproj)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [WebServerStack.cs](/assets/webserverstack.cs)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-webserver.html","relUrl":"notes/aws-cs-webserver.html"},{"doc":"Aws Cs S3 Folder","title":"Aws Cs S3 Folder","hpath":"aws-cs-s3-folder","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Host a Static Website on Amazon S3\n\nA static website that uses [S3's website support](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).\n\n## Deploying and running the program\n\n1. Create a new stack:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set the AWS region:\n\n   ```\n   $ pulumi config set aws:region us-west-2\n   ```\n\n3. Run `pulumi up` to preview and deploy changes.\n\n   ```bash\n   Previewing update (dev):\n       Type                       Name                  Plan       \n   +   pulumi:pulumi:Stack        aws-cs-s3-folder-dev  create     \n   +   └─ aws:s3:Bucket           my-bucket             create     \n   +      ├─ aws:s3:BucketObject  index.html            create     \n   +      └─ aws:s3:BucketObject  favicon.png           create     \n\n   Resources:\n       + 4 to create\n\n   Do you want to perform this update? yes\n   Updating (dev):\n       Type                       Name                  Status      \n   +   pulumi:pulumi:Stack        aws-cs-s3-folder-dev  created     \n   +   └─ aws:s3:Bucket           my-bucket             created     \n   +      ├─ aws:s3:BucketObject  index.html            created     \n   +      └─ aws:s3:BucketObject  favicon.png           created     \n\n   Outputs:\n       Endpoint: \"http://my-bucket-1234567.s3-website.us-west-2.amazonaws.com\"\n   ```\n\n4. Navigate to the website URL:\n\n   ```bash\n   $ curl $(pulumi stack output Endpoint)\n   <html><head>\n       <title>Hello S3</title><meta charset=\"UTF-8\">\n       <link rel=\"shortcut icon\" href=\"/favicon.png\" type=\"image/png\">\n   </head>\n   <body><p>Hello, world!</p><p>Made with ❤️ with <a href=\"https://pulumi.com\">Pulumi</a></p>\n   </body></html>\n   ```\n\n5. To clean up resources, run `pulumi destroy` and answer the confirmation question at the prompt.\n\n* * *\n\n## Imported Assets\n\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [WebsiteStack.cs](/assets/websitestack.cs)\n- [aws-cs-s3-folder.csproj](/assets/aws-cs-s3-folder.csproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-s3-folder.html","relUrl":"notes/aws-cs-s3-folder.html"},{"doc":"Wwwroot","title":"Wwwroot","hpath":"aws-cs-s3-folder.wwwroot","content":"## Imported Assets\n\n- [favicon.png](/assets/favicon.png)\n- [index.html](/assets/index.html)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-s3-folder.wwwroot.html","relUrl":"notes/aws-cs-s3-folder.wwwroot.html"},{"doc":"Aws Cs Lambda","title":"Aws Cs Lambda","hpath":"aws-cs-lambda","content":"\n","url":"https://pulumi.dendron.so/notes/5e0bd48f-10e2-4abe-8568-9af5a7043ab0.html","relUrl":"notes/5e0bd48f-10e2-4abe-8568-9af5a7043ab0.html"},{"doc":"Pulumi","title":"Pulumi","hpath":"aws-cs-lambda.pulumi","content":"## Imported Assets\n\n- [Aws.Lambda.csproj](/assets/aws.csproj)\n- [LambdaStack.cs](/assets/lambdastack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-lambda.pulumi.html","relUrl":"notes/aws-cs-lambda.pulumi.html"},{"doc":"Dotnetlambda","title":"Dotnetlambda","hpath":"aws-cs-lambda.dotnetlambda","content":"\n","url":"https://pulumi.dendron.so/notes/71bba97b-a73e-44f8-adf9-2e8f3bb872cb.html","relUrl":"notes/71bba97b-a73e-44f8-adf9-2e8f3bb872cb.html"},{"doc":"Src","title":"Src","hpath":"aws-cs-lambda.dotnetlambda.src","content":"\n","url":"https://pulumi.dendron.so/notes/75057e31-bb55-45db-ae38-d6e2a39aa661.html","relUrl":"notes/75057e31-bb55-45db-ae38-d6e2a39aa661.html"},{"doc":"Dotnetlambda","title":"Dotnetlambda","hpath":"aws-cs-lambda.dotnetlambda.src.dotnetlambda","content":"# AWS Lambda Starter Function\n\nThis starter function takes a string input, and returns the `toUpper` of it.\n\nThis project must be published prior to running `pulumi up` so that our pulumi program can create an [Archive](https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/asset/#Archive).\n\n```bash\ndotnet publish\n```\n\nSee the [AWS .NET Lambda documentation](https://aws.amazon.com/blogs/compute/developing-net-core-aws-lambda-functions/) for more. \n\n## About\n\nGenerated with: \n\n```sh\ndotnet new lambda.EmptyFunction\n```\n\nSee the [AWS .NET Lambda documentation](https://aws.amazon.com/blogs/compute/developing-net-core-aws-lambda-functions/) for more C# templates. \n\n* * *\n\n## Imported Assets\n\n- [DotnetLambda.csproj](/assets/dotnetlambda.csproj)\n- [Function.cs](/assets/function.cs)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-lambda.dotnetlambda.src.dotnetlambda.html","relUrl":"notes/aws-cs-lambda.dotnetlambda.src.dotnetlambda.html"},{"doc":"Aws Cs Fargate","title":"Aws Cs Fargate","hpath":"aws-cs-fargate","content":"[![Deploy](https://get.pulumi.com/new/button.svg)](https://app.pulumi.com/new)\n\n# Dockerized ASP.NET App on AWS ECS Fargate\n\nThis example defines a [basic ASP.NET application](./App) and\n[all of the infrastructure required to run it in AWS](./Infra) in C#.\n\nThis infrastructure includes everything needed to:\n\n- Build and publish the ASP.NET application as a Docker container image\n- Store images in a private [Amazon Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/) repository\n- Scale out 3 load-balanced replicas using [Amazon Elastic Container Service (ECS)](https://aws.amazon.com/ecs/) \"Fargate\"\n- Accept Internet traffic on port 80 using [Amazon Elastic Application Load Balancer (ELB)](https://aws.amazon.com/elasticloadbalancing/)\n\nThis example is inspired by [Docker's](https://docs.docker.com/get-started/) and\n[ASP.NET's](https://docs.microsoft.com/en-us/aspnet/core/getting-started/?view=aspnetcore-3.1) Getting Started\ntutorials. The result is a simple development experience and yet an end result that uses modern, production-ready AWS\ninfrastructure. [`./Infra/Program.cs`](./Infra/Program.cs) defines the project's infrastructure.\n\n## Prerequisites\n\n- [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n- [Configure Pulumi to Use AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/) (if your AWS CLI is configured, no further changes are required)\n- [Install .NET Core 3](https://dotnet.microsoft.com/download)\n- [Install Docker](https://docs.docker.com/install/)\n\n## Running the Example\n\nClone this repo and `cd` into it.\n\nNext, to deploy the application and its infrastructure, follow these steps:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Deploy everything with a single `pulumi up` command. This will show you a preview of changes first, which\n   includes all of the required AWS resources (clusters, services, and the like). Don't worry if it's more than\n   you expected -- this is one of the benefits of Pulumi, it configures everything so that so you don't need to!\n\n   ```bash\n   $ pulumi up\n   ```\n\n    After being prompted and selecting \"yes\", your deployment will begin. It'll complete in a few minutes:\n\n   ```\n   Updating (dev):\n        Type                                        Name                Status\n    +   pulumi:pulumi:Stack                         aws-cs-fargate-dev  created\n    +   ├─ aws:ec2:SecurityGroup                    web-sg              created\n    +   ├─ aws:ecs:Cluster                          app-cluster         created\n    +   ├─ aws:iam:Role                             task-exec-role      created\n    +   ├─ aws:elasticloadbalancingv2:TargetGroup   web-tg              created\n    +   ├─ aws:ecr:Repository                       app-repo            created\n    +   ├─ docker:image:Image                       app-img             created\n    +   ├─ aws:iam:RolePolicyAttachment             task-exec-policy    created\n    +   ├─ aws:ecs:TaskDefinition                   app-task            created\n    +   ├─ aws:elasticloadbalancingv2:LoadBalancer  web-lb              created\n    +   └─ aws:ecs:Service                          app-svc             created\n\n   Outputs:\n       url: \"http://web-lb-23139b7-1806442625.us-east-1.elb.amazonaws.com\"\n\n   Resources:\n       + 11 created\n\n   Duration: 3m41s\n\n   Permalink: https://app.pulumi.com/acmecorp/aws-cs-fargate/dev/updates/1\n   ```\n\n   Notice that the automatically assigned load-balancer URL is printed as a stack output.\n\n4. At this point, your app is running -- let's curl it. The CLI makes it easy to grab the URL:\n\n   ```bash\n   $ curl $(pulumi stack output url)\n   Hello World!\n   ```\n\n5. Try making some changes and rerunning `pulumi up`.\n\n   If you just change the application code, and deploy the results, for example, only the Docker image\n   will be updated and rolled out. Try changing `\"Hello World!\"` inside of `App/Startup.cs` to `\"Hello Pulumi!\"`:\n\n   ```bash\n   $ pulumi up\n   Updating (dev):\n         Type                       Name                Plan        Info\n         pulumi:pulumi:Stack        aws-cs-fargate-dev\n     +-  ├─ aws:ecs:TaskDefinition  app-task            replaced    [diff: ~containerDefinitions]\n     ~   ├─ aws:ecs:Service         app-svc             updated     [diff: ~taskDefinition]\n         └─ docker:image:Image      app-img\n\n    Resources:\n        ~ 1 updated\n        +-1 replaced\n        2 changes. 9 unchanged\n   ```\n\n   Notice that `pulumi up` redeploys just the parts of the application/infrastructure that you've edited.\n\n   Now the endpoint will run the newly updated application code:\n\n   ```bash\n   $ curl $(pulumi stack output Url)\n   Hello Pulumi!\n   ```\n\n6. Once you are done, you can destroy all of the resources, and the stack:\n\n   ```bash\n   $ pulumi destroy\n   $ pulumi stack rm\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-fargate.html","relUrl":"notes/aws-cs-fargate.html"},{"doc":"Infra","title":"Infra","hpath":"aws-cs-fargate.infra","content":"## Imported Assets\n\n- [Aws.Fargate.csproj](/assets/aws.csproj)\n- [FargateStack.cs](/assets/fargatestack.cs)\n- [Program.cs](/assets/program.cs)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-fargate.infra.html","relUrl":"notes/aws-cs-fargate.infra.html"},{"doc":"App","title":"App","hpath":"aws-cs-fargate.app","content":"## Imported Assets\n\n- [Dockerfile](/assets/dockerfile)\n- [Program.cs](/assets/program.cs)\n- [Startup.cs](/assets/startup.cs)\n- [appsettings.json](/assets/appsettings.json)\n- [aws-cs-fargate.csproj](/assets/aws-cs-fargate.csproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-fargate.app.html","relUrl":"notes/aws-cs-fargate.app.html"},{"doc":"Properties","title":"Properties","hpath":"aws-cs-fargate.app.properties","content":"## Imported Assets\n\n- [launchSettings.json](/assets/launchsettings.json)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-fargate.app.properties.html","relUrl":"notes/aws-cs-fargate.app.properties.html"},{"doc":"Aws Cs Eks","title":"Aws Cs Eks","hpath":"aws-cs-eks","content":"# AWS C# EKS Cluster\n\nThis example creates an AWS EKS Cluster and deploys a sample container application to it\n\n## Deploying the App\n\n To deploy your infrastructure, follow the below steps.\n\n### Prerequisites\n\n1. [Install Pulumi](https://www.pulumi.com/docs/get-started/install/)\n2. [Install DotNet SDK](https://docs.microsoft.com/en-us/dotnet/core/install/sdk?pivots=os-windows)\n3. [Configure AWS Credentials](https://www.pulumi.com/docs/intro/cloud-providers/aws/setup/)\n4. [Install `aws-iam-authenticator`](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)\n5. [Install `kubectl`](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n\n### Steps\n\nAfter cloning this repo, run these commands from the working directory:\n\n1. Create a new stack, which is an isolated deployment target for this example:\n\n   ```bash\n   $ pulumi stack init dev\n   ```\n\n2. Set your desired AWS region:\n\n   ```bash\n   $ pulumi config set aws:region us-east-1 # any valid AWS region will work\n   ```\n\n3. Execute the Pulumi program to create our EKS Cluster:\n\n   ```bash\n   pulumi up\n   ```\n\n4. After 10-15 minutes, your cluster will be ready, and the kubeconfig JSON you'll use to connect to the cluster will\n   be available as an output. You can save this kubeconfig to a file like so:\n\n   ```bash\n   $ pulumi stack output kubeconfig --show-secrets >kubeconfig.json\n   ```\n\n    Once you have this file in hand, you can interact with your new cluster as usual via `kubectl`:\n\n   ```bash\n   $ KUBECONFIG=./kubeconfig.json kubectl get nodes\n   ```\n\n5. Ensure that the application is running as expected:\n\n   ```bash\n   $ curl $(pulumi stack output Url) \n   ```\n\n\n7. Afterwards, destroy your stack and remove it:\n\n   ```bash\n   pulumi destroy --yes\n   pulumi stack rm --yes\n   ```\n\n* * *\n\n## Imported Assets\n\n- [Aws.EksCluster.csproj](/assets/aws.csproj)\n- [EksStack.cs](/assets/eksstack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-eks.html","relUrl":"notes/aws-cs-eks.html"},{"doc":"Aws Cs Assume Role","title":"Aws Cs Assume Role","hpath":"aws-cs-assume-role","content":"\n","url":"https://pulumi.dendron.so/notes/b0a2da38-d4b9-4f46-900d-93abd2d0bd0e.html","relUrl":"notes/b0a2da38-d4b9-4f46-900d-93abd2d0bd0e.html"},{"doc":"Create Role","title":"Create Role","hpath":"aws-cs-assume-role.create-role","content":"## Imported Assets\n\n- [CreateRoleStack.cs](/assets/createrolestack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [create-role.csproj](/assets/create-role.csproj)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-assume-role.create-role.html","relUrl":"notes/aws-cs-assume-role.create-role.html"},{"doc":"Assume Role","title":"Assume Role","hpath":"aws-cs-assume-role.assume-role","content":"## Imported Assets\n\n- [AssumeRoleStack.cs](/assets/assumerolestack.cs)\n- [Program.cs](/assets/program.cs)\n- [Pulumi.yaml](/assets/pulumi.yaml)\n- [assume-role.csproj](/assets/assume-role.csproj)\n- [assume-role.sln](/assets/assume-role.sln)\n\n","url":"https://pulumi.dendron.so/notes/aws-cs-assume-role.assume-role.html","relUrl":"notes/aws-cs-assume-role.assume-role.html"},{"doc":"Changelog","title":"Changelog","hpath":"root.changelog","content":"","url":"https://pulumi.dendron.so/notes/changelog.html","relUrl":"notes/changelog.html"}]
